"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chunk = chunk;
exports.move = move;
exports.range = range;
exports.remove = remove;
exports.shuffle = shuffle;
exports.sortBy = sortBy;
exports.toArray = toArray;
exports.union = union;
exports.uniq = uniq;
exports.uniqueBy = uniqueBy;
var _is = require("./is.cjs");
function toArray(v) {
  if (v === null || v === void 0) return [];
  if ((0, _is.isArray)(v)) return v;
  return [v];
}
function uniq(v) {
  return Array.from(new Set(v));
}
function uniqueBy(array, equalFn) {
  return array.reduce((acc, cur) => {
    const index = acc.findIndex(item => equalFn(cur, item));
    if (index === -1) acc.push(cur);
    return acc;
  }, []);
}
function remove(array, value) {
  if (!(0, _is.isArray)(array)) return false;
  const index = array.indexOf(value);
  if (index !== -1) {
    array.splice(index, 1);
    return true;
  }
  return false;
}
function range(...args) {
  let start, stop, step;
  if (args.length === 1) {
    start = 0;
    stop = args[0];
    step = 1;
  } else {
    ;
    [start, stop, step = 1] = args;
  }
  const arr = [];
  let current = start;
  while (current < stop) {
    arr.push(current);
    current += step || 1;
  }
  return arr;
}
function move(arr, from, to) {
  arr.splice(to, 0, arr.splice(from, 1)[0]);
  return arr;
}
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}
function sortBy(array, cb) {
  if (array.length === 0) return [];
  return array.sort((a, b) => {
    const s1 = cb(a);
    const s2 = cb(b);
    return s1 > s2 ? 1 : s2 > s1 ? -1 : 0;
  });
}
function chunk(input, size = 1) {
  const chunks = [];
  for (let i = 0; i < input.length; i += size) chunks.push(input.slice(i, i + size));
  return chunks;
}
function union(a, b) {
  return [... /* @__PURE__ */new Set([...a, ...b])];
}