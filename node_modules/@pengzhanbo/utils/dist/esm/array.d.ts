import type { Arrayable, Nullable } from './types';
/**
 * Convert Arrayable<T> to Array<T>
 *
 * @category Array
 *
 * @example
 * ```ts
 * toArray(null) // => []
 * toArray(undefined) // => []
 * toArray([]) // => []
 * toArray(1) // => [1]
 * ```
 */
export declare function toArray<T>(v: Nullable<Arrayable<T>>): Array<T>;
/**
 * Unique array
 *
 * @category Array
 *
 * @example
 * ```ts
 * uniq([1, 1, 2, 2, 3, 3]) // => [1, 2, 3]
 * ```
 */
export declare function uniq<T>(v: T[]): T[];
/**
 * Unique array by a custom equality function
 * @category Array
 *
 * @example
 * ```ts
 * uniqueBy([1, 1, 2, 2, 3, 3], (a, b) => a === b) // => [1, 2, 3]
 * ```
 */
export declare function uniqueBy<T>(array: T[], equalFn: (a: T, b: T) => boolean): T[];
/**
 * Remove value from array
 * @category Array
 *
 * @param array - the array
 * @param value - the value to remove
 * @returns if `true`, the value is removed, `false` otherwise
 *
 * @example
 * ```ts
 * const arr = [1, 2, 3]
 * remove(arr, 2) // => true
 * console.log(arr) // => [1, 3]
 * remove(arr, 4) // => false
 * ```
 */
export declare function remove<T>(array: T[], value: T): boolean;
/**
 * Generate a range array of numbers. The `stop` is exclusive.
 *
 * @category Array
 *
 * @param stop - the end of the range
 *
 * @example
 * ```ts
 * range(5) // => [0, 1, 2, 3, 4]
 * ```
 */
export declare function range(stop: number): number[];
/**
 * Generate a range array of numbers.
 *
 * @category Array
 *
 * @param start - the start of the range
 * @param stop - the end of the range
 * @param step - the step of the range
 *
 * @example
 * ```ts
 * range(5, 10) // => [5, 6, 7, 8, 9]
 * range(5, 10, 2) // => [5, 7, 9]
 * ```
 */
export declare function range(start: number, stop: number, step?: number): number[];
/**
 * Move item in an array
 *
 * @category Array
 *
 * @param arr - the array
 * @param from - the index of the item to move
 * @param to - the index to move to
 */
export declare function move<T>(arr: T[], from: number, to: number): T[];
/**
 * Shuffle array
 * @category Array
 */
export declare function shuffle<T>(array: T[]): T[];
/**
 * Sort array
 * @category Array
 *
 * @example
 * ```ts
 * const arr = [
 *  { name: 'Mark', age: 20 },
 *  { name: 'John', age: 18 },
 *  { name: 'Jack', age: 21 },
 *  { name: 'Tom', age: 18 },
 * ]
 * sortBy(arr, (item) => item.age) // => [ { name: 'John', age: 18 }, { name: 'Tom', age: 18 }, { name: 'Mark', age: 20 }, { name: 'Jack', age: 21 } ]
 * ```
 */
export declare function sortBy<T>(array: T[], cb: (item: T) => number): T[];
/**
 * Split array into chunks
 *
 * @category Array
 *
 * @param input - the array
 * @param size - the chunk size
 *
 * @example
 * ```ts
 * chunk([1, 2, 3, 4, 5], 2) // => [[1, 2], [3, 4], [5]]
 * ```
 */
export declare function chunk<T>(input: T[], size?: number): T[][];
/**
 * Union two arrays
 *
 * @category Array
 *
 * @example
 * ```ts
 * union([1, 2, 3], [2, 4, 5, 6]) // => [1, 2, 3, 4, 5, 6]
 * ```
 */
export declare function union<T>(a: T[], b: T[]): T[];
