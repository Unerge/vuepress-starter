import type { DeepMerge, ObjectGet, ObjectKeyPaths } from './types';
/**
 * Check if an object has a non-inherited property
 * @category Object
 */
export declare function hasOwn<T>(obj: T, key: keyof any): key is keyof T;
/**
 * Freeze an object recursively and its properties
 * @category Object
 */
export declare function deepFreeze<T>(obj: T): T;
/**
 * Check if an object has a property
 * @category Object
 */
export declare function isKeyof<T extends object>(obj: T, key: keyof any): key is keyof T;
/**
 * Get a value from an object
 * @category Object
 * @example
 * ```ts
 * objectGet({ a: 1 }, 'a') // => 1
 * objectGet({ a: { b: 2 } }, 'a.b') // => 2
 * objectGet({ a: [{ b: 2 }] }, 'a[0].b') // => 2
 * ```
 */
export declare function objectGet<T extends Record<PropertyKey, any>, P extends ObjectKeyPaths<T>>(source: T, path: P): ObjectGet<T, P>;
/**
 * Deep merge
 *
 * The first argument is the target object, the rest are the sources.
 * The target object will be mutated and returned.
 *
 * @category Object
 */
export declare function deepMerge<T extends object = object, S extends object = T>(target: T, ...sources: S[]): DeepMerge<T, S>;
/**
 * Deep merge
 *
 * Differs from `deepMerge` in that it merges arrays instead of overriding them.
 *
 * The first argument is the target object, the rest are the sources.
 * The target object will be mutated and returned.
 *
 * @category Object
 */
export declare function deepMergeWithArray<T extends object = object, S extends object = T>(target: T, ...sources: S[]): DeepMerge<T, S>;
