export function noop() {
}
export function once(func) {
  let called = false;
  let res;
  return (...args) => {
    if (!called) {
      called = true;
      res = func(...args);
      return res;
    }
    return res;
  };
}
export function isTruthy(val) {
  return Boolean(val);
}
export function NotUndefined(val) {
  return typeof val !== "undefined";
}
export function invoke(fns) {
  if (Array.isArray(fns))
    fns.forEach((fn) => fn && fn());
  else
    return fns();
}
export function compose(...fns) {
  return function(...args) {
    const len = fns.length;
    if (len === 0)
      return args;
    if (len === 1)
      return fns[0](...args);
    return fns.slice(0, -1).reduceRight((acc, fn) => fn(acc), fns[len - 1](...args));
  };
}
