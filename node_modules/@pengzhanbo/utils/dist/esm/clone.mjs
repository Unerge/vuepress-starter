import { isArray, isObject } from "./is.mjs";
export function simpleClone(source) {
  return JSON.parse(JSON.stringify(source));
}
export function shallowClone(source) {
  if (isObject(source)) {
    const target = {};
    for (const [, key] of [
      ...Object.keys(source),
      ...Object.getOwnPropertySymbols(source)
    ].entries())
      target[key] = source[key];
    return target;
  }
  if (isArray(source))
    return [...source];
  return simpleClone(source);
}
export function deepClone(source) {
  return _deepClone(source);
}
function _deepClone(source, seen = /* @__PURE__ */ new WeakMap()) {
  let target;
  if (isObject(source))
    target = Object.create(source.constructor.prototype);
  if (isArray(source))
    target = [];
  else
    return source;
  if (seen.has(source))
    return seen.get(source);
  seen.set(source, target);
  const keys = [...Object.keys(source), ...Object.getOwnPropertySymbols(source)];
  for (let i = 0, l = keys.length; i < l; i++) {
    const key = keys[i];
    const value = source[key];
    target[key] = isObject(value) || isArray(value) ? _deepClone(value, seen) : value;
  }
  return target;
}
