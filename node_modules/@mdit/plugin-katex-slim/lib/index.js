import{createRequire as x}from"node:module";import{tex as y}from"@mdit/plugin-tex";const c=t=>t.replace(/&/gu,"&amp;").replace(/</gu,"&lt;").replace(/>/gu,"&gt;").replace(/"/gu,"&quot;").replace(/'/gu,"&#039;"),S=x(import.meta.url);let p=!0,l;try{l=(await import("katex")).default}catch{p=!1}const f=(t,r,o)=>{let e;try{e=l.renderToString(t,{...r,displayMode:!1})}catch(n){r.throwOnError&&console.warn(n),e=`<span class='katex-error' title='${c(n.toString())}'>${c(t)}</span>`}return o?.(e,!1)??e},$=(t,r,o)=>{let e;try{e=`<p class='katex-block'>${l.renderToString(t,{...r,displayMode:!0})}</p>
`}catch(n){r.throwOnError&&console.warn(n),e=`<p class='katex-block katex-error' title='${c(n.toString())}'>${c(t)}</p>
`}return o?.(e,!0)??e},I=(t,r={})=>{if(!p){console.error('[@mdit/plugin-katex]: "katex" not installed!');return}const{allowInlineWithSpace:o=!1,mathFence:e=!1,mhchem:n=!1,logger:m=a=>a==="newLineInDisplayMode"?"ignore":"warn",transformer:i,...g}=r;n&&S("katex/contrib/mhchem"),t.use(y,{allowInlineWithSpace:o,mathFence:e,render:(a,u,h)=>{const s={strict:(d,k,w)=>m(d,k,w,h)??"ignore",throwOnError:!1,...g};return u?$(a,s,i):f(a,s,i)}})};export{I as katex};
//# sourceMappingURL=index.js.map
