import { MarkdownItTexOptions } from '@mdit/plugin-tex';
import { KatexOptions } from 'katex';
import MarkdownIt from 'markdown-it';

type KatexCatcodes = Record<string, number>;
interface KatexLexerInterFace {
    input: string;
    tokenRegex: RegExp;
    settings: Required<KatexOptions>;
    catcodes: KatexCatcodes;
}
interface KatexSourceLocation {
    start: number;
    end: number;
    lexer: KatexLexerInterFace;
}
interface KatexToken {
    text: string;
    loc: KatexSourceLocation;
    noexpand: boolean | undefined;
    treatAsRelax: boolean | undefined;
}
type KatexLogger<MarkdownItEnv = unknown> = (errorCode: "unknownSymbol" | "unicodeTextInMathMode" | "mathVsTextUnits" | "commentAtEnd" | "htmlExtension" | "newLineInDisplayMode", errorMsg: string, token: KatexToken, env: MarkdownItEnv) => "error" | "warn" | "ignore" | void;
type TeXTransformer = (content: string, displayMode: boolean) => string;
interface MarkdownItKatexOptions<MarkdownItEnv = unknown> extends KatexOptions, Pick<MarkdownItTexOptions, "allowInlineWithSpace" | "mathFence"> {
    /**
     * Whether enable mhchem extension
     *
     * 是否启用 mhchem 扩展
     *
     * @default false
     */
    mhchem?: boolean;
    /**
     * Error logger
     *
     * 错误日志记录器
     */
    logger?: KatexLogger<MarkdownItEnv>;
    /**
     * transformer on output content
     *
     * 输出内容的转换器
     */
    transformer?: TeXTransformer;
}

declare const katex: <MarkdownItEnv = unknown>(md: MarkdownIt, options?: MarkdownItKatexOptions<MarkdownItEnv>) => void;

export { type KatexLogger, type KatexToken, type MarkdownItKatexOptions, type TeXTransformer, katex };
