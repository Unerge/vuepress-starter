{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/plugin.ts"],"sourcesContent":["import type Token from \"markdown-it/lib/token.mjs\";\n\nexport const setTokenAttr = (\n  token: Token,\n  name: string,\n  value: string,\n): void => {\n  const index = token.attrIndex(name);\n  const attr: [string, string] = [name, value];\n\n  if (index < 0) token.attrPush(attr);\n  else token.attrs![index] = attr;\n};\n\nexport const getParentTokenIndex = (tokens: Token[], index: number): number => {\n  const targetLevel = tokens[index].level - 1;\n\n  for (let i = index - 1; i >= 0; i--)\n    if (tokens[i].level === targetLevel) return i;\n\n  return -1;\n};\n\nexport const isInlineToken = (token?: Token): boolean =>\n  token?.type === \"inline\";\n\nexport const isParagraphToken = (token?: Token): boolean =>\n  token?.type === \"paragraph_open\";\n\nexport const isListItemToken = (token?: Token): boolean =>\n  token?.type === \"list_item_open\";\n","/**\n * Forked from https://github.com/linsir/markdown-it-task-checkbox/blob/master/index.js\n */\n\nimport type { PluginWithOptions } from \"markdown-it\";\nimport type { RuleCore } from \"markdown-it/lib/parser_core.mjs\";\nimport type StateCore from \"markdown-it/lib/rules_core/state_core.mjs\";\nimport type Token from \"markdown-it/lib/token.mjs\";\n\nimport type { MarkdownItTaskListOptions } from \"./options.js\";\nimport type { TaskListEnv } from \"./types.js\";\nimport {\n  getParentTokenIndex,\n  isInlineToken,\n  isListItemToken,\n  isParagraphToken,\n  setTokenAttr,\n} from \"./utils.js\";\n\ninterface TaskListStateCore extends StateCore {\n  env: TaskListEnv;\n}\n\n// The leading whitespace in a list item (token.content) is already trimmed off by markdown-it.\n// The regex below checks for '[ ] ' or '[x] ' or '[X] ' at the start of the string token.content,\n// where the space is either a normal space or a non-breaking space (character 160 = \\u00A0).\nconst startsWithTodoMarkdown = (token: Token): boolean =>\n  /^\\[[xX \\u00A0]\\][ \\u00A0]/.test(token.content);\n\nconst isTaskListItem = (tokens: Token[], index: number): boolean =>\n  isInlineToken(tokens[index]) &&\n  isParagraphToken(tokens[index - 1]) &&\n  isListItemToken(tokens[index - 2]) &&\n  startsWithTodoMarkdown(tokens[index]);\n\nexport const tasklist: PluginWithOptions<MarkdownItTaskListOptions> = (\n  md,\n  {\n    disabled = true,\n    label = true,\n    containerClass = \"task-list-container\",\n    itemClass = \"task-list-item\",\n    checkboxClass = \"task-list-item-checkbox\",\n    labelClass = \"task-list-item-label\",\n  } = {},\n) => {\n  const taskListRule: RuleCore = (state: TaskListStateCore) => {\n    const tokens = state.tokens;\n\n    if (!state.env.tasklists) state.env.tasklists = 0;\n\n    for (let i = 2; i < tokens.length; i++)\n      if (isTaskListItem(tokens, i)) {\n        const token = tokens[i];\n\n        token.children ??= [];\n\n        // remove the checkbox syntax letter\n        token.children[0].content = token.children[0].content.slice(3);\n\n        const id = `task-item-${state.env.tasklists++}`;\n\n        if (label) {\n          // add label\n          const labelToken = new state.Token(\"label_open\", \"label\", 1);\n\n          labelToken.attrs = [\n            [\"class\", labelClass],\n            [\"for\", id],\n          ];\n\n          token.children.unshift(labelToken);\n          token.children.push(new state.Token(\"label_close\", \"label\", -1));\n        }\n\n        const checkboxToken = new state.Token(\"checkbox_input\", \"input\", 0);\n\n        checkboxToken.attrs = [\n          [\"type\", \"checkbox\"],\n          [\"class\", checkboxClass],\n          [\"id\", id],\n        ];\n\n        // if token.content starts with '[x] ' or '[X] '\n        if (/^\\[[xX]\\][ \\u00A0]/.test(token.content))\n          checkboxToken.attrs.push([\"checked\", \"checked\"]);\n\n        if (disabled) checkboxToken.attrs.push([\"disabled\", \"disabled\"]);\n\n        // checkbox\n        token.children.unshift(checkboxToken);\n\n        setTokenAttr(tokens[i - 2], \"class\", itemClass);\n        setTokenAttr(\n          tokens[getParentTokenIndex(tokens, i - 2)],\n          \"class\",\n          containerClass,\n        );\n      }\n\n    return true;\n  };\n\n  md.core.ruler.after(\"inline\", \"task_list\", taskListRule);\n};\n"],"names":["setTokenAttr","token","name","value","index","attr","getParentTokenIndex","tokens","targetLevel","i","isInlineToken","isParagraphToken","isListItemToken","startsWithTodoMarkdown","isTaskListItem","tasklist","md","disabled","label","containerClass","itemClass","checkboxClass","labelClass","taskListRule","state","id","labelToken","checkboxToken"],"mappings":"AAEO,MAAMA,EAAe,CAC1BC,EACAC,EACAC,IACS,CACT,MAAMC,EAAQH,EAAM,UAAUC,CAAI,EAC5BG,EAAyB,CAACH,EAAMC,CAAK,EAEvCC,EAAQ,EAAGH,EAAM,SAASI,CAAI,EAC7BJ,EAAM,MAAOG,CAAK,EAAIC,CAC7B,EAEaC,EAAsB,CAACC,EAAiBH,IAA0B,CAC7E,MAAMI,EAAcD,EAAOH,CAAK,EAAE,MAAQ,EAE1C,QAASK,EAAIL,EAAQ,EAAGK,GAAK,EAAGA,IAC9B,GAAIF,EAAOE,CAAC,EAAE,QAAUD,EAAa,OAAOC,EAE9C,MAAO,EACT,EAEaC,EAAiBT,GAC5BA,GAAO,OAAS,SAELU,EAAoBV,GAC/BA,GAAO,OAAS,iBAELW,EAAmBX,GAC9BA,GAAO,OAAS,iBCJZY,EAA0BZ,GAC9B,4BAA4B,KAAKA,EAAM,OAAO,EAE1Ca,EAAiB,CAACP,EAAiBH,IACvCM,EAAcH,EAAOH,CAAK,CAAC,GAC3BO,EAAiBJ,EAAOH,EAAQ,CAAC,CAAC,GAClCQ,EAAgBL,EAAOH,EAAQ,CAAC,CAAC,GACjCS,EAAuBN,EAAOH,CAAK,CAAC,EAEzBW,EAAyD,CACpEC,EACA,CACE,SAAAC,EAAW,GACX,MAAAC,EAAQ,GACR,eAAAC,EAAiB,sBACjB,UAAAC,EAAY,iBACZ,cAAAC,EAAgB,0BAChB,WAAAC,EAAa,sBACf,EAAI,CACD,IAAA,CACH,MAAMC,EAA0BC,GAA6B,CAC3D,MAAMjB,EAASiB,EAAM,OAEhBA,EAAM,IAAI,YAAWA,EAAM,IAAI,UAAY,GAEhD,QAAS,EAAI,EAAG,EAAIjB,EAAO,OAAQ,IACjC,GAAIO,EAAeP,EAAQ,CAAC,EAAG,CAC7B,MAAMN,EAAQM,EAAO,CAAC,EAEtBN,EAAM,WAAa,GAGnBA,EAAM,SAAS,CAAC,EAAE,QAAUA,EAAM,SAAS,CAAC,EAAE,QAAQ,MAAM,CAAC,EAE7D,MAAMwB,EAAK,aAAaD,EAAM,IAAI,WAAW,GAE7C,GAAIN,EAAO,CAET,MAAMQ,EAAa,IAAIF,EAAM,MAAM,aAAc,QAAS,CAAC,EAE3DE,EAAW,MAAQ,CACjB,CAAC,QAASJ,CAAU,EACpB,CAAC,MAAOG,CAAE,CACZ,EAEAxB,EAAM,SAAS,QAAQyB,CAAU,EACjCzB,EAAM,SAAS,KAAK,IAAIuB,EAAM,MAAM,cAAe,QAAS,EAAE,CAAC,CACjE,CAEA,MAAMG,EAAgB,IAAIH,EAAM,MAAM,iBAAkB,QAAS,CAAC,EAElEG,EAAc,MAAQ,CACpB,CAAC,OAAQ,UAAU,EACnB,CAAC,QAASN,CAAa,EACvB,CAAC,KAAMI,CAAE,CACX,EAGI,qBAAqB,KAAKxB,EAAM,OAAO,GACzC0B,EAAc,MAAM,KAAK,CAAC,UAAW,SAAS,CAAC,EAE7CV,GAAUU,EAAc,MAAM,KAAK,CAAC,WAAY,UAAU,CAAC,EAG/D1B,EAAM,SAAS,QAAQ0B,CAAa,EAEpC3B,EAAaO,EAAO,EAAI,CAAC,EAAG,QAASa,CAAS,EAC9CpB,EACEO,EAAOD,EAAoBC,EAAQ,EAAI,CAAC,CAAC,EACzC,QACAY,CACF,CACF,CAEF,MAAO,EACT,EAEAH,EAAG,KAAK,MAAM,MAAM,SAAU,YAAaO,CAAY,CACzD"}