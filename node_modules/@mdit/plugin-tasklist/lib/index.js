const d=(t,e,c)=>{const s=t.attrIndex(e),o=[e,c];s<0?t.attrPush(o):t.attrs[s]=o},f=(t,e)=>{const c=t[e].level-1;for(let s=e-1;s>=0;s--)if(t[s].level===c)return s;return-1},x=t=>t?.type==="inline",T=t=>t?.type==="paragraph_open",m=t=>t?.type==="list_item_open",_=t=>/^\[[xX \u00A0]\][ \u00A0]/.test(t.content),v=(t,e)=>x(t[e])&&T(t[e-1])&&m(t[e-2])&&_(t[e]),y=(t,{disabled:e=!0,label:c=!0,containerClass:s="task-list-container",itemClass:o="task-list-item",checkboxClass:p="task-list-item-checkbox",labelClass:u="task-list-item-label"}={})=>{const b=n=>{const a=n.tokens;n.env.tasklists||(n.env.tasklists=0);for(let i=2;i<a.length;i++)if(v(a,i)){const l=a[i];l.children??=[],l.children[0].content=l.children[0].content.slice(3);const k=`task-item-${n.env.tasklists++}`;if(c){const h=new n.Token("label_open","label",1);h.attrs=[["class",u],["for",k]],l.children.unshift(h),l.children.push(new n.Token("label_close","label",-1))}const r=new n.Token("checkbox_input","input",0);r.attrs=[["type","checkbox"],["class",p],["id",k]],/^\[[xX]\][ \u00A0]/.test(l.content)&&r.attrs.push(["checked","checked"]),e&&r.attrs.push(["disabled","disabled"]),l.children.unshift(r),d(a[i-2],"class",o),d(a[f(a,i-2)],"class",s)}return!0};t.core.ruler.after("inline","task_list",b)};export{y as tasklist};
//# sourceMappingURL=index.js.map
