/*!
 * watermark-js-plus v1.5.7
 * (c) 2022-2024 Michael Sun
 * Released under the MIT License.
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WatermarkPlus = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var check = function (it) {
	  return it && it.Math === Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var globalThis_1 =
	  // eslint-disable-next-line es/no-global-this -- safe
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  // eslint-disable-next-line no-restricted-globals -- safe
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func -- fallback
	  (function () { return this; })() || Function('return this')();

	var objectGetOwnPropertyDescriptor = {};

	var fails$b = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	var fails$a = fails$b;

	// Detect IE8's incomplete defineProperty implementation
	var descriptors = !fails$a(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;
	});

	var fails$9 = fails$b;

	var functionBindNative = !fails$9(function () {
	  // eslint-disable-next-line es/no-function-prototype-bind -- safe
	  var test = (function () { /* empty */ }).bind();
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return typeof test != 'function' || test.hasOwnProperty('prototype');
	});

	var NATIVE_BIND$3 = functionBindNative;

	var call$c = Function.prototype.call;

	var functionCall = NATIVE_BIND$3 ? call$c.bind(call$c) : function () {
	  return call$c.apply(call$c, arguments);
	};

	var objectPropertyIsEnumerable = {};

	var $propertyIsEnumerable = {}.propertyIsEnumerable;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
	objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$2(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable;

	var createPropertyDescriptor$3 = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var NATIVE_BIND$2 = functionBindNative;

	var FunctionPrototype$2 = Function.prototype;
	var call$b = FunctionPrototype$2.call;
	var uncurryThisWithBind = NATIVE_BIND$2 && FunctionPrototype$2.bind.bind(call$b, call$b);

	var functionUncurryThis = NATIVE_BIND$2 ? uncurryThisWithBind : function (fn) {
	  return function () {
	    return call$b.apply(fn, arguments);
	  };
	};

	var uncurryThis$d = functionUncurryThis;

	var toString$1 = uncurryThis$d({}.toString);
	var stringSlice$1 = uncurryThis$d(''.slice);

	var classofRaw$2 = function (it) {
	  return stringSlice$1(toString$1(it), 8, -1);
	};

	var uncurryThis$c = functionUncurryThis;
	var fails$8 = fails$b;
	var classof$4 = classofRaw$2;

	var $Object$3 = Object;
	var split = uncurryThis$c(''.split);

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails$8(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins -- safe
	  return !$Object$3('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classof$4(it) === 'String' ? split(it, '') : $Object$3(it);
	} : $Object$3;

	// we can't use just `it == null` since of `document.all` special case
	// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
	var isNullOrUndefined$4 = function (it) {
	  return it === null || it === undefined;
	};

	var isNullOrUndefined$3 = isNullOrUndefined$4;

	var $TypeError$c = TypeError;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.es/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible$3 = function (it) {
	  if (isNullOrUndefined$3(it)) throw new $TypeError$c("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings
	var IndexedObject = indexedObject;
	var requireObjectCoercible$2 = requireObjectCoercible$3;

	var toIndexedObject$4 = function (it) {
	  return IndexedObject(requireObjectCoercible$2(it));
	};

	// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
	var documentAll = typeof document == 'object' && document.all;

	// `IsCallable` abstract operation
	// https://tc39.es/ecma262/#sec-iscallable
	// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
	var isCallable$g = typeof documentAll == 'undefined' && documentAll !== undefined ? function (argument) {
	  return typeof argument == 'function' || argument === documentAll;
	} : function (argument) {
	  return typeof argument == 'function';
	};

	var isCallable$f = isCallable$g;

	var isObject$9 = function (it) {
	  return typeof it == 'object' ? it !== null : isCallable$f(it);
	};

	var globalThis$i = globalThis_1;
	var isCallable$e = isCallable$g;

	var aFunction = function (argument) {
	  return isCallable$e(argument) ? argument : undefined;
	};

	var getBuiltIn$7 = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(globalThis$i[namespace]) : globalThis$i[namespace] && globalThis$i[namespace][method];
	};

	var uncurryThis$b = functionUncurryThis;

	var objectIsPrototypeOf = uncurryThis$b({}.isPrototypeOf);

	var globalThis$h = globalThis_1;

	var navigator = globalThis$h.navigator;
	var userAgent$5 = navigator && navigator.userAgent;

	var environmentUserAgent = userAgent$5 ? String(userAgent$5) : '';

	var globalThis$g = globalThis_1;
	var userAgent$4 = environmentUserAgent;

	var process$3 = globalThis$g.process;
	var Deno$1 = globalThis$g.Deno;
	var versions = process$3 && process$3.versions || Deno$1 && Deno$1.version;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
	  // but their correct versions are not interesting for us
	  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	}

	// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
	// so check `userAgent` even if `.v8` exists, but 0
	if (!version && userAgent$4) {
	  match = userAgent$4.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = userAgent$4.match(/Chrome\/(\d+)/);
	    if (match) version = +match[1];
	  }
	}

	var environmentV8Version = version;

	/* eslint-disable es/no-symbol -- required for testing */
	var V8_VERSION$1 = environmentV8Version;
	var fails$7 = fails$b;
	var globalThis$f = globalThis_1;

	var $String$4 = globalThis$f.String;

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
	var symbolConstructorDetection = !!Object.getOwnPropertySymbols && !fails$7(function () {
	  var symbol = Symbol('symbol detection');
	  // Chrome 38 Symbol has incorrect toString conversion
	  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
	  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
	  // of course, fail.
	  return !$String$4(symbol) || !(Object(symbol) instanceof Symbol) ||
	    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
	    !Symbol.sham && V8_VERSION$1 && V8_VERSION$1 < 41;
	});

	/* eslint-disable es/no-symbol -- required for testing */
	var NATIVE_SYMBOL$1 = symbolConstructorDetection;

	var useSymbolAsUid = NATIVE_SYMBOL$1
	  && !Symbol.sham
	  && typeof Symbol.iterator == 'symbol';

	var getBuiltIn$6 = getBuiltIn$7;
	var isCallable$d = isCallable$g;
	var isPrototypeOf$2 = objectIsPrototypeOf;
	var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

	var $Object$2 = Object;

	var isSymbol$2 = USE_SYMBOL_AS_UID$1 ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  var $Symbol = getBuiltIn$6('Symbol');
	  return isCallable$d($Symbol) && isPrototypeOf$2($Symbol.prototype, $Object$2(it));
	};

	var $String$3 = String;

	var tryToString$4 = function (argument) {
	  try {
	    return $String$3(argument);
	  } catch (error) {
	    return 'Object';
	  }
	};

	var isCallable$c = isCallable$g;
	var tryToString$3 = tryToString$4;

	var $TypeError$b = TypeError;

	// `Assert: IsCallable(argument) is true`
	var aCallable$8 = function (argument) {
	  if (isCallable$c(argument)) return argument;
	  throw new $TypeError$b(tryToString$3(argument) + ' is not a function');
	};

	var aCallable$7 = aCallable$8;
	var isNullOrUndefined$2 = isNullOrUndefined$4;

	// `GetMethod` abstract operation
	// https://tc39.es/ecma262/#sec-getmethod
	var getMethod$3 = function (V, P) {
	  var func = V[P];
	  return isNullOrUndefined$2(func) ? undefined : aCallable$7(func);
	};

	var call$a = functionCall;
	var isCallable$b = isCallable$g;
	var isObject$8 = isObject$9;

	var $TypeError$a = TypeError;

	// `OrdinaryToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-ordinarytoprimitive
	var ordinaryToPrimitive$1 = function (input, pref) {
	  var fn, val;
	  if (pref === 'string' && isCallable$b(fn = input.toString) && !isObject$8(val = call$a(fn, input))) return val;
	  if (isCallable$b(fn = input.valueOf) && !isObject$8(val = call$a(fn, input))) return val;
	  if (pref !== 'string' && isCallable$b(fn = input.toString) && !isObject$8(val = call$a(fn, input))) return val;
	  throw new $TypeError$a("Can't convert object to primitive value");
	};

	var sharedStore = {exports: {}};

	var globalThis$e = globalThis_1;

	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var defineProperty$4 = Object.defineProperty;

	var defineGlobalProperty$3 = function (key, value) {
	  try {
	    defineProperty$4(globalThis$e, key, { value: value, configurable: true, writable: true });
	  } catch (error) {
	    globalThis$e[key] = value;
	  } return value;
	};

	var globalThis$d = globalThis_1;
	var defineGlobalProperty$2 = defineGlobalProperty$3;

	var SHARED = '__core-js_shared__';
	var store$3 = sharedStore.exports = globalThis$d[SHARED] || defineGlobalProperty$2(SHARED, {});

	(store$3.versions || (store$3.versions = [])).push({
	  version: '3.38.1',
	  mode: 'global',
	  copyright: '© 2014-2024 Denis Pushkarev (zloirock.ru)',
	  license: 'https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE',
	  source: 'https://github.com/zloirock/core-js'
	});

	var sharedStoreExports = sharedStore.exports;

	var store$2 = sharedStoreExports;

	var shared$3 = function (key, value) {
	  return store$2[key] || (store$2[key] = value || {});
	};

	var requireObjectCoercible$1 = requireObjectCoercible$3;

	var $Object$1 = Object;

	// `ToObject` abstract operation
	// https://tc39.es/ecma262/#sec-toobject
	var toObject$3 = function (argument) {
	  return $Object$1(requireObjectCoercible$1(argument));
	};

	var uncurryThis$a = functionUncurryThis;
	var toObject$2 = toObject$3;

	var hasOwnProperty = uncurryThis$a({}.hasOwnProperty);

	// `HasOwnProperty` abstract operation
	// https://tc39.es/ecma262/#sec-hasownproperty
	// eslint-disable-next-line es/no-object-hasown -- safe
	var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
	  return hasOwnProperty(toObject$2(it), key);
	};

	var uncurryThis$9 = functionUncurryThis;

	var id = 0;
	var postfix = Math.random();
	var toString = uncurryThis$9(1.0.toString);

	var uid$2 = function (key) {
	  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
	};

	var globalThis$c = globalThis_1;
	var shared$2 = shared$3;
	var hasOwn$8 = hasOwnProperty_1;
	var uid$1 = uid$2;
	var NATIVE_SYMBOL = symbolConstructorDetection;
	var USE_SYMBOL_AS_UID = useSymbolAsUid;

	var Symbol$1 = globalThis$c.Symbol;
	var WellKnownSymbolsStore = shared$2('wks');
	var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1['for'] || Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;

	var wellKnownSymbol$b = function (name) {
	  if (!hasOwn$8(WellKnownSymbolsStore, name)) {
	    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn$8(Symbol$1, name)
	      ? Symbol$1[name]
	      : createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var call$9 = functionCall;
	var isObject$7 = isObject$9;
	var isSymbol$1 = isSymbol$2;
	var getMethod$2 = getMethod$3;
	var ordinaryToPrimitive = ordinaryToPrimitive$1;
	var wellKnownSymbol$a = wellKnownSymbol$b;

	var $TypeError$9 = TypeError;
	var TO_PRIMITIVE = wellKnownSymbol$a('toPrimitive');

	// `ToPrimitive` abstract operation
	// https://tc39.es/ecma262/#sec-toprimitive
	var toPrimitive$1 = function (input, pref) {
	  if (!isObject$7(input) || isSymbol$1(input)) return input;
	  var exoticToPrim = getMethod$2(input, TO_PRIMITIVE);
	  var result;
	  if (exoticToPrim) {
	    if (pref === undefined) pref = 'default';
	    result = call$9(exoticToPrim, input, pref);
	    if (!isObject$7(result) || isSymbol$1(result)) return result;
	    throw new $TypeError$9("Can't convert object to primitive value");
	  }
	  if (pref === undefined) pref = 'number';
	  return ordinaryToPrimitive(input, pref);
	};

	var toPrimitive = toPrimitive$1;
	var isSymbol = isSymbol$2;

	// `ToPropertyKey` abstract operation
	// https://tc39.es/ecma262/#sec-topropertykey
	var toPropertyKey$2 = function (argument) {
	  var key = toPrimitive(argument, 'string');
	  return isSymbol(key) ? key : key + '';
	};

	var globalThis$b = globalThis_1;
	var isObject$6 = isObject$9;

	var document$3 = globalThis$b.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS$1 = isObject$6(document$3) && isObject$6(document$3.createElement);

	var documentCreateElement$1 = function (it) {
	  return EXISTS$1 ? document$3.createElement(it) : {};
	};

	var DESCRIPTORS$a = descriptors;
	var fails$6 = fails$b;
	var createElement$1 = documentCreateElement$1;

	// Thanks to IE8 for its funny defineProperty
	var ie8DomDefine = !DESCRIPTORS$a && !fails$6(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(createElement$1('div'), 'a', {
	    get: function () { return 7; }
	  }).a !== 7;
	});

	var DESCRIPTORS$9 = descriptors;
	var call$8 = functionCall;
	var propertyIsEnumerableModule = objectPropertyIsEnumerable;
	var createPropertyDescriptor$2 = createPropertyDescriptor$3;
	var toIndexedObject$3 = toIndexedObject$4;
	var toPropertyKey$1 = toPropertyKey$2;
	var hasOwn$7 = hasOwnProperty_1;
	var IE8_DOM_DEFINE$1 = ie8DomDefine;

	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
	objectGetOwnPropertyDescriptor.f = DESCRIPTORS$9 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject$3(O);
	  P = toPropertyKey$1(P);
	  if (IE8_DOM_DEFINE$1) try {
	    return $getOwnPropertyDescriptor$1(O, P);
	  } catch (error) { /* empty */ }
	  if (hasOwn$7(O, P)) return createPropertyDescriptor$2(!call$8(propertyIsEnumerableModule.f, O, P), O[P]);
	};

	var objectDefineProperty = {};

	var DESCRIPTORS$8 = descriptors;
	var fails$5 = fails$b;

	// V8 ~ Chrome 36-
	// https://bugs.chromium.org/p/v8/issues/detail?id=3334
	var v8PrototypeDefineBug = DESCRIPTORS$8 && fails$5(function () {
	  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
	  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
	    value: 42,
	    writable: false
	  }).prototype !== 42;
	});

	var isObject$5 = isObject$9;

	var $String$2 = String;
	var $TypeError$8 = TypeError;

	// `Assert: Type(argument) is Object`
	var anObject$a = function (argument) {
	  if (isObject$5(argument)) return argument;
	  throw new $TypeError$8($String$2(argument) + ' is not an object');
	};

	var DESCRIPTORS$7 = descriptors;
	var IE8_DOM_DEFINE = ie8DomDefine;
	var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
	var anObject$9 = anObject$a;
	var toPropertyKey = toPropertyKey$2;

	var $TypeError$7 = TypeError;
	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var $defineProperty = Object.defineProperty;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var ENUMERABLE = 'enumerable';
	var CONFIGURABLE$1 = 'configurable';
	var WRITABLE = 'writable';

	// `Object.defineProperty` method
	// https://tc39.es/ecma262/#sec-object.defineproperty
	objectDefineProperty.f = DESCRIPTORS$7 ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
	  anObject$9(O);
	  P = toPropertyKey(P);
	  anObject$9(Attributes);
	  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
	    var current = $getOwnPropertyDescriptor(O, P);
	    if (current && current[WRITABLE]) {
	      O[P] = Attributes.value;
	      Attributes = {
	        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
	        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
	        writable: false
	      };
	    }
	  } return $defineProperty(O, P, Attributes);
	} : $defineProperty : function defineProperty(O, P, Attributes) {
	  anObject$9(O);
	  P = toPropertyKey(P);
	  anObject$9(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return $defineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError$7('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var DESCRIPTORS$6 = descriptors;
	var definePropertyModule$4 = objectDefineProperty;
	var createPropertyDescriptor$1 = createPropertyDescriptor$3;

	var createNonEnumerableProperty$2 = DESCRIPTORS$6 ? function (object, key, value) {
	  return definePropertyModule$4.f(object, key, createPropertyDescriptor$1(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var makeBuiltIn$3 = {exports: {}};

	var DESCRIPTORS$5 = descriptors;
	var hasOwn$6 = hasOwnProperty_1;

	var FunctionPrototype$1 = Function.prototype;
	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getDescriptor = DESCRIPTORS$5 && Object.getOwnPropertyDescriptor;

	var EXISTS = hasOwn$6(FunctionPrototype$1, 'name');
	// additional protection from minified / mangled / dropped function names
	var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
	var CONFIGURABLE = EXISTS && (!DESCRIPTORS$5 || (DESCRIPTORS$5 && getDescriptor(FunctionPrototype$1, 'name').configurable));

	var functionName = {
	  EXISTS: EXISTS,
	  PROPER: PROPER,
	  CONFIGURABLE: CONFIGURABLE
	};

	var uncurryThis$8 = functionUncurryThis;
	var isCallable$a = isCallable$g;
	var store$1 = sharedStoreExports;

	var functionToString = uncurryThis$8(Function.toString);

	// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
	if (!isCallable$a(store$1.inspectSource)) {
	  store$1.inspectSource = function (it) {
	    return functionToString(it);
	  };
	}

	var inspectSource$3 = store$1.inspectSource;

	var globalThis$a = globalThis_1;
	var isCallable$9 = isCallable$g;

	var WeakMap$1 = globalThis$a.WeakMap;

	var weakMapBasicDetection = isCallable$9(WeakMap$1) && /native code/.test(String(WeakMap$1));

	var shared$1 = shared$3;
	var uid = uid$2;

	var keys = shared$1('keys');

	var sharedKey$2 = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys$4 = {};

	var NATIVE_WEAK_MAP = weakMapBasicDetection;
	var globalThis$9 = globalThis_1;
	var isObject$4 = isObject$9;
	var createNonEnumerableProperty$1 = createNonEnumerableProperty$2;
	var hasOwn$5 = hasOwnProperty_1;
	var shared = sharedStoreExports;
	var sharedKey$1 = sharedKey$2;
	var hiddenKeys$3 = hiddenKeys$4;

	var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
	var TypeError$2 = globalThis$9.TypeError;
	var WeakMap = globalThis$9.WeakMap;
	var set$1, get, has;

	var enforce = function (it) {
	  return has(it) ? get(it) : set$1(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject$4(it) || (state = get(it)).type !== TYPE) {
	      throw new TypeError$2('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (NATIVE_WEAK_MAP || shared.state) {
	  var store = shared.state || (shared.state = new WeakMap());
	  /* eslint-disable no-self-assign -- prototype methods protection */
	  store.get = store.get;
	  store.has = store.has;
	  store.set = store.set;
	  /* eslint-enable no-self-assign -- prototype methods protection */
	  set$1 = function (it, metadata) {
	    if (store.has(it)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    store.set(it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return store.get(it) || {};
	  };
	  has = function (it) {
	    return store.has(it);
	  };
	} else {
	  var STATE = sharedKey$1('state');
	  hiddenKeys$3[STATE] = true;
	  set$1 = function (it, metadata) {
	    if (hasOwn$5(it, STATE)) throw new TypeError$2(OBJECT_ALREADY_INITIALIZED);
	    metadata.facade = it;
	    createNonEnumerableProperty$1(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return hasOwn$5(it, STATE) ? it[STATE] : {};
	  };
	  has = function (it) {
	    return hasOwn$5(it, STATE);
	  };
	}

	var internalState = {
	  set: set$1,
	  get: get,
	  has: has,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var uncurryThis$7 = functionUncurryThis;
	var fails$4 = fails$b;
	var isCallable$8 = isCallable$g;
	var hasOwn$4 = hasOwnProperty_1;
	var DESCRIPTORS$4 = descriptors;
	var CONFIGURABLE_FUNCTION_NAME = functionName.CONFIGURABLE;
	var inspectSource$2 = inspectSource$3;
	var InternalStateModule$1 = internalState;

	var enforceInternalState = InternalStateModule$1.enforce;
	var getInternalState = InternalStateModule$1.get;
	var $String$1 = String;
	// eslint-disable-next-line es/no-object-defineproperty -- safe
	var defineProperty$3 = Object.defineProperty;
	var stringSlice = uncurryThis$7(''.slice);
	var replace = uncurryThis$7(''.replace);
	var join = uncurryThis$7([].join);

	var CONFIGURABLE_LENGTH = DESCRIPTORS$4 && !fails$4(function () {
	  return defineProperty$3(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
	});

	var TEMPLATE = String(String).split('String');

	var makeBuiltIn$2 = makeBuiltIn$3.exports = function (value, name, options) {
	  if (stringSlice($String$1(name), 0, 7) === 'Symbol(') {
	    name = '[' + replace($String$1(name), /^Symbol\(([^)]*)\).*$/, '$1') + ']';
	  }
	  if (options && options.getter) name = 'get ' + name;
	  if (options && options.setter) name = 'set ' + name;
	  if (!hasOwn$4(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
	    if (DESCRIPTORS$4) defineProperty$3(value, 'name', { value: name, configurable: true });
	    else value.name = name;
	  }
	  if (CONFIGURABLE_LENGTH && options && hasOwn$4(options, 'arity') && value.length !== options.arity) {
	    defineProperty$3(value, 'length', { value: options.arity });
	  }
	  try {
	    if (options && hasOwn$4(options, 'constructor') && options.constructor) {
	      if (DESCRIPTORS$4) defineProperty$3(value, 'prototype', { writable: false });
	    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
	    } else if (value.prototype) value.prototype = undefined;
	  } catch (error) { /* empty */ }
	  var state = enforceInternalState(value);
	  if (!hasOwn$4(state, 'source')) {
	    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
	  } return value;
	};

	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	// eslint-disable-next-line no-extend-native -- required
	Function.prototype.toString = makeBuiltIn$2(function toString() {
	  return isCallable$8(this) && getInternalState(this).source || inspectSource$2(this);
	}, 'toString');

	var makeBuiltInExports = makeBuiltIn$3.exports;

	var isCallable$7 = isCallable$g;
	var definePropertyModule$3 = objectDefineProperty;
	var makeBuiltIn$1 = makeBuiltInExports;
	var defineGlobalProperty$1 = defineGlobalProperty$3;

	var defineBuiltIn$3 = function (O, key, value, options) {
	  if (!options) options = {};
	  var simple = options.enumerable;
	  var name = options.name !== undefined ? options.name : key;
	  if (isCallable$7(value)) makeBuiltIn$1(value, name, options);
	  if (options.global) {
	    if (simple) O[key] = value;
	    else defineGlobalProperty$1(key, value);
	  } else {
	    try {
	      if (!options.unsafe) delete O[key];
	      else if (O[key]) simple = true;
	    } catch (error) { /* empty */ }
	    if (simple) O[key] = value;
	    else definePropertyModule$3.f(O, key, {
	      value: value,
	      enumerable: false,
	      configurable: !options.nonConfigurable,
	      writable: !options.nonWritable
	    });
	  } return O;
	};

	var objectGetOwnPropertyNames = {};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `Math.trunc` method
	// https://tc39.es/ecma262/#sec-math.trunc
	// eslint-disable-next-line es/no-math-trunc -- safe
	var mathTrunc = Math.trunc || function trunc(x) {
	  var n = +x;
	  return (n > 0 ? floor : ceil)(n);
	};

	var trunc = mathTrunc;

	// `ToIntegerOrInfinity` abstract operation
	// https://tc39.es/ecma262/#sec-tointegerorinfinity
	var toIntegerOrInfinity$2 = function (argument) {
	  var number = +argument;
	  // eslint-disable-next-line no-self-compare -- NaN check
	  return number !== number || number === 0 ? 0 : trunc(number);
	};

	var toIntegerOrInfinity$1 = toIntegerOrInfinity$2;

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex$2 = function (index, length) {
	  var integer = toIntegerOrInfinity$1(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	var toIntegerOrInfinity = toIntegerOrInfinity$2;

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.es/ecma262/#sec-tolength
	var toLength$1 = function (argument) {
	  var len = toIntegerOrInfinity(argument);
	  return len > 0 ? min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var toLength = toLength$1;

	// `LengthOfArrayLike` abstract operation
	// https://tc39.es/ecma262/#sec-lengthofarraylike
	var lengthOfArrayLike$4 = function (obj) {
	  return toLength(obj.length);
	};

	var toIndexedObject$2 = toIndexedObject$4;
	var toAbsoluteIndex$1 = toAbsoluteIndex$2;
	var lengthOfArrayLike$3 = lengthOfArrayLike$4;

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject$2($this);
	    var length = lengthOfArrayLike$3(O);
	    if (length === 0) return !IS_INCLUDES && -1;
	    var index = toAbsoluteIndex$1(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare -- NaN check
	    if (IS_INCLUDES && el !== el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare -- NaN check
	      if (value !== value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.es/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.es/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var uncurryThis$6 = functionUncurryThis;
	var hasOwn$3 = hasOwnProperty_1;
	var toIndexedObject$1 = toIndexedObject$4;
	var indexOf = arrayIncludes.indexOf;
	var hiddenKeys$2 = hiddenKeys$4;

	var push = uncurryThis$6([].push);

	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject$1(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !hasOwn$3(hiddenKeys$2, key) && hasOwn$3(O, key) && push(result, key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (hasOwn$3(O, key = names[i++])) {
	    ~indexOf(result, key) || push(result, key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys$3 = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var internalObjectKeys$1 = objectKeysInternal;
	var enumBugKeys$2 = enumBugKeys$3;

	var hiddenKeys$1 = enumBugKeys$2.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.es/ecma262/#sec-object.getownpropertynames
	// eslint-disable-next-line es/no-object-getownpropertynames -- safe
	objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return internalObjectKeys$1(O, hiddenKeys$1);
	};

	var objectGetOwnPropertySymbols = {};

	// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
	objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

	var getBuiltIn$5 = getBuiltIn$7;
	var uncurryThis$5 = functionUncurryThis;
	var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
	var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
	var anObject$8 = anObject$a;

	var concat = uncurryThis$5([].concat);

	// all object keys, includes non-enumerable and symbols
	var ownKeys$1 = getBuiltIn$5('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = getOwnPropertyNamesModule.f(anObject$8(it));
	  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
	  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
	};

	var hasOwn$2 = hasOwnProperty_1;
	var ownKeys = ownKeys$1;
	var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
	var definePropertyModule$2 = objectDefineProperty;

	var copyConstructorProperties$1 = function (target, source, exceptions) {
	  var keys = ownKeys(source);
	  var defineProperty = definePropertyModule$2.f;
	  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!hasOwn$2(target, key) && !(exceptions && hasOwn$2(exceptions, key))) {
	      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	    }
	  }
	};

	var fails$3 = fails$b;
	var isCallable$6 = isCallable$g;

	var replacement = /#|\.prototype\./;

	var isForced$2 = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value === POLYFILL ? true
	    : value === NATIVE ? false
	    : isCallable$6(detection) ? fails$3(detection)
	    : !!detection;
	};

	var normalize = isForced$2.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced$2.data = {};
	var NATIVE = isForced$2.NATIVE = 'N';
	var POLYFILL = isForced$2.POLYFILL = 'P';

	var isForced_1 = isForced$2;

	var globalThis$8 = globalThis_1;
	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var createNonEnumerableProperty = createNonEnumerableProperty$2;
	var defineBuiltIn$2 = defineBuiltIn$3;
	var defineGlobalProperty = defineGlobalProperty$3;
	var copyConstructorProperties = copyConstructorProperties$1;
	var isForced$1 = isForced_1;

	/*
	  options.target         - name of the target object
	  options.global         - target is the global object
	  options.stat           - export as static methods of target
	  options.proto          - export as prototype methods of target
	  options.real           - real prototype method for the `pure` version
	  options.forced         - export even if the native feature is available
	  options.bind           - bind methods to the target, required for the `pure` version
	  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
	  options.sham           - add a flag to not completely full polyfills
	  options.enumerable     - export as enumerable property
	  options.dontCallGetSet - prevent calling a getter on target
	  options.name           - the .name of the function if it does not match the key
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = globalThis$8;
	  } else if (STATIC) {
	    target = globalThis$8[TARGET] || defineGlobalProperty(TARGET, {});
	  } else {
	    target = globalThis$8[TARGET] && globalThis$8[TARGET].prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.dontCallGetSet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced$1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty == typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    defineBuiltIn$2(target, key, sourceProperty, options);
	  }
	};

	var classofRaw$1 = classofRaw$2;
	var uncurryThis$4 = functionUncurryThis;

	var functionUncurryThisClause = function (fn) {
	  // Nashorn bug:
	  //   https://github.com/zloirock/core-js/issues/1128
	  //   https://github.com/zloirock/core-js/issues/1130
	  if (classofRaw$1(fn) === 'Function') return uncurryThis$4(fn);
	};

	var uncurryThis$3 = functionUncurryThisClause;
	var aCallable$6 = aCallable$8;
	var NATIVE_BIND$1 = functionBindNative;

	var bind$5 = uncurryThis$3(uncurryThis$3.bind);

	// optional / simple context binding
	var functionBindContext = function (fn, that) {
	  aCallable$6(fn);
	  return that === undefined ? fn : NATIVE_BIND$1 ? bind$5(fn, that) : function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var call$7 = functionCall;
	var anObject$7 = anObject$a;
	var getMethod$1 = getMethod$3;

	var iteratorClose$2 = function (iterator, kind, value) {
	  var innerResult, innerError;
	  anObject$7(iterator);
	  try {
	    innerResult = getMethod$1(iterator, 'return');
	    if (!innerResult) {
	      if (kind === 'throw') throw value;
	      return value;
	    }
	    innerResult = call$7(innerResult, iterator);
	  } catch (error) {
	    innerError = true;
	    innerResult = error;
	  }
	  if (kind === 'throw') throw value;
	  if (innerError) throw innerResult;
	  anObject$7(innerResult);
	  return value;
	};

	var anObject$6 = anObject$a;
	var iteratorClose$1 = iteratorClose$2;

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing$1 = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject$6(value)[0], value[1]) : fn(value);
	  } catch (error) {
	    iteratorClose$1(iterator, 'throw', error);
	  }
	};

	var iterators = {};

	var wellKnownSymbol$9 = wellKnownSymbol$b;
	var Iterators$1 = iterators;

	var ITERATOR$2 = wellKnownSymbol$9('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod$2 = function (it) {
	  return it !== undefined && (Iterators$1.Array === it || ArrayPrototype$1[ITERATOR$2] === it);
	};

	var wellKnownSymbol$8 = wellKnownSymbol$b;

	var TO_STRING_TAG$2 = wellKnownSymbol$8('toStringTag');
	var test = {};

	test[TO_STRING_TAG$2] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG_SUPPORT = toStringTagSupport;
	var isCallable$5 = isCallable$g;
	var classofRaw = classofRaw$2;
	var wellKnownSymbol$7 = wellKnownSymbol$b;

	var TO_STRING_TAG$1 = wellKnownSymbol$7('toStringTag');
	var $Object = Object;

	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof$3 = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG$1)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) === 'Object' && isCallable$5(O.callee) ? 'Arguments' : result;
	};

	var uncurryThis$2 = functionUncurryThis;
	var fails$2 = fails$b;
	var isCallable$4 = isCallable$g;
	var classof$2 = classof$3;
	var getBuiltIn$4 = getBuiltIn$7;
	var inspectSource$1 = inspectSource$3;

	var noop = function () { /* empty */ };
	var construct = getBuiltIn$4('Reflect', 'construct');
	var constructorRegExp = /^\s*(?:class|function)\b/;
	var exec = uncurryThis$2(constructorRegExp.exec);
	var INCORRECT_TO_STRING = !constructorRegExp.test(noop);

	var isConstructorModern = function isConstructor(argument) {
	  if (!isCallable$4(argument)) return false;
	  try {
	    construct(noop, [], argument);
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var isConstructorLegacy = function isConstructor(argument) {
	  if (!isCallable$4(argument)) return false;
	  switch (classof$2(argument)) {
	    case 'AsyncFunction':
	    case 'GeneratorFunction':
	    case 'AsyncGeneratorFunction': return false;
	  }
	  try {
	    // we can't check .prototype since constructors produced by .bind haven't it
	    // `Function#toString` throws on some built-it function in some legacy engines
	    // (for example, `DOMQuad` and similar in FF41-)
	    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource$1(argument));
	  } catch (error) {
	    return true;
	  }
	};

	isConstructorLegacy.sham = true;

	// `IsConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-isconstructor
	var isConstructor$2 = !construct || fails$2(function () {
	  var called;
	  return isConstructorModern(isConstructorModern.call)
	    || !isConstructorModern(Object)
	    || !isConstructorModern(function () { called = true; })
	    || called;
	}) ? isConstructorLegacy : isConstructorModern;

	var DESCRIPTORS$3 = descriptors;
	var definePropertyModule$1 = objectDefineProperty;
	var createPropertyDescriptor = createPropertyDescriptor$3;

	var createProperty$1 = function (object, key, value) {
	  if (DESCRIPTORS$3) definePropertyModule$1.f(object, key, createPropertyDescriptor(0, value));
	  else object[key] = value;
	};

	var classof$1 = classof$3;
	var getMethod = getMethod$3;
	var isNullOrUndefined$1 = isNullOrUndefined$4;
	var Iterators = iterators;
	var wellKnownSymbol$6 = wellKnownSymbol$b;

	var ITERATOR$1 = wellKnownSymbol$6('iterator');

	var getIteratorMethod$3 = function (it) {
	  if (!isNullOrUndefined$1(it)) return getMethod(it, ITERATOR$1)
	    || getMethod(it, '@@iterator')
	    || Iterators[classof$1(it)];
	};

	var call$6 = functionCall;
	var aCallable$5 = aCallable$8;
	var anObject$5 = anObject$a;
	var tryToString$2 = tryToString$4;
	var getIteratorMethod$2 = getIteratorMethod$3;

	var $TypeError$6 = TypeError;

	var getIterator$2 = function (argument, usingIterator) {
	  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$2(argument) : usingIterator;
	  if (aCallable$5(iteratorMethod)) return anObject$5(call$6(iteratorMethod, argument));
	  throw new $TypeError$6(tryToString$2(argument) + ' is not iterable');
	};

	var bind$4 = functionBindContext;
	var call$5 = functionCall;
	var toObject$1 = toObject$3;
	var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
	var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
	var isConstructor$1 = isConstructor$2;
	var lengthOfArrayLike$2 = lengthOfArrayLike$4;
	var createProperty = createProperty$1;
	var getIterator$1 = getIterator$2;
	var getIteratorMethod$1 = getIteratorMethod$3;

	var $Array = Array;

	// `Array.from` method implementation
	// https://tc39.es/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject$1(arrayLike);
	  var IS_CONSTRUCTOR = isConstructor$1(this);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  if (mapping) mapfn = bind$4(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
	  var iteratorMethod = getIteratorMethod$1(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod && !(this === $Array && isArrayIteratorMethod$1(iteratorMethod))) {
	    result = IS_CONSTRUCTOR ? new this() : [];
	    iterator = getIterator$1(O, iteratorMethod);
	    next = iterator.next;
	    for (;!(step = call$5(next, iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = lengthOfArrayLike$2(O);
	    result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var wellKnownSymbol$5 = wellKnownSymbol$b;

	var ITERATOR = wellKnownSymbol$5('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR] = function () {
	    return this;
	  };
	  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration$2 = function (exec, SKIP_CLOSING) {
	  try {
	    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  } catch (error) { return false; } // workaround of old WebKit + `eval` bug
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var $$8 = _export;
	var from = arrayFrom;
	var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$2;

	var INCORRECT_ITERATION = !checkCorrectnessOfIteration$1(function (iterable) {
	  // eslint-disable-next-line es/no-array-from -- required for testing
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.es/ecma262/#sec-array.from
	$$8({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
	  from: from
	});

	/* global Bun, Deno -- detection */
	var globalThis$7 = globalThis_1;
	var userAgent$3 = environmentUserAgent;
	var classof = classofRaw$2;

	var userAgentStartsWith = function (string) {
	  return userAgent$3.slice(0, string.length) === string;
	};

	var environment = (function () {
	  if (userAgentStartsWith('Bun/')) return 'BUN';
	  if (userAgentStartsWith('Cloudflare-Workers')) return 'CLOUDFLARE';
	  if (userAgentStartsWith('Deno/')) return 'DENO';
	  if (userAgentStartsWith('Node.js/')) return 'NODE';
	  if (globalThis$7.Bun && typeof Bun.version == 'string') return 'BUN';
	  if (globalThis$7.Deno && typeof Deno.version == 'object') return 'DENO';
	  if (classof(globalThis$7.process) === 'process') return 'NODE';
	  if (globalThis$7.window && globalThis$7.document) return 'BROWSER';
	  return 'REST';
	})();

	var ENVIRONMENT$1 = environment;

	var environmentIsNode = ENVIRONMENT$1 === 'NODE';

	var uncurryThis$1 = functionUncurryThis;
	var aCallable$4 = aCallable$8;

	var functionUncurryThisAccessor = function (object, key, method) {
	  try {
	    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	    return uncurryThis$1(aCallable$4(Object.getOwnPropertyDescriptor(object, key)[method]));
	  } catch (error) { /* empty */ }
	};

	var isObject$3 = isObject$9;

	var isPossiblePrototype$1 = function (argument) {
	  return isObject$3(argument) || argument === null;
	};

	var isPossiblePrototype = isPossiblePrototype$1;

	var $String = String;
	var $TypeError$5 = TypeError;

	var aPossiblePrototype$1 = function (argument) {
	  if (isPossiblePrototype(argument)) return argument;
	  throw new $TypeError$5("Can't set " + $String(argument) + ' as a prototype');
	};

	/* eslint-disable no-proto -- safe */
	var uncurryThisAccessor = functionUncurryThisAccessor;
	var isObject$2 = isObject$9;
	var requireObjectCoercible = requireObjectCoercible$3;
	var aPossiblePrototype = aPossiblePrototype$1;

	// `Object.setPrototypeOf` method
	// https://tc39.es/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	// eslint-disable-next-line es/no-object-setprototypeof -- safe
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');
	    setter(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    requireObjectCoercible(O);
	    aPossiblePrototype(proto);
	    if (!isObject$2(O)) return O;
	    if (CORRECT_SETTER) setter(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var defineProperty$2 = objectDefineProperty.f;
	var hasOwn$1 = hasOwnProperty_1;
	var wellKnownSymbol$4 = wellKnownSymbol$b;

	var TO_STRING_TAG = wellKnownSymbol$4('toStringTag');

	var setToStringTag$1 = function (target, TAG, STATIC) {
	  if (target && !STATIC) target = target.prototype;
	  if (target && !hasOwn$1(target, TO_STRING_TAG)) {
	    defineProperty$2(target, TO_STRING_TAG, { configurable: true, value: TAG });
	  }
	};

	var makeBuiltIn = makeBuiltInExports;
	var defineProperty$1 = objectDefineProperty;

	var defineBuiltInAccessor$1 = function (target, name, descriptor) {
	  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
	  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
	  return defineProperty$1.f(target, name, descriptor);
	};

	var getBuiltIn$3 = getBuiltIn$7;
	var defineBuiltInAccessor = defineBuiltInAccessor$1;
	var wellKnownSymbol$3 = wellKnownSymbol$b;
	var DESCRIPTORS$2 = descriptors;

	var SPECIES$2 = wellKnownSymbol$3('species');

	var setSpecies$1 = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn$3(CONSTRUCTOR_NAME);

	  if (DESCRIPTORS$2 && Constructor && !Constructor[SPECIES$2]) {
	    defineBuiltInAccessor(Constructor, SPECIES$2, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var isPrototypeOf$1 = objectIsPrototypeOf;

	var $TypeError$4 = TypeError;

	var anInstance$1 = function (it, Prototype) {
	  if (isPrototypeOf$1(Prototype, it)) return it;
	  throw new $TypeError$4('Incorrect invocation');
	};

	var isConstructor = isConstructor$2;
	var tryToString$1 = tryToString$4;

	var $TypeError$3 = TypeError;

	// `Assert: IsConstructor(argument) is true`
	var aConstructor$1 = function (argument) {
	  if (isConstructor(argument)) return argument;
	  throw new $TypeError$3(tryToString$1(argument) + ' is not a constructor');
	};

	var anObject$4 = anObject$a;
	var aConstructor = aConstructor$1;
	var isNullOrUndefined = isNullOrUndefined$4;
	var wellKnownSymbol$2 = wellKnownSymbol$b;

	var SPECIES$1 = wellKnownSymbol$2('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.es/ecma262/#sec-speciesconstructor
	var speciesConstructor$1 = function (O, defaultConstructor) {
	  var C = anObject$4(O).constructor;
	  var S;
	  return C === undefined || isNullOrUndefined(S = anObject$4(C)[SPECIES$1]) ? defaultConstructor : aConstructor(S);
	};

	var NATIVE_BIND = functionBindNative;

	var FunctionPrototype = Function.prototype;
	var apply$1 = FunctionPrototype.apply;
	var call$4 = FunctionPrototype.call;

	// eslint-disable-next-line es/no-reflect -- safe
	var functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call$4.bind(apply$1) : function () {
	  return call$4.apply(apply$1, arguments);
	});

	var getBuiltIn$2 = getBuiltIn$7;

	var html$2 = getBuiltIn$2('document', 'documentElement');

	var uncurryThis = functionUncurryThis;

	var arraySlice$1 = uncurryThis([].slice);

	var $TypeError$2 = TypeError;

	var validateArgumentsLength$1 = function (passed, required) {
	  if (passed < required) throw new $TypeError$2('Not enough arguments');
	  return passed;
	};

	var userAgent$2 = environmentUserAgent;

	// eslint-disable-next-line redos/no-vulnerable -- safe
	var environmentIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$2);

	var globalThis$6 = globalThis_1;
	var apply = functionApply;
	var bind$3 = functionBindContext;
	var isCallable$3 = isCallable$g;
	var hasOwn = hasOwnProperty_1;
	var fails$1 = fails$b;
	var html$1 = html$2;
	var arraySlice = arraySlice$1;
	var createElement = documentCreateElement$1;
	var validateArgumentsLength = validateArgumentsLength$1;
	var IS_IOS$1 = environmentIsIos;
	var IS_NODE$2 = environmentIsNode;

	var set = globalThis$6.setImmediate;
	var clear = globalThis$6.clearImmediate;
	var process$2 = globalThis$6.process;
	var Dispatch = globalThis$6.Dispatch;
	var Function$1 = globalThis$6.Function;
	var MessageChannel = globalThis$6.MessageChannel;
	var String$1 = globalThis$6.String;
	var counter = 0;
	var queue$2 = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var $location, defer, channel, port;

	fails$1(function () {
	  // Deno throws a ReferenceError on `location` access without `--location` flag
	  $location = globalThis$6.location;
	});

	var run = function (id) {
	  if (hasOwn(queue$2, id)) {
	    var fn = queue$2[id];
	    delete queue$2[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var eventListener = function (event) {
	  run(event.data);
	};

	var globalPostMessageDefer = function (id) {
	  // old engines have not location.origin
	  globalThis$6.postMessage(String$1(id), $location.protocol + '//' + $location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set || !clear) {
	  set = function setImmediate(handler) {
	    validateArgumentsLength(arguments.length, 1);
	    var fn = isCallable$3(handler) ? handler : Function$1(handler);
	    var args = arraySlice(arguments, 1);
	    queue$2[++counter] = function () {
	      apply(fn, undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue$2[id];
	  };
	  // Node.js 0.8-
	  if (IS_NODE$2) {
	    defer = function (id) {
	      process$2.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !IS_IOS$1) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = eventListener;
	    defer = bind$3(port.postMessage, port);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    globalThis$6.addEventListener &&
	    isCallable$3(globalThis$6.postMessage) &&
	    !globalThis$6.importScripts &&
	    $location && $location.protocol !== 'file:' &&
	    !fails$1(globalPostMessageDefer)
	  ) {
	    defer = globalPostMessageDefer;
	    globalThis$6.addEventListener('message', eventListener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in createElement('script')) {
	    defer = function (id) {
	      html$1.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
	        html$1.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task$1 = {
	  set: set,
	  clear: clear
	};

	var globalThis$5 = globalThis_1;
	var DESCRIPTORS$1 = descriptors;

	// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Avoid NodeJS experimental warning
	var safeGetBuiltIn$1 = function (name) {
	  if (!DESCRIPTORS$1) return globalThis$5[name];
	  var descriptor = getOwnPropertyDescriptor(globalThis$5, name);
	  return descriptor && descriptor.value;
	};

	var Queue$2 = function () {
	  this.head = null;
	  this.tail = null;
	};

	Queue$2.prototype = {
	  add: function (item) {
	    var entry = { item: item, next: null };
	    var tail = this.tail;
	    if (tail) tail.next = entry;
	    else this.head = entry;
	    this.tail = entry;
	  },
	  get: function () {
	    var entry = this.head;
	    if (entry) {
	      var next = this.head = entry.next;
	      if (next === null) this.tail = null;
	      return entry.item;
	    }
	  }
	};

	var queue$1 = Queue$2;

	var userAgent$1 = environmentUserAgent;

	var environmentIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$1) && typeof Pebble != 'undefined';

	var userAgent = environmentUserAgent;

	var environmentIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent);

	var globalThis$4 = globalThis_1;
	var safeGetBuiltIn = safeGetBuiltIn$1;
	var bind$2 = functionBindContext;
	var macrotask = task$1.set;
	var Queue$1 = queue$1;
	var IS_IOS = environmentIsIos;
	var IS_IOS_PEBBLE = environmentIsIosPebble;
	var IS_WEBOS_WEBKIT = environmentIsWebosWebkit;
	var IS_NODE$1 = environmentIsNode;

	var MutationObserver$1 = globalThis$4.MutationObserver || globalThis$4.WebKitMutationObserver;
	var document$2 = globalThis$4.document;
	var process$1 = globalThis$4.process;
	var Promise$1 = globalThis$4.Promise;
	var microtask$1 = safeGetBuiltIn('queueMicrotask');
	var notify$1, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!microtask$1) {
	  var queue = new Queue$1();

	  var flush = function () {
	    var parent, fn;
	    if (IS_NODE$1 && (parent = process$1.domain)) parent.exit();
	    while (fn = queue.get()) try {
	      fn();
	    } catch (error) {
	      if (queue.head) notify$1();
	      throw error;
	    }
	    if (parent) parent.enter();
	  };

	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
	  if (!IS_IOS && !IS_NODE$1 && !IS_WEBOS_WEBKIT && MutationObserver$1 && document$2) {
	    toggle = true;
	    node = document$2.createTextNode('');
	    new MutationObserver$1(flush).observe(node, { characterData: true });
	    notify$1 = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    // workaround of WebKit ~ iOS Safari 10.1 bug
	    promise.constructor = Promise$1;
	    then = bind$2(promise.then, promise);
	    notify$1 = function () {
	      then(flush);
	    };
	  // Node.js without promises
	  } else if (IS_NODE$1) {
	    notify$1 = function () {
	      process$1.nextTick(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessage
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    // `webpack` dev server bug on IE global methods - use bind(fn, global)
	    macrotask = bind$2(macrotask, globalThis$4);
	    notify$1 = function () {
	      macrotask(flush);
	    };
	  }

	  microtask$1 = function (fn) {
	    if (!queue.head) notify$1();
	    queue.add(fn);
	  };
	}

	var microtask_1 = microtask$1;

	var hostReportErrors$1 = function (a, b) {
	  try {
	    // eslint-disable-next-line no-console -- safe
	    arguments.length === 1 ? (void 0) : (void 0);
	  } catch (error) { /* empty */ }
	};

	var perform$3 = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var globalThis$3 = globalThis_1;

	var promiseNativeConstructor = globalThis$3.Promise;

	var globalThis$2 = globalThis_1;
	var NativePromiseConstructor$3 = promiseNativeConstructor;
	var isCallable$2 = isCallable$g;
	var isForced = isForced_1;
	var inspectSource = inspectSource$3;
	var wellKnownSymbol$1 = wellKnownSymbol$b;
	var ENVIRONMENT = environment;
	var V8_VERSION = environmentV8Version;

	NativePromiseConstructor$3 && NativePromiseConstructor$3.prototype;
	var SPECIES = wellKnownSymbol$1('species');
	var SUBCLASSING = false;
	var NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$2(globalThis$2.PromiseRejectionEvent);

	var FORCED_PROMISE_CONSTRUCTOR$5 = isForced('Promise', function () {
	  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor$3);
	  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$3);
	  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	  // We can't detect it synchronously, so just check versions
	  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
	    // Detect correctness of subclassing with @@species support
	    var promise = new NativePromiseConstructor$3(function (resolve) { resolve(1); });
	    var FakePromise = function (exec) {
	      exec(function () { /* empty */ }, function () { /* empty */ });
	    };
	    var constructor = promise.constructor = {};
	    constructor[SPECIES] = FakePromise;
	    SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
	    if (!SUBCLASSING) return true;
	  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	  } return !GLOBAL_CORE_JS_PROMISE && (ENVIRONMENT === 'BROWSER' || ENVIRONMENT === 'DENO') && !NATIVE_PROMISE_REJECTION_EVENT$1;
	});

	var promiseConstructorDetection = {
	  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,
	  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,
	  SUBCLASSING: SUBCLASSING
	};

	var newPromiseCapability$2 = {};

	var aCallable$3 = aCallable$8;

	var $TypeError$1 = TypeError;

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw new $TypeError$1('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aCallable$3(resolve);
	  this.reject = aCallable$3(reject);
	};

	// `NewPromiseCapability` abstract operation
	// https://tc39.es/ecma262/#sec-newpromisecapability
	newPromiseCapability$2.f = function (C) {
	  return new PromiseCapability(C);
	};

	var $$7 = _export;
	var IS_NODE = environmentIsNode;
	var globalThis$1 = globalThis_1;
	var call$3 = functionCall;
	var defineBuiltIn$1 = defineBuiltIn$3;
	var setPrototypeOf = objectSetPrototypeOf;
	var setToStringTag = setToStringTag$1;
	var setSpecies = setSpecies$1;
	var aCallable$2 = aCallable$8;
	var isCallable$1 = isCallable$g;
	var isObject$1 = isObject$9;
	var anInstance = anInstance$1;
	var speciesConstructor = speciesConstructor$1;
	var task = task$1.set;
	var microtask = microtask_1;
	var hostReportErrors = hostReportErrors$1;
	var perform$2 = perform$3;
	var Queue = queue$1;
	var InternalStateModule = internalState;
	var NativePromiseConstructor$2 = promiseNativeConstructor;
	var PromiseConstructorDetection = promiseConstructorDetection;
	var newPromiseCapabilityModule$3 = newPromiseCapability$2;

	var PROMISE = 'Promise';
	var FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;
	var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
	var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
	var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
	var setInternalState = InternalStateModule.set;
	var NativePromisePrototype$1 = NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;
	var PromiseConstructor = NativePromiseConstructor$2;
	var PromisePrototype = NativePromisePrototype$1;
	var TypeError$1 = globalThis$1.TypeError;
	var document$1 = globalThis$1.document;
	var process = globalThis$1.process;
	var newPromiseCapability$1 = newPromiseCapabilityModule$3.f;
	var newGenericPromiseCapability = newPromiseCapability$1;

	var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && globalThis$1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;

	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject$1(it) && isCallable$1(then = it.then) ? then : false;
	};

	var callReaction = function (reaction, state) {
	  var value = state.value;
	  var ok = state.state === FULFILLED;
	  var handler = ok ? reaction.ok : reaction.fail;
	  var resolve = reaction.resolve;
	  var reject = reaction.reject;
	  var domain = reaction.domain;
	  var result, then, exited;
	  try {
	    if (handler) {
	      if (!ok) {
	        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
	        state.rejection = HANDLED;
	      }
	      if (handler === true) result = value;
	      else {
	        if (domain) domain.enter();
	        result = handler(value); // can throw
	        if (domain) {
	          domain.exit();
	          exited = true;
	        }
	      }
	      if (result === reaction.promise) {
	        reject(new TypeError$1('Promise-chain cycle'));
	      } else if (then = isThenable(result)) {
	        call$3(then, result, resolve, reject);
	      } else resolve(result);
	    } else reject(value);
	  } catch (error) {
	    if (domain && !exited) domain.exit();
	    reject(error);
	  }
	};

	var notify = function (state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  microtask(function () {
	    var reactions = state.reactions;
	    var reaction;
	    while (reaction = reactions.get()) {
	      callReaction(reaction, state);
	    }
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$1.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    globalThis$1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = globalThis$1['on' + name])) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (state) {
	  call$3(task, globalThis$1, function () {
	    var promise = state.facade;
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform$2(function () {
	        if (IS_NODE) {
	          process.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (state) {
	  call$3(task, globalThis$1, function () {
	    var promise = state.facade;
	    if (IS_NODE) {
	      process.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind$1 = function (fn, state, unwrap) {
	  return function (value) {
	    fn(state, value, unwrap);
	  };
	};

	var internalReject = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify(state, true);
	};

	var internalResolve = function (state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (state.facade === value) throw new TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          call$3(then, value,
	            bind$1(internalResolve, wrapper, state),
	            bind$1(internalReject, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify(state, false);
	    }
	  } catch (error) {
	    internalReject({ done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED_PROMISE_CONSTRUCTOR$4) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromisePrototype);
	    aCallable$2(executor);
	    call$3(Internal, this);
	    var state = getInternalPromiseState(this);
	    try {
	      executor(bind$1(internalResolve, state), bind$1(internalReject, state));
	    } catch (error) {
	      internalReject(state, error);
	    }
	  };

	  PromisePrototype = PromiseConstructor.prototype;

	  // eslint-disable-next-line no-unused-vars -- required for `.length`
	  Internal = function Promise(executor) {
	    setInternalState(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: new Queue(),
	      rejection: false,
	      state: PENDING,
	      value: null
	    });
	  };

	  // `Promise.prototype.then` method
	  // https://tc39.es/ecma262/#sec-promise.prototype.then
	  Internal.prototype = defineBuiltIn$1(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
	    var state = getInternalPromiseState(this);
	    var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	    state.parent = true;
	    reaction.ok = isCallable$1(onFulfilled) ? onFulfilled : true;
	    reaction.fail = isCallable$1(onRejected) && onRejected;
	    reaction.domain = IS_NODE ? process.domain : undefined;
	    if (state.state === PENDING) state.reactions.add(reaction);
	    else microtask(function () {
	      callReaction(reaction, state);
	    });
	    return reaction.promise;
	  });

	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalPromiseState(promise);
	    this.promise = promise;
	    this.resolve = bind$1(internalResolve, state);
	    this.reject = bind$1(internalReject, state);
	  };

	  newPromiseCapabilityModule$3.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if (isCallable$1(NativePromiseConstructor$2) && NativePromisePrototype$1 !== Object.prototype) {
	    nativeThen = NativePromisePrototype$1.then;

	    if (!NATIVE_PROMISE_SUBCLASSING) {
	      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
	      defineBuiltIn$1(NativePromisePrototype$1, 'then', function then(onFulfilled, onRejected) {
	        var that = this;
	        return new PromiseConstructor(function (resolve, reject) {
	          call$3(nativeThen, that, resolve, reject);
	        }).then(onFulfilled, onRejected);
	      // https://github.com/zloirock/core-js/issues/640
	      }, { unsafe: true });
	    }

	    // make `.constructor === Promise` work for native promise-based APIs
	    try {
	      delete NativePromisePrototype$1.constructor;
	    } catch (error) { /* empty */ }

	    // make `instanceof Promise` work for native promise-based APIs
	    if (setPrototypeOf) {
	      setPrototypeOf(NativePromisePrototype$1, PromisePrototype);
	    }
	  }
	}

	$$7({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	var bind = functionBindContext;
	var call$2 = functionCall;
	var anObject$3 = anObject$a;
	var tryToString = tryToString$4;
	var isArrayIteratorMethod = isArrayIteratorMethod$2;
	var lengthOfArrayLike$1 = lengthOfArrayLike$4;
	var isPrototypeOf = objectIsPrototypeOf;
	var getIterator = getIterator$2;
	var getIteratorMethod = getIteratorMethod$3;
	var iteratorClose = iteratorClose$2;

	var $TypeError = TypeError;

	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var ResultPrototype = Result.prototype;

	var iterate$2 = function (iterable, unboundFunction, options) {
	  var that = options && options.that;
	  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
	  var IS_RECORD = !!(options && options.IS_RECORD);
	  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
	  var INTERRUPTED = !!(options && options.INTERRUPTED);
	  var fn = bind(unboundFunction, that);
	  var iterator, iterFn, index, length, result, next, step;

	  var stop = function (condition) {
	    if (iterator) iteratorClose(iterator, 'normal', condition);
	    return new Result(true, condition);
	  };

	  var callFn = function (value) {
	    if (AS_ENTRIES) {
	      anObject$3(value);
	      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
	    } return INTERRUPTED ? fn(value, stop) : fn(value);
	  };

	  if (IS_RECORD) {
	    iterator = iterable.iterator;
	  } else if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (!iterFn) throw new $TypeError(tryToString(iterable) + ' is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = lengthOfArrayLike$1(iterable); length > index; index++) {
	        result = callFn(iterable[index]);
	        if (result && isPrototypeOf(ResultPrototype, result)) return result;
	      } return new Result(false);
	    }
	    iterator = getIterator(iterable, iterFn);
	  }

	  next = IS_RECORD ? iterable.next : iterator.next;
	  while (!(step = call$2(next, iterator)).done) {
	    try {
	      result = callFn(step.value);
	    } catch (error) {
	      iteratorClose(iterator, 'throw', error);
	    }
	    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
	  } return new Result(false);
	};

	var NativePromiseConstructor$1 = promiseNativeConstructor;
	var checkCorrectnessOfIteration = checkCorrectnessOfIteration$2;
	var FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;

	var promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration(function (iterable) {
	  NativePromiseConstructor$1.all(iterable).then(undefined, function () { /* empty */ });
	});

	var $$6 = _export;
	var call$1 = functionCall;
	var aCallable$1 = aCallable$8;
	var newPromiseCapabilityModule$2 = newPromiseCapability$2;
	var perform$1 = perform$3;
	var iterate$1 = iterate$2;
	var PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;

	// `Promise.all` method
	// https://tc39.es/ecma262/#sec-promise.all
	$$6({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$1 }, {
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapabilityModule$2.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform$1(function () {
	      var $promiseResolve = aCallable$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate$1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        remaining++;
	        call$1($promiseResolve, C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$5 = _export;
	var FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;
	var NativePromiseConstructor = promiseNativeConstructor;
	var getBuiltIn$1 = getBuiltIn$7;
	var isCallable = isCallable$g;
	var defineBuiltIn = defineBuiltIn$3;

	var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

	// `Promise.prototype.catch` method
	// https://tc39.es/ecma262/#sec-promise.prototype.catch
	$$5({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$2, real: true }, {
	  'catch': function (onRejected) {
	    return this.then(undefined, onRejected);
	  }
	});

	// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
	if (isCallable(NativePromiseConstructor)) {
	  var method = getBuiltIn$1('Promise').prototype['catch'];
	  if (NativePromisePrototype['catch'] !== method) {
	    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });
	  }
	}

	var $$4 = _export;
	var call = functionCall;
	var aCallable = aCallable$8;
	var newPromiseCapabilityModule$1 = newPromiseCapability$2;
	var perform = perform$3;
	var iterate = iterate$2;
	var PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;

	// `Promise.race` method
	// https://tc39.es/ecma262/#sec-promise.race
	$$4({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapabilityModule$1.f(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aCallable(C.resolve);
	      iterate(iterable, function (promise) {
	        call($promiseResolve, C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var $$3 = _export;
	var newPromiseCapabilityModule = newPromiseCapability$2;
	var FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;

	// `Promise.reject` method
	// https://tc39.es/ecma262/#sec-promise.reject
	$$3({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {
	  reject: function reject(r) {
	    var capability = newPromiseCapabilityModule.f(this);
	    var capabilityReject = capability.reject;
	    capabilityReject(r);
	    return capability.promise;
	  }
	});

	var anObject$2 = anObject$a;
	var isObject = isObject$9;
	var newPromiseCapability = newPromiseCapability$2;

	var promiseResolve$1 = function (C, x) {
	  anObject$2(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var $$2 = _export;
	var getBuiltIn = getBuiltIn$7;
	var FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;
	var promiseResolve = promiseResolve$1;

	getBuiltIn('Promise');

	// `Promise.resolve` method
	// https://tc39.es/ecma262/#sec-promise.resolve
	$$2({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
	  resolve: function resolve(x) {
	    return promiseResolve(this, x);
	  }
	});

	var objectDefineProperties = {};

	var internalObjectKeys = objectKeysInternal;
	var enumBugKeys$1 = enumBugKeys$3;

	// `Object.keys` method
	// https://tc39.es/ecma262/#sec-object.keys
	// eslint-disable-next-line es/no-object-keys -- safe
	var objectKeys$1 = Object.keys || function keys(O) {
	  return internalObjectKeys(O, enumBugKeys$1);
	};

	var DESCRIPTORS = descriptors;
	var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
	var definePropertyModule = objectDefineProperty;
	var anObject$1 = anObject$a;
	var toIndexedObject = toIndexedObject$4;
	var objectKeys = objectKeys$1;

	// `Object.defineProperties` method
	// https://tc39.es/ecma262/#sec-object.defineproperties
	// eslint-disable-next-line es/no-object-defineproperties -- safe
	objectDefineProperties.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject$1(O);
	  var props = toIndexedObject(Properties);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
	  return O;
	};

	/* global ActiveXObject -- old IE, WSH */
	var anObject = anObject$a;
	var definePropertiesModule = objectDefineProperties;
	var enumBugKeys = enumBugKeys$3;
	var hiddenKeys = hiddenKeys$4;
	var html = html$2;
	var documentCreateElement = documentCreateElement$1;
	var sharedKey = sharedKey$2;

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  // eslint-disable-next-line no-useless-assignment -- avoid memory leak
	  activeXDocument = null;
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    activeXDocument = new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = typeof document != 'undefined'
	    ? document.domain && activeXDocument
	      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
	      : NullProtoObjectViaIFrame()
	    : NullProtoObjectViaActiveX(activeXDocument); // WSH
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO] = true;

	// `Object.create` method
	// https://tc39.es/ecma262/#sec-object.create
	// eslint-disable-next-line es/no-object-create -- safe
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
	};

	var wellKnownSymbol = wellKnownSymbol$b;
	var create = objectCreate;
	var defineProperty = objectDefineProperty.f;

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype[UNSCOPABLES] === undefined) {
	  defineProperty(ArrayPrototype, UNSCOPABLES, {
	    configurable: true,
	    value: create(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables$2 = function (key) {
	  ArrayPrototype[UNSCOPABLES][key] = true;
	};

	var $$1 = _export;
	var $includes = arrayIncludes.includes;
	var fails = fails$b;
	var addToUnscopables$1 = addToUnscopables$2;

	// FF99+ bug
	var BROKEN_ON_SPARSE = fails(function () {
	  // eslint-disable-next-line es/no-array-prototype-includes -- detection
	  return !Array(1).includes();
	});

	// `Array.prototype.includes` method
	// https://tc39.es/ecma262/#sec-array.prototype.includes
	$$1({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables$1('includes');

	var toObject = toObject$3;
	var toAbsoluteIndex = toAbsoluteIndex$2;
	var lengthOfArrayLike = lengthOfArrayLike$4;

	// `Array.prototype.fill` method implementation
	// https://tc39.es/ecma262/#sec-array.prototype.fill
	var arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = lengthOfArrayLike(O);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	var $ = _export;
	var fill = arrayFill;
	var addToUnscopables = addToUnscopables$2;

	// `Array.prototype.fill` method
	// https://tc39.es/ecma262/#sec-array.prototype.fill
	$({ target: 'Array', proto: true }, {
	  fill: fill
	});

	// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('fill');

	/* eslint-disable no-prototype-builtins */
	var g =
	  (typeof globalThis !== 'undefined' && globalThis) ||
	  (typeof self !== 'undefined' && self) ||
	  // eslint-disable-next-line no-undef
	  (typeof global !== 'undefined' && global) ||
	  {};

	var support = {
	  searchParams: 'URLSearchParams' in g,
	  iterable: 'Symbol' in g && 'iterator' in Symbol,
	  blob:
	    'FileReader' in g &&
	    'Blob' in g &&
	    (function() {
	      try {
	        new Blob();
	        return true
	      } catch (e) {
	        return false
	      }
	    })(),
	  formData: 'FormData' in g,
	  arrayBuffer: 'ArrayBuffer' in g
	};

	function isDataView(obj) {
	  return obj && DataView.prototype.isPrototypeOf(obj)
	}

	if (support.arrayBuffer) {
	  var viewClasses = [
	    '[object Int8Array]',
	    '[object Uint8Array]',
	    '[object Uint8ClampedArray]',
	    '[object Int16Array]',
	    '[object Uint16Array]',
	    '[object Int32Array]',
	    '[object Uint32Array]',
	    '[object Float32Array]',
	    '[object Float64Array]'
	  ];

	  var isArrayBufferView =
	    ArrayBuffer.isView ||
	    function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    };
	}

	function normalizeName(name) {
	  if (typeof name !== 'string') {
	    name = String(name);
	  }
	  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
	    throw new TypeError('Invalid character in header field name: "' + name + '"')
	  }
	  return name.toLowerCase()
	}

	function normalizeValue(value) {
	  if (typeof value !== 'string') {
	    value = String(value);
	  }
	  return value
	}

	// Build a destructive iterator for the value list
	function iteratorFor(items) {
	  var iterator = {
	    next: function() {
	      var value = items.shift();
	      return {done: value === undefined, value: value}
	    }
	  };

	  if (support.iterable) {
	    iterator[Symbol.iterator] = function() {
	      return iterator
	    };
	  }

	  return iterator
	}

	function Headers(headers) {
	  this.map = {};

	  if (headers instanceof Headers) {
	    headers.forEach(function(value, name) {
	      this.append(name, value);
	    }, this);
	  } else if (Array.isArray(headers)) {
	    headers.forEach(function(header) {
	      if (header.length != 2) {
	        throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)
	      }
	      this.append(header[0], header[1]);
	    }, this);
	  } else if (headers) {
	    Object.getOwnPropertyNames(headers).forEach(function(name) {
	      this.append(name, headers[name]);
	    }, this);
	  }
	}

	Headers.prototype.append = function(name, value) {
	  name = normalizeName(name);
	  value = normalizeValue(value);
	  var oldValue = this.map[name];
	  this.map[name] = oldValue ? oldValue + ', ' + value : value;
	};

	Headers.prototype['delete'] = function(name) {
	  delete this.map[normalizeName(name)];
	};

	Headers.prototype.get = function(name) {
	  name = normalizeName(name);
	  return this.has(name) ? this.map[name] : null
	};

	Headers.prototype.has = function(name) {
	  return this.map.hasOwnProperty(normalizeName(name))
	};

	Headers.prototype.set = function(name, value) {
	  this.map[normalizeName(name)] = normalizeValue(value);
	};

	Headers.prototype.forEach = function(callback, thisArg) {
	  for (var name in this.map) {
	    if (this.map.hasOwnProperty(name)) {
	      callback.call(thisArg, this.map[name], name, this);
	    }
	  }
	};

	Headers.prototype.keys = function() {
	  var items = [];
	  this.forEach(function(value, name) {
	    items.push(name);
	  });
	  return iteratorFor(items)
	};

	Headers.prototype.values = function() {
	  var items = [];
	  this.forEach(function(value) {
	    items.push(value);
	  });
	  return iteratorFor(items)
	};

	Headers.prototype.entries = function() {
	  var items = [];
	  this.forEach(function(value, name) {
	    items.push([name, value]);
	  });
	  return iteratorFor(items)
	};

	if (support.iterable) {
	  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	}

	function consumed(body) {
	  if (body._noBody) return
	  if (body.bodyUsed) {
	    return Promise.reject(new TypeError('Already read'))
	  }
	  body.bodyUsed = true;
	}

	function fileReaderReady(reader) {
	  return new Promise(function(resolve, reject) {
	    reader.onload = function() {
	      resolve(reader.result);
	    };
	    reader.onerror = function() {
	      reject(reader.error);
	    };
	  })
	}

	function readBlobAsArrayBuffer(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  reader.readAsArrayBuffer(blob);
	  return promise
	}

	function readBlobAsText(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
	  var encoding = match ? match[1] : 'utf-8';
	  reader.readAsText(blob, encoding);
	  return promise
	}

	function readArrayBufferAsText(buf) {
	  var view = new Uint8Array(buf);
	  var chars = new Array(view.length);

	  for (var i = 0; i < view.length; i++) {
	    chars[i] = String.fromCharCode(view[i]);
	  }
	  return chars.join('')
	}

	function bufferClone(buf) {
	  if (buf.slice) {
	    return buf.slice(0)
	  } else {
	    var view = new Uint8Array(buf.byteLength);
	    view.set(new Uint8Array(buf));
	    return view.buffer
	  }
	}

	function Body() {
	  this.bodyUsed = false;

	  this._initBody = function(body) {
	    /*
	      fetch-mock wraps the Response object in an ES6 Proxy to
	      provide useful test harness features such as flush. However, on
	      ES5 browsers without fetch or Proxy support pollyfills must be used;
	      the proxy-pollyfill is unable to proxy an attribute unless it exists
	      on the object before the Proxy is created. This change ensures
	      Response.bodyUsed exists on the instance, while maintaining the
	      semantic of setting Request.bodyUsed in the constructor before
	      _initBody is called.
	    */
	    // eslint-disable-next-line no-self-assign
	    this.bodyUsed = this.bodyUsed;
	    this._bodyInit = body;
	    if (!body) {
	      this._noBody = true;
	      this._bodyText = '';
	    } else if (typeof body === 'string') {
	      this._bodyText = body;
	    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	      this._bodyBlob = body;
	    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	      this._bodyFormData = body;
	    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	      this._bodyText = body.toString();
	    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	      this._bodyArrayBuffer = bufferClone(body.buffer);
	      // IE 10-11 can't handle a DataView body.
	      this._bodyInit = new Blob([this._bodyArrayBuffer]);
	    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	      this._bodyArrayBuffer = bufferClone(body);
	    } else {
	      this._bodyText = body = Object.prototype.toString.call(body);
	    }

	    if (!this.headers.get('content-type')) {
	      if (typeof body === 'string') {
	        this.headers.set('content-type', 'text/plain;charset=UTF-8');
	      } else if (this._bodyBlob && this._bodyBlob.type) {
	        this.headers.set('content-type', this._bodyBlob.type);
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	      }
	    }
	  };

	  if (support.blob) {
	    this.blob = function() {
	      var rejected = consumed(this);
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return Promise.resolve(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as blob')
	      } else {
	        return Promise.resolve(new Blob([this._bodyText]))
	      }
	    };
	  }

	  this.arrayBuffer = function() {
	    if (this._bodyArrayBuffer) {
	      var isConsumed = consumed(this);
	      if (isConsumed) {
	        return isConsumed
	      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
	        return Promise.resolve(
	          this._bodyArrayBuffer.buffer.slice(
	            this._bodyArrayBuffer.byteOffset,
	            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
	          )
	        )
	      } else {
	        return Promise.resolve(this._bodyArrayBuffer)
	      }
	    } else if (support.blob) {
	      return this.blob().then(readBlobAsArrayBuffer)
	    } else {
	      throw new Error('could not read as ArrayBuffer')
	    }
	  };

	  this.text = function() {
	    var rejected = consumed(this);
	    if (rejected) {
	      return rejected
	    }

	    if (this._bodyBlob) {
	      return readBlobAsText(this._bodyBlob)
	    } else if (this._bodyArrayBuffer) {
	      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	    } else if (this._bodyFormData) {
	      throw new Error('could not read FormData body as text')
	    } else {
	      return Promise.resolve(this._bodyText)
	    }
	  };

	  if (support.formData) {
	    this.formData = function() {
	      return this.text().then(decode)
	    };
	  }

	  this.json = function() {
	    return this.text().then(JSON.parse)
	  };

	  return this
	}

	// HTTP methods whose capitalization should be normalized
	var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

	function normalizeMethod(method) {
	  var upcased = method.toUpperCase();
	  return methods.indexOf(upcased) > -1 ? upcased : method
	}

	function Request(input, options) {
	  if (!(this instanceof Request)) {
	    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
	  }

	  options = options || {};
	  var body = options.body;

	  if (input instanceof Request) {
	    if (input.bodyUsed) {
	      throw new TypeError('Already read')
	    }
	    this.url = input.url;
	    this.credentials = input.credentials;
	    if (!options.headers) {
	      this.headers = new Headers(input.headers);
	    }
	    this.method = input.method;
	    this.mode = input.mode;
	    this.signal = input.signal;
	    if (!body && input._bodyInit != null) {
	      body = input._bodyInit;
	      input.bodyUsed = true;
	    }
	  } else {
	    this.url = String(input);
	  }

	  this.credentials = options.credentials || this.credentials || 'same-origin';
	  if (options.headers || !this.headers) {
	    this.headers = new Headers(options.headers);
	  }
	  this.method = normalizeMethod(options.method || this.method || 'GET');
	  this.mode = options.mode || this.mode || null;
	  this.signal = options.signal || this.signal || (function () {
	    if ('AbortController' in g) {
	      var ctrl = new AbortController();
	      return ctrl.signal;
	    }
	  }());
	  this.referrer = null;

	  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	    throw new TypeError('Body not allowed for GET or HEAD requests')
	  }
	  this._initBody(body);

	  if (this.method === 'GET' || this.method === 'HEAD') {
	    if (options.cache === 'no-store' || options.cache === 'no-cache') {
	      // Search for a '_' parameter in the query string
	      var reParamSearch = /([?&])_=[^&]*/;
	      if (reParamSearch.test(this.url)) {
	        // If it already exists then set the value with the current time
	        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
	      } else {
	        // Otherwise add a new '_' parameter to the end with the current time
	        var reQueryString = /\?/;
	        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
	      }
	    }
	  }
	}

	Request.prototype.clone = function() {
	  return new Request(this, {body: this._bodyInit})
	};

	function decode(body) {
	  var form = new FormData();
	  body
	    .trim()
	    .split('&')
	    .forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=');
	        var name = split.shift().replace(/\+/g, ' ');
	        var value = split.join('=').replace(/\+/g, ' ');
	        form.append(decodeURIComponent(name), decodeURIComponent(value));
	      }
	    });
	  return form
	}

	function parseHeaders(rawHeaders) {
	  var headers = new Headers();
	  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	  // https://tools.ietf.org/html/rfc7230#section-3.2
	  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
	  // https://github.com/github/fetch/issues/748
	  // https://github.com/zloirock/core-js/issues/751
	  preProcessedHeaders
	    .split('\r')
	    .map(function(header) {
	      return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
	    })
	    .forEach(function(line) {
	      var parts = line.split(':');
	      var key = parts.shift().trim();
	      if (key) {
	        var value = parts.join(':').trim();
	        try {
	          headers.append(key, value);
	        } catch (error) {
	        }
	      }
	    });
	  return headers
	}

	Body.call(Request.prototype);

	function Response(bodyInit, options) {
	  if (!(this instanceof Response)) {
	    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
	  }
	  if (!options) {
	    options = {};
	  }

	  this.type = 'default';
	  this.status = options.status === undefined ? 200 : options.status;
	  if (this.status < 200 || this.status > 599) {
	    throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].")
	  }
	  this.ok = this.status >= 200 && this.status < 300;
	  this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
	  this.headers = new Headers(options.headers);
	  this.url = options.url || '';
	  this._initBody(bodyInit);
	}

	Body.call(Response.prototype);

	Response.prototype.clone = function() {
	  return new Response(this._bodyInit, {
	    status: this.status,
	    statusText: this.statusText,
	    headers: new Headers(this.headers),
	    url: this.url
	  })
	};

	Response.error = function() {
	  var response = new Response(null, {status: 200, statusText: ''});
	  response.ok = false;
	  response.status = 0;
	  response.type = 'error';
	  return response
	};

	var redirectStatuses = [301, 302, 303, 307, 308];

	Response.redirect = function(url, status) {
	  if (redirectStatuses.indexOf(status) === -1) {
	    throw new RangeError('Invalid status code')
	  }

	  return new Response(null, {status: status, headers: {location: url}})
	};

	var DOMException = g.DOMException;
	try {
	  new DOMException();
	} catch (err) {
	  DOMException = function(message, name) {
	    this.message = message;
	    this.name = name;
	    var error = Error(message);
	    this.stack = error.stack;
	  };
	  DOMException.prototype = Object.create(Error.prototype);
	  DOMException.prototype.constructor = DOMException;
	}

	function fetch$1(input, init) {
	  return new Promise(function(resolve, reject) {
	    var request = new Request(input, init);

	    if (request.signal && request.signal.aborted) {
	      return reject(new DOMException('Aborted', 'AbortError'))
	    }

	    var xhr = new XMLHttpRequest();

	    function abortXhr() {
	      xhr.abort();
	    }

	    xhr.onload = function() {
	      var options = {
	        statusText: xhr.statusText,
	        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	      };
	      // This check if specifically for when a user fetches a file locally from the file system
	      // Only if the status is out of a normal range
	      if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
	        options.status = 200;
	      } else {
	        options.status = xhr.status;
	      }
	      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	      var body = 'response' in xhr ? xhr.response : xhr.responseText;
	      setTimeout(function() {
	        resolve(new Response(body, options));
	      }, 0);
	    };

	    xhr.onerror = function() {
	      setTimeout(function() {
	        reject(new TypeError('Network request failed'));
	      }, 0);
	    };

	    xhr.ontimeout = function() {
	      setTimeout(function() {
	        reject(new TypeError('Network request timed out'));
	      }, 0);
	    };

	    xhr.onabort = function() {
	      setTimeout(function() {
	        reject(new DOMException('Aborted', 'AbortError'));
	      }, 0);
	    };

	    function fixUrl(url) {
	      try {
	        return url === '' && g.location.href ? g.location.href : url
	      } catch (e) {
	        return url
	      }
	    }

	    xhr.open(request.method, fixUrl(request.url), true);

	    if (request.credentials === 'include') {
	      xhr.withCredentials = true;
	    } else if (request.credentials === 'omit') {
	      xhr.withCredentials = false;
	    }

	    if ('responseType' in xhr) {
	      if (support.blob) {
	        xhr.responseType = 'blob';
	      } else if (
	        support.arrayBuffer
	      ) {
	        xhr.responseType = 'arraybuffer';
	      }
	    }

	    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
	      var names = [];
	      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
	        names.push(normalizeName(name));
	        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
	      });
	      request.headers.forEach(function(value, name) {
	        if (names.indexOf(name) === -1) {
	          xhr.setRequestHeader(name, value);
	        }
	      });
	    } else {
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value);
	      });
	    }

	    if (request.signal) {
	      request.signal.addEventListener('abort', abortXhr);

	      xhr.onreadystatechange = function() {
	        // DONE (success or failure)
	        if (xhr.readyState === 4) {
	          request.signal.removeEventListener('abort', abortXhr);
	        }
	      };
	    }

	    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	  })
	}

	fetch$1.polyfill = true;

	if (!g.fetch) {
	  g.fetch = fetch$1;
	  g.Headers = Headers;
	  g.Request = Request;
	  g.Response = Response;
	}

	if (typeof CanvasRenderingContext2D !== 'undefined' && !CanvasRenderingContext2D.prototype.resetTransform) {
	    CanvasRenderingContext2D.prototype.resetTransform = function () {
	        this.setTransform(1, 0, 0, 1, 0, 0);
	    };
	}

	function styleInject(css, ref) {
	  if ( ref === void 0 ) ref = {};
	  var insertAt = ref.insertAt;

	  if (typeof document === 'undefined') { return; }

	  var head = document.head || document.getElementsByTagName('head')[0];
	  var style = document.createElement('style');
	  style.type = 'text/css';

	  if (insertAt === 'top') {
	    if (head.firstChild) {
	      head.insertBefore(style, head.firstChild);
	    } else {
	      head.appendChild(style);
	    }
	  } else {
	    head.appendChild(style);
	  }

	  if (style.styleSheet) {
	    style.styleSheet.cssText = css;
	  } else {
	    style.appendChild(document.createTextNode(css));
	  }
	}

	var css_248z = "@keyframes watermark{0%{background-position:0 0}25%{background-position:100% 100%}50%{background-position:0 0}75%{background-position:100% -100%}to{background-position:0 0}}";
	styleInject(css_248z);

	/******************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	var convertImage = function (canvas) {
	    return canvas.toDataURL('image/png', 1);
	};
	var isFunction = function (value) {
	    return typeof value === 'function';
	};
	var isUndefined = function (value) {
	    return value === undefined;
	};
	var isString = function (value) {
	    return typeof value === 'string';
	};
	var createSVGElement = function (tagName, attrs, namespaceURI) {
	    if (attrs === void 0) { attrs = {}; }
	    if (namespaceURI === void 0) { namespaceURI = 'http://www.w3.org/2000/svg'; }
	    var element = document.createElementNS(namespaceURI, tagName);
	    for (var attr in attrs) {
	        element.setAttribute(attr, attrs[attr]);
	    }
	    return element;
	};
	var getMultiLineData = function (ctx, text, maxWidth) {
	    var result = [];
	    var str = '';
	    var word = '';
	    for (var i = 0, len = text.length; i < len; i++) {
	        word = text.charAt(i);
	        if (word === '\n') {
	            result.push(str);
	            str = '';
	            continue;
	        }
	        str += word;
	        if (ctx.measureText(str).width > maxWidth) {
	            result.push(str.substring(0, str.length - 1));
	            str = '';
	            i--;
	        }
	    }
	    result.push(str);
	    return result;
	};
	var createCustomContentSVG = function (ctx, options) { return __awaiter(void 0, void 0, void 0, function () {
	    var svgElement, bodyElement, rect, rectWidth, rectHeight, width, height, foreignObjectElement;
	    var _a;
	    return __generator(this, function (_b) {
	        switch (_b.label) {
	            case 0:
	                svgElement = createSVGElement('svg', {
	                    xmlns: 'http://www.w3.org/2000/svg'
	                });
	                bodyElement = document.createElement('div');
	                bodyElement.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
	                bodyElement.style.cssText = "\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  font: ".concat(ctx.font, ";\n  color: ").concat(options.fontColor, ";\n");
	                bodyElement.innerHTML = "<div class='rich-text-content'>".concat(options.content, "</div>");
	                document.body.appendChild(bodyElement);
	                // convert all images to base64
	                return [4 /*yield*/, convertImgToBase64(bodyElement)];
	            case 1:
	                // convert all images to base64
	                _b.sent();
	                rect = (_a = bodyElement.querySelector('.rich-text-content')) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
	                rectWidth = rect === null || rect === void 0 ? void 0 : rect.width;
	                rectHeight = rect === null || rect === void 0 ? void 0 : rect.height;
	                document.body.removeChild(bodyElement);
	                width = options.richTextWidth || rectWidth || options.width;
	                height = options.richTextHeight || rectHeight || options.height;
	                svgElement.setAttribute('width', width.toString());
	                svgElement.setAttribute('height', height.toString());
	                foreignObjectElement = createSVGElement('foreignObject', {
	                    width: width.toString(),
	                    height: height.toString()
	                });
	                foreignObjectElement.appendChild(bodyElement);
	                svgElement.appendChild(foreignObjectElement);
	                return [2 /*return*/, {
	                        element: svgElement,
	                        width: width,
	                        height: height
	                    }];
	        }
	    });
	}); };
	function convertImgToBase64(bodyElement) {
	    return __awaiter(this, void 0, void 0, function () {
	        var imgElements, _loop_1, _i, _a, img;
	        return __generator(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    imgElements = bodyElement.querySelectorAll('img');
	                    _loop_1 = function (img) {
	                        var src, response, blob_1, imgData, error_1;
	                        return __generator(this, function (_c) {
	                            switch (_c.label) {
	                                case 0:
	                                    src = img.getAttribute('src');
	                                    if (!src) return [3 /*break*/, 6];
	                                    _c.label = 1;
	                                case 1:
	                                    _c.trys.push([1, 5, , 6]);
	                                    return [4 /*yield*/, fetch(src)];
	                                case 2:
	                                    response = _c.sent();
	                                    return [4 /*yield*/, response.blob()];
	                                case 3:
	                                    blob_1 = _c.sent();
	                                    return [4 /*yield*/, new Promise(function (resolve, reject) {
	                                            var reader = new FileReader();
	                                            reader.onloadend = function () { return resolve(reader.result); };
	                                            reader.onerror = reject;
	                                            reader.readAsDataURL(blob_1);
	                                        })];
	                                case 4:
	                                    imgData = _c.sent();
	                                    if (isString(imgData)) {
	                                        img.setAttribute('src', imgData);
	                                    }
	                                    return [3 /*break*/, 6];
	                                case 5:
	                                    error_1 = _c.sent();
	                                    console.error("Error converting ".concat(src, " to base64:"), error_1);
	                                    return [3 /*break*/, 6];
	                                case 6: return [2 /*return*/];
	                            }
	                        });
	                    };
	                    _i = 0, _a = Array.from(imgElements);
	                    _b.label = 1;
	                case 1:
	                    if (!(_i < _a.length)) return [3 /*break*/, 4];
	                    img = _a[_i];
	                    return [5 /*yield**/, _loop_1(img)];
	                case 2:
	                    _b.sent();
	                    _b.label = 3;
	                case 3:
	                    _i++;
	                    return [3 /*break*/, 1];
	                case 4: return [2 /*return*/];
	            }
	        });
	    });
	}
	var convertSVGToImage = function (svg) {
	    var richContent = svg.outerHTML
	        .replace(/<(img|br|input|hr|embed)(.*?)>/g, '<$1$2/>')
	        .replace(/\n/g, '').replace(/\t/g, '')
	        .replace(/#/g, '%23');
	    return "data:image/svg+xml;charset=utf-8,".concat(richContent);
	};
	var getValue = function (v1, v2) {
	    if (isUndefined(v1)) {
	        return v2;
	    }
	    else {
	        return v1;
	    }
	};
	var loadImage = function (url, width, height) {
	    if (width === void 0) { width = undefined; }
	    if (height === void 0) { height = undefined; }
	    var image = new Image();
	    image.setAttribute('crossOrigin', 'Anonymous');
	    !isUndefined(width) && (image.width = width);
	    !isUndefined(height) && (image.height = height);
	    image.src = url;
	    return new Promise(function (resolve) {
	        image.onload = function () {
	            resolve(image);
	        };
	    });
	};
	var generateMatrix = function (rows, columns, value) {
	    return Array.from({ length: rows }, function () { return new Array(columns).fill(value); });
	};

	var initialOptions = {
	    width: 300,
	    height: 300,
	    rotate: 45,
	    layout: 'default',
	    auxiliaryLine: false,
	    translatePlacement: 'middle',
	    contentType: 'text',
	    content: 'hello watermark-js-plus',
	    textType: 'fill',
	    imageWidth: 0,
	    imageHeight: 0,
	    lineHeight: 30,
	    zIndex: 2147483647,
	    backgroundPosition: '0 0',
	    backgroundRepeat: 'repeat',
	    fontSize: '20px',
	    fontFamily: 'sans-serif',
	    fontStyle: '',
	    fontVariant: '',
	    fontColor: '#000',
	    fontWeight: 'normal',
	    filter: 'none',
	    letterSpacing: '0px',
	    wordSpacing: '0px',
	    globalAlpha: 0.5,
	    mode: 'default',
	    mutationObserve: true,
	    monitorProtection: false,
	    movable: false,
	    parent: 'body',
	    onSuccess: function () { },
	    onBeforeDestroy: function () { },
	    onDestroyed: function () { },
	    onObserveError: function () { }
	};
	var generateRecommendOptions = function (canvas, options, args) {
	    var ctx = canvas.getContext('2d');
	    if (ctx === null) {
	        throw new Error('get context error');
	    }
	    ctx.font = "".concat(options.fontStyle, " ").concat(options.fontVariant, " ").concat(options.fontWeight, " ").concat(options.fontSize, " ").concat(options.fontFamily);
	    ctx.filter = options.filter;
	    // @ts-ignore
	    ctx.letterSpacing = options.letterSpacing;
	    ctx.wordSpacing = options.wordSpacing;
	    if (options === null || options === void 0 ? void 0 : options.rotate) {
	        options.rotate = (360 - options.rotate % 360) * (Math.PI / 180);
	    }
	    if (isUndefined(args.textRowMaxWidth)) {
	        options.textRowMaxWidth = options.width;
	    }
	    var result = {
	        image: {
	            rect: {
	                width: options.imageWidth,
	                height: options.imageHeight
	            },
	            position: {
	                x: 0,
	                y: 0
	            }
	        },
	        textLine: {
	            data: [],
	            yOffsetValue: 0
	        },
	        advancedStyleParams: {
	            linear: {
	                x0: 0,
	                x1: 0
	            },
	            radial: {
	                x0: 0,
	                y0: 0,
	                r0: 0,
	                x1: 0,
	                y1: 0,
	                r1: 0
	            },
	            conic: {
	                x: 0,
	                y: 0,
	                startAngle: 0
	            },
	            pattern: {}
	        }
	    };
	    switch (options.contentType) {
	        case 'text':
	            result.textLine.data = [options.content];
	            break;
	        case 'multi-line-text':
	            result.textLine.data = getMultiLineData(ctx, options.content, options.textRowMaxWidth);
	            break;
	        // case 'image':
	        //   break
	        // case 'rich-text':
	        //   break
	    }
	    var translateX = options.width / 2;
	    var translateY = options.height / 2;
	    var textBaseline = 'middle';
	    var textAlign = 'center';
	    if (!isUndefined(args === null || args === void 0 ? void 0 : args.translateX) && !isUndefined(args === null || args === void 0 ? void 0 : args.translateY)) {
	        translateX = args === null || args === void 0 ? void 0 : args.translateX;
	        translateY = args === null || args === void 0 ? void 0 : args.translateY;
	        textBaseline = 'top';
	        textAlign = 'left';
	    }
	    else {
	        // default middle
	        // translateX = options.width / 2
	        // translateY = options.height / 2
	        // TextBaselineType = 'middle'
	        // textAlign = 'center'
	        result.advancedStyleParams.linear.x0 = -options.width / 2;
	        result.advancedStyleParams.linear.x1 = options.width / 2;
	        // result.advancedStyleParams.radial.x0 = 0
	        // result.advancedStyleParams.radial.y0 = 0
	        result.advancedStyleParams.radial.r0 = 0;
	        // result.advancedStyleParams.radial.x1 = 0
	        // result.advancedStyleParams.radial.y1 = 0
	        result.advancedStyleParams.radial.r1 = options.width / 2;
	        // result.advancedStyleParams.conic.x = 0
	        // result.advancedStyleParams.conic.y = 0
	    }
	    switch (args.translatePlacement) {
	        case 'top':
	            translateX = options.width / 2;
	            translateY = 0;
	            textBaseline = 'top';
	            // textAlign = 'center'
	            result.advancedStyleParams.linear.x0 = -options.width / 2;
	            result.advancedStyleParams.linear.x1 = options.width / 2;
	            // result.advancedStyleParams.radial.x0 = 0
	            result.advancedStyleParams.radial.y0 = result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r0 = 0
	            // result.advancedStyleParams.radial.x1 = 0
	            // result.advancedStyleParams.radial.y1 = 0
	            result.advancedStyleParams.radial.y1 = result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            // result.advancedStyleParams.conic.x = 0
	            result.advancedStyleParams.conic.y = result.textLine.data.length * options.lineHeight / 2;
	            break;
	        case 'top-start':
	            translateX = 0;
	            translateY = 0;
	            textBaseline = 'top';
	            textAlign = 'start';
	            result.advancedStyleParams.linear.x0 = 0;
	            result.advancedStyleParams.linear.x1 = options.width;
	            result.advancedStyleParams.radial.x0 = options.width / 2;
	            result.advancedStyleParams.radial.y0 = result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r0 = 0
	            result.advancedStyleParams.radial.x1 = options.width / 2;
	            result.advancedStyleParams.radial.y1 = result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            result.advancedStyleParams.conic.x = options.width / 2;
	            result.advancedStyleParams.conic.y = result.textLine.data.length * options.lineHeight / 2;
	            break;
	        case 'top-end':
	            translateX = options.width;
	            translateY = 0;
	            textBaseline = 'top';
	            textAlign = 'end';
	            result.advancedStyleParams.linear.x0 = 0;
	            result.advancedStyleParams.linear.x1 = -options.width;
	            result.advancedStyleParams.radial.x0 = -options.width / 2;
	            result.advancedStyleParams.radial.y0 = result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r0 = 0
	            result.advancedStyleParams.radial.x1 = -options.width / 2;
	            result.advancedStyleParams.radial.y1 = result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            result.advancedStyleParams.conic.x = -options.width / 2;
	            result.advancedStyleParams.conic.y = result.textLine.data.length * options.lineHeight / 2;
	            break;
	        case 'bottom':
	            translateX = options.width / 2;
	            translateY = options.height;
	            textBaseline = 'bottom';
	            // textAlign = 'center'
	            result.advancedStyleParams.linear.x0 = -options.width / 2;
	            result.advancedStyleParams.linear.x1 = options.width / 2;
	            // result.advancedStyleParams.radial.x0 = 0
	            result.advancedStyleParams.radial.y0 = -result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r0 = 0
	            // result.advancedStyleParams.radial.x1 = 0
	            result.advancedStyleParams.radial.y1 = -result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            result.advancedStyleParams.conic.x = 0;
	            result.advancedStyleParams.conic.y = -result.textLine.data.length * options.lineHeight / 2;
	            break;
	        case 'bottom-start':
	            translateX = 0;
	            translateY = options.height;
	            textBaseline = 'bottom';
	            textAlign = 'start';
	            result.advancedStyleParams.linear.x0 = 0;
	            result.advancedStyleParams.linear.x1 = options.width;
	            result.advancedStyleParams.radial.x0 = options.width / 2;
	            result.advancedStyleParams.radial.y0 = -result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r0 = 0
	            result.advancedStyleParams.radial.x1 = options.width / 2;
	            result.advancedStyleParams.radial.y1 = -result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            result.advancedStyleParams.conic.x = options.width / 2;
	            result.advancedStyleParams.conic.y = -result.textLine.data.length * options.lineHeight / 2;
	            break;
	        case 'bottom-end':
	            translateX = options.width;
	            translateY = options.height;
	            textBaseline = 'bottom';
	            textAlign = 'end';
	            result.advancedStyleParams.linear.x0 = 0;
	            result.advancedStyleParams.linear.x1 = -options.width;
	            result.advancedStyleParams.radial.x0 = -options.width / 2;
	            result.advancedStyleParams.radial.y0 = -result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r0 = 0
	            result.advancedStyleParams.radial.x1 = -options.width / 2;
	            result.advancedStyleParams.radial.y1 = -result.textLine.data.length * options.lineHeight / 2;
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            result.advancedStyleParams.conic.x = -options.width / 2;
	            result.advancedStyleParams.conic.y = -result.textLine.data.length * options.lineHeight / 2;
	            break;
	        case 'left':
	            translateX = 0;
	            translateY = options.height / 2;
	            // TextBaselineType = 'middle'
	            textAlign = 'start';
	            result.advancedStyleParams.linear.x0 = 0;
	            result.advancedStyleParams.linear.x1 = options.width;
	            result.advancedStyleParams.radial.x0 = options.width / 2;
	            // result.advancedStyleParams.radial.y0 = 0
	            // result.advancedStyleParams.radial.r0 = 0
	            result.advancedStyleParams.radial.x1 = options.width / 2;
	            // result.advancedStyleParams.radial.y1 = 0
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            result.advancedStyleParams.conic.x = options.width / 2;
	            result.advancedStyleParams.conic.y = 0;
	            break;
	        case 'right':
	            translateX = options.width;
	            translateY = options.height / 2;
	            // TextBaselineType = 'middle'
	            textAlign = 'end';
	            result.advancedStyleParams.linear.x0 = 0;
	            result.advancedStyleParams.linear.x1 = -options.width;
	            result.advancedStyleParams.radial.x0 = -options.width / 2;
	            // result.advancedStyleParams.radial.y0 = 0
	            // result.advancedStyleParams.radial.r0 = 0
	            result.advancedStyleParams.radial.x1 = -options.width / 2;
	            // result.advancedStyleParams.radial.y1 = 0
	            // result.advancedStyleParams.radial.r1 = options.width / 2
	            result.advancedStyleParams.conic.x = -options.width / 2;
	            result.advancedStyleParams.conic.y = 0;
	            break;
	    }
	    options.translateX = translateX;
	    options.translateY = translateY;
	    isUndefined(args === null || args === void 0 ? void 0 : args.textBaseline) && (options.textBaseline = textBaseline);
	    isUndefined(args === null || args === void 0 ? void 0 : args.textAlign) && (options.textAlign = textAlign);
	    if (['text', 'multi-line-text'].includes(options.contentType)) {
	        switch (options.textBaseline) {
	            case 'middle':
	                result.textLine.yOffsetValue = (result.textLine.data.length - 1) * options.lineHeight / 2;
	                break;
	            case 'bottom':
	            case 'alphabetic':
	            case 'ideographic':
	                result.textLine.yOffsetValue = (result.textLine.data.length - 1) * options.lineHeight + (options.lineHeight - parseInt(options.fontSize)) / 2;
	                break;
	            case 'top':
	            case 'hanging':
	                result.textLine.yOffsetValue = -options.lineHeight / 2 + parseInt(options.fontSize) / 2;
	                break;
	        }
	    }
	    return result;
	};

	var protection = (function (need) {
	    if (typeof window === 'undefined') {
	        return;
	    }
	    if (need) {
	        Object.defineProperty(window, 'MutationObserver', {
	            writable: false,
	            configurable: false
	        });
	        Object.defineProperty(window, 'requestAnimationFrame', {
	            writable: false,
	            configurable: false
	        });
	    }
	});

	var WatermarkCanvas = /** @class */ (function () {
	    function WatermarkCanvas(args, options) {
	        this.props = args;
	        this.options = options;
	        this.canvas = WatermarkCanvas.createCanvas(this.options.width, this.options.height);
	        this.recommendOptions = generateRecommendOptions(this.canvas, this.options, this.props);
	    }
	    /**
	     * Create an HD canvas.
	     * @param width - width of canvas
	     * @param height - height of canvas
	     */
	    WatermarkCanvas.createCanvas = function (width, height) {
	        var _a;
	        var ratio = window.devicePixelRatio || 1;
	        var canvas = document.createElement('canvas');
	        canvas.width = width * ratio; // actual rendered pixel
	        canvas.height = height * ratio; // actual rendered pixel
	        canvas.style.width = "".concat(width, "px"); // control display size
	        canvas.style.height = "".concat(height, "px"); // control display size
	        (_a = canvas.getContext('2d')) === null || _a === void 0 ? void 0 : _a.setTransform(ratio, 0, 0, ratio, 0, 0);
	        return canvas;
	    };
	    /**
	     * Clean the canvas
	     * @param canvas
	     */
	    WatermarkCanvas.clearCanvas = function (canvas) {
	        var ctx = canvas.getContext('2d');
	        if (ctx === null) {
	            throw new Error('get context error');
	        }
	        ctx.restore();
	        ctx.resetTransform();
	        ctx.clearRect(0, 0, canvas.width, canvas.height);
	        var ratio = window.devicePixelRatio || 1;
	        ctx.setTransform(ratio, 0, 0, ratio, 0, 0);
	    };
	    WatermarkCanvas.prototype.getCanvas = function () {
	        return this.canvas;
	    };
	    WatermarkCanvas.prototype.clear = function () {
	        WatermarkCanvas.clearCanvas(this.canvas);
	    };
	    WatermarkCanvas.prototype.draw = function () {
	        var _this = this;
	        var ctx = this.canvas.getContext('2d');
	        if (ctx === null) {
	            throw new Error('get context error');
	        }
	        if (this.options.auxiliaryLine) {
	            ctx.beginPath();
	            ctx.rect(0, 0, this.options.width, this.options.height);
	            ctx.lineWidth = 1;
	            ctx.strokeStyle = '#000';
	            ctx.stroke();
	            ctx.closePath();
	            ctx.beginPath();
	            ctx.rect(this.options.translateX, this.options.translateY, 1, 1);
	            ctx.lineWidth = 1;
	            ctx.strokeStyle = '#f00';
	            ctx.stroke();
	            ctx.closePath();
	        }
	        this.setStyle(ctx);
	        ctx.save();
	        ctx.translate(this.options.translateX, this.options.translateY);
	        ctx.rotate(this.options.rotate);
	        return new Promise(function (resolve) {
	            switch (_this.options.contentType) {
	                case 'text':
	                    _this.drawText(ctx, resolve);
	                    break;
	                case 'image':
	                    _this.drawImage(ctx, resolve);
	                    break;
	                case 'multi-line-text':
	                    _this.drawMultiLineText(ctx, resolve);
	                    break;
	                case 'rich-text':
	                    _this.drawRichText(ctx, resolve);
	                    break;
	            }
	        });
	    };
	    WatermarkCanvas.prototype.setStyle = function (ctx) {
	        var _a;
	        var propName = 'fillStyle';
	        if (this.options.textType === 'stroke') {
	            propName = 'strokeStyle';
	        }
	        var style = this.options.fontColor;
	        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.advancedStyle) {
	            switch (this.options.advancedStyle.type) {
	                case 'linear':
	                    style = this.createLinearGradient(ctx);
	                    break;
	                case 'radial':
	                    style = this.createRadialGradient(ctx);
	                    break;
	                case 'conic':
	                    style = this.createConicGradient(ctx);
	                    break;
	                case 'pattern':
	                    style = this.createPattern(ctx);
	                    break;
	            }
	        }
	        ctx[propName] && style && (ctx[propName] = style);
	        this.options.textAlign && (ctx.textAlign = this.options.textAlign);
	        this.options.textBaseline && (ctx.textBaseline = this.options.textBaseline);
	        ctx.globalAlpha = this.options.globalAlpha;
	        if (this.options.shadowStyle) {
	            ctx.shadowBlur = getValue(this.options.shadowStyle.shadowBlur, 0);
	            ctx.shadowColor = getValue(this.options.shadowStyle.shadowColor, '#00000000');
	            ctx.shadowOffsetX = getValue(this.options.shadowStyle.shadowOffsetX, 0);
	            ctx.shadowOffsetY = getValue(this.options.shadowStyle.shadowOffsetY, 0);
	        }
	        if (isFunction(this.options.extraDrawFunc)) {
	            this.options.extraDrawFunc(ctx);
	        }
	    };
	    WatermarkCanvas.prototype.createLinearGradient = function (ctx) {
	        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
	        var gradient = ctx.createLinearGradient(getValue((_c = (_b = (_a = this.options.advancedStyle) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.linear) === null || _c === void 0 ? void 0 : _c.x0, this.recommendOptions.advancedStyleParams.linear.x0), getValue((_f = (_e = (_d = this.options.advancedStyle) === null || _d === void 0 ? void 0 : _d.params) === null || _e === void 0 ? void 0 : _e.linear) === null || _f === void 0 ? void 0 : _f.y0, 0), getValue((_j = (_h = (_g = this.options.advancedStyle) === null || _g === void 0 ? void 0 : _g.params) === null || _h === void 0 ? void 0 : _h.linear) === null || _j === void 0 ? void 0 : _j.x1, this.recommendOptions.advancedStyleParams.linear.x1), getValue((_m = (_l = (_k = this.options.advancedStyle) === null || _k === void 0 ? void 0 : _k.params) === null || _l === void 0 ? void 0 : _l.linear) === null || _m === void 0 ? void 0 : _m.y1, 0));
	        (_q = (_p = (_o = this.options) === null || _o === void 0 ? void 0 : _o.advancedStyle) === null || _p === void 0 ? void 0 : _p.colorStops) === null || _q === void 0 ? void 0 : _q.forEach(function (item) {
	            gradient.addColorStop(item.offset, item.color);
	        });
	        return gradient;
	    };
	    WatermarkCanvas.prototype.createConicGradient = function (ctx) {
	        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
	        var gradient = ctx.createConicGradient(getValue((_d = (_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.advancedStyle) === null || _b === void 0 ? void 0 : _b.params) === null || _c === void 0 ? void 0 : _c.conic) === null || _d === void 0 ? void 0 : _d.startAngle, 0), getValue((_h = (_g = (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.advancedStyle) === null || _f === void 0 ? void 0 : _f.params) === null || _g === void 0 ? void 0 : _g.conic) === null || _h === void 0 ? void 0 : _h.x, this.recommendOptions.advancedStyleParams.conic.x), getValue((_m = (_l = (_k = (_j = this.options) === null || _j === void 0 ? void 0 : _j.advancedStyle) === null || _k === void 0 ? void 0 : _k.params) === null || _l === void 0 ? void 0 : _l.conic) === null || _m === void 0 ? void 0 : _m.y, this.recommendOptions.advancedStyleParams.conic.y));
	        (_q = (_p = (_o = this.options) === null || _o === void 0 ? void 0 : _o.advancedStyle) === null || _p === void 0 ? void 0 : _p.colorStops) === null || _q === void 0 ? void 0 : _q.forEach(function (item) {
	            gradient.addColorStop(item.offset, item.color);
	        });
	        return gradient;
	    };
	    WatermarkCanvas.prototype.createRadialGradient = function (ctx) {
	        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
	        var gradient = ctx.createRadialGradient(getValue((_d = (_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.advancedStyle) === null || _b === void 0 ? void 0 : _b.params) === null || _c === void 0 ? void 0 : _c.radial) === null || _d === void 0 ? void 0 : _d.x0, this.recommendOptions.advancedStyleParams.radial.x0), getValue((_h = (_g = (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.advancedStyle) === null || _f === void 0 ? void 0 : _f.params) === null || _g === void 0 ? void 0 : _g.radial) === null || _h === void 0 ? void 0 : _h.y0, this.recommendOptions.advancedStyleParams.radial.y0), getValue((_m = (_l = (_k = (_j = this.options) === null || _j === void 0 ? void 0 : _j.advancedStyle) === null || _k === void 0 ? void 0 : _k.params) === null || _l === void 0 ? void 0 : _l.radial) === null || _m === void 0 ? void 0 : _m.r0, this.recommendOptions.advancedStyleParams.radial.r0), getValue((_r = (_q = (_p = (_o = this.options) === null || _o === void 0 ? void 0 : _o.advancedStyle) === null || _p === void 0 ? void 0 : _p.params) === null || _q === void 0 ? void 0 : _q.radial) === null || _r === void 0 ? void 0 : _r.x1, this.recommendOptions.advancedStyleParams.radial.x1), getValue((_v = (_u = (_t = (_s = this.options) === null || _s === void 0 ? void 0 : _s.advancedStyle) === null || _t === void 0 ? void 0 : _t.params) === null || _u === void 0 ? void 0 : _u.radial) === null || _v === void 0 ? void 0 : _v.y1, this.recommendOptions.advancedStyleParams.radial.y1), getValue((_z = (_y = (_x = (_w = this.options) === null || _w === void 0 ? void 0 : _w.advancedStyle) === null || _x === void 0 ? void 0 : _x.params) === null || _y === void 0 ? void 0 : _y.radial) === null || _z === void 0 ? void 0 : _z.r1, this.recommendOptions.advancedStyleParams.radial.r1));
	        (_2 = (_1 = (_0 = this.options) === null || _0 === void 0 ? void 0 : _0.advancedStyle) === null || _1 === void 0 ? void 0 : _1.colorStops) === null || _2 === void 0 ? void 0 : _2.forEach(function (item) {
	            gradient.addColorStop(item.offset, item.color);
	        });
	        return gradient;
	    };
	    WatermarkCanvas.prototype.createPattern = function (ctx) {
	        var _a, _b, _c, _d, _e, _f, _g, _h;
	        return ctx.createPattern((_d = (_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.advancedStyle) === null || _b === void 0 ? void 0 : _b.params) === null || _c === void 0 ? void 0 : _c.pattern) === null || _d === void 0 ? void 0 : _d.image, ((_h = (_g = (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.advancedStyle) === null || _f === void 0 ? void 0 : _f.params) === null || _g === void 0 ? void 0 : _g.pattern) === null || _h === void 0 ? void 0 : _h.repetition) || '');
	    };
	    WatermarkCanvas.prototype.setText = function (ctx, params) {
	        var methodName = 'fillText';
	        if (this.options.textType === 'stroke') {
	            methodName = 'strokeText';
	        }
	        ctx[methodName] && ctx[methodName](params.text, params.x, params.y, params.maxWidth);
	    };
	    WatermarkCanvas.prototype.drawText = function (ctx, resolve) {
	        this.setText(ctx, {
	            text: this.options.content,
	            x: 0,
	            y: 0 - this.recommendOptions.textLine.yOffsetValue,
	            maxWidth: this.options.textRowMaxWidth || this.options.width
	        });
	        resolve(ctx.canvas);
	    };
	    WatermarkCanvas.prototype.drawImage = function (ctx, resolve) {
	        var _this = this;
	        loadImage(this.options.image).then(function (image) {
	            var _a = _this.getImageRect(image), imageWidth = _a.width, imageHeight = _a.height;
	            var imagePosition = _this.getDrawImagePosition(imageWidth, imageHeight);
	            ctx.drawImage(image, imagePosition.x, imagePosition.y, imageWidth, imageHeight);
	            resolve(ctx.canvas);
	        });
	    };
	    WatermarkCanvas.prototype.drawMultiLineText = function (ctx, resolve) {
	        var _this = this;
	        // image.width = this.options.width
	        // image.height = this.options.height
	        // const element = createCustomContentSvg(context, this.options)
	        // image.src = convertSVGToImage(element)
	        // image.onload = () => {
	        //   context.translate(this.options.width / 2, this.options.height / 2)
	        //   context.rotate(this.options.rotate)
	        //   context.drawImage(
	        //     image,
	        //     -this.options.width / 2,
	        //     -this.options.height / 2,
	        //     context.canvas.width,
	        //     context.canvas.height
	        //   )
	        //   resolve(canvas)
	        // }
	        var lines = this.recommendOptions.textLine.data;
	        var yOffsetValue = this.recommendOptions.textLine.yOffsetValue;
	        lines.forEach(function (text, index) {
	            _this.setText(ctx, { text: text, x: 0, y: _this.options.lineHeight * index - yOffsetValue, maxWidth: _this.options.textRowMaxWidth || _this.options.width });
	        });
	        resolve(ctx.canvas);
	    };
	    WatermarkCanvas.prototype.drawRichText = function (ctx, resolve) {
	        return __awaiter(this, void 0, void 0, function () {
	            var obj;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, createCustomContentSVG(ctx, this.options)];
	                    case 1:
	                        obj = _a.sent();
	                        loadImage(convertSVGToImage(obj.element), obj.width, obj.height).then(function (image) {
	                            var imagePosition = _this.getDrawImagePosition(image.width, image.height);
	                            ctx.drawImage(image, imagePosition.x, imagePosition.y, image.width, image.height);
	                            resolve(ctx.canvas);
	                        });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    WatermarkCanvas.prototype.getImageRect = function (image) {
	        var rect = { width: this.options.imageWidth || 0, height: this.options.imageHeight || 0 };
	        switch (true) {
	            case rect.width !== 0 && rect.height === 0:
	                rect.height = rect.width * image.height / image.width;
	                break;
	            case rect.width === 0 && rect.height !== 0:
	                rect.width = rect.height * image.width / image.height;
	                break;
	            case rect.width === 0 && rect.height === 0:
	                rect.width = image.width;
	                rect.height = image.height;
	                break;
	        }
	        return rect;
	    };
	    WatermarkCanvas.prototype.getDrawImagePosition = function (imageWidth, imageHeight) {
	        var _a, _b;
	        var result = {
	            x: -imageWidth / 2,
	            y: -imageHeight / 2
	        };
	        switch (this.options.translatePlacement) {
	            case 'top':
	                result.x = -imageWidth / 2;
	                result.y = 0;
	                break;
	            case 'top-start':
	                result.x = 0;
	                result.y = 0;
	                break;
	            case 'top-end':
	                result.x = -imageWidth;
	                result.y = 0;
	                break;
	            case 'bottom':
	                result.x = -imageWidth / 2;
	                result.y = -imageHeight;
	                break;
	            case 'bottom-start':
	                result.x = 0;
	                result.y = -imageHeight;
	                break;
	            case 'bottom-end':
	                result.x = -imageWidth;
	                result.y = -imageHeight;
	                break;
	            case 'left':
	                result.x = 0;
	                result.y = -imageHeight / 2;
	                break;
	            case 'right':
	                result.x = -imageWidth;
	                result.y = -imageHeight / 2;
	                break;
	        }
	        !isUndefined((_a = this.props) === null || _a === void 0 ? void 0 : _a.translateX) && (result.x = 0);
	        !isUndefined((_b = this.props) === null || _b === void 0 ? void 0 : _b.translateY) && (result.y = 0);
	        return result;
	    };
	    return WatermarkCanvas;
	}());

	var GridLayout = /** @class */ (function () {
	    function GridLayout(args, partialCanvas) {
	        var _a, _b, _c, _d;
	        this.options = args;
	        this.partialWidth = this.options.width;
	        this.partialHeight = this.options.height;
	        this.rows = ((_a = this.options.gridLayoutOptions) === null || _a === void 0 ? void 0 : _a.rows) || 1;
	        this.cols = ((_b = this.options.gridLayoutOptions) === null || _b === void 0 ? void 0 : _b.cols) || 1;
	        this.matrix = ((_c = this.options.gridLayoutOptions) === null || _c === void 0 ? void 0 : _c.matrix) || generateMatrix(this.rows, this.cols, 1);
	        this.gap = ((_d = this.options.gridLayoutOptions) === null || _d === void 0 ? void 0 : _d.gap) || [0, 0];
	        this.partialCanvas = partialCanvas;
	    }
	    GridLayout.prototype.draw = function () {
	        var _a, _b, _c, _d, _e, _f, _g, _h;
	        var layoutCanvas = WatermarkCanvas.createCanvas(((_a = this.options.gridLayoutOptions) === null || _a === void 0 ? void 0 : _a.width) || (this.partialWidth * this.cols + this.gap[0] * this.cols), ((_b = this.options.gridLayoutOptions) === null || _b === void 0 ? void 0 : _b.height) || (this.partialHeight * this.rows + this.gap[1] * this.rows));
	        var layoutContext = layoutCanvas.getContext('2d');
	        if ((_c = this.options.gridLayoutOptions) === null || _c === void 0 ? void 0 : _c.backgroundImage) {
	            layoutContext === null || layoutContext === void 0 ? void 0 : layoutContext.drawImage((_d = this.options.gridLayoutOptions) === null || _d === void 0 ? void 0 : _d.backgroundImage, 0, 0, (_e = this.options.gridLayoutOptions) === null || _e === void 0 ? void 0 : _e.width, (_f = this.options.gridLayoutOptions) === null || _f === void 0 ? void 0 : _f.height);
	        }
	        for (var rowIndex = 0; rowIndex < this.rows; rowIndex++) {
	            for (var colIndex = 0; colIndex < this.cols; colIndex++) {
	                if (!((_h = (_g = this.matrix) === null || _g === void 0 ? void 0 : _g[rowIndex]) === null || _h === void 0 ? void 0 : _h[colIndex])) {
	                    continue;
	                }
	                layoutContext === null || layoutContext === void 0 ? void 0 : layoutContext.drawImage(this.partialCanvas, this.partialWidth * colIndex + this.gap[0] * colIndex, this.partialHeight * rowIndex + this.gap[1] * rowIndex, this.partialWidth, this.partialHeight);
	            }
	        }
	        return layoutCanvas;
	    };
	    return GridLayout;
	}());

	var renderLayout = function (options, partialCanvas) {
	    switch (options.layout) {
	        case 'grid':
	            return new GridLayout(options, partialCanvas).draw();
	        default:
	            return partialCanvas;
	    }
	};
	var generateBackgroundSize = function (options) {
	    var _a, _b, _c;
	    switch (options.layout) {
	        case 'grid':
	            {
	                var cols = ((_a = options.gridLayoutOptions) === null || _a === void 0 ? void 0 : _a.cols) || 1;
	                var rows = ((_b = options.gridLayoutOptions) === null || _b === void 0 ? void 0 : _b.rows) || 1;
	                var gap = ((_c = options.gridLayoutOptions) === null || _c === void 0 ? void 0 : _c.gap) || [0, 0];
	                return [
	                    options.width * cols + gap[0] * cols,
	                    options.height * rows + gap[1] * rows
	                ];
	            }
	        default:
	            return [
	                options.width,
	                options.height
	            ];
	    }
	};

	/**
	 * Watermark class
	 */
	var Watermark = /** @class */ (function () {
	    /**
	     * Watermark constructor
	     * @param args - watermark args
	     */
	    function Watermark(args) {
	        if (args === void 0) { args = {}; }
	        this.parentElement = document.body;
	        this.isCreating = false;
	        this.props = args;
	        this.options = __assign(__assign({}, initialOptions), args);
	        this.changeParentElement(this.options.parent);
	        this.watermarkCanvas = new WatermarkCanvas(this.props, this.options);
	        protection(this.options.monitorProtection);
	    }
	    /**
	     * Change watermark options
	     * @param args
	     * @param mode
	     * @param redraw
	     */
	    Watermark.prototype.changeOptions = function () {
	        return __awaiter(this, arguments, void 0, function (args, mode, redraw) {
	            if (args === void 0) { args = {}; }
	            if (mode === void 0) { mode = 'overwrite'; }
	            if (redraw === void 0) { redraw = true; }
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this.initConfigData(args, mode);
	                        protection(this.options.monitorProtection);
	                        if (!redraw) return [3 /*break*/, 2];
	                        this.remove();
	                        return [4 /*yield*/, this.create()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Creating a watermark.
	     */
	    Watermark.prototype.create = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var firstDraw, image, watermarkInnerDom, parentElementType, backgroundSize;
	            var _a, _b, _c, _d, _e, _f, _g;
	            return __generator(this, function (_h) {
	                switch (_h.label) {
	                    case 0:
	                        if (this.isCreating) {
	                            return [2 /*return*/];
	                        }
	                        this.isCreating = true;
	                        if (!this.validateUnique()) {
	                            this.isCreating = false;
	                            return [2 /*return*/];
	                        }
	                        if (!this.validateContent()) {
	                            this.isCreating = false;
	                            return [2 /*return*/];
	                        }
	                        firstDraw = isUndefined(this.watermarkDom);
	                        return [4 /*yield*/, ((_a = this.watermarkCanvas) === null || _a === void 0 ? void 0 : _a.draw())];
	                    case 1:
	                        _h.sent();
	                        this.layoutCanvas = renderLayout(this.options, (_b = this.watermarkCanvas) === null || _b === void 0 ? void 0 : _b.getCanvas());
	                        image = convertImage(this.layoutCanvas);
	                        (_c = this.watermarkCanvas) === null || _c === void 0 ? void 0 : _c.clear();
	                        this.watermarkDom = document.createElement('div');
	                        watermarkInnerDom = document.createElement('div');
	                        this.watermarkDom.__WATERMARK__ = 'watermark';
	                        this.watermarkDom.__WATERMARK__INSTANCE__ = this;
	                        parentElementType = this.checkParentElementType();
	                        this.watermarkDom.style.cssText = "\n      z-index:".concat(this.options.zIndex, "!important;display:block!important;visibility:visible!important;transform:none!important;scale:none!important;\n      ").concat(parentElementType === 'custom' ? 'top:0!important;bottom:0!important;left:0!important;right:0!important;height:100%!important;pointer-events:none!important;position:absolute!important;' : 'position:relative!important;', "\n    ");
	                        backgroundSize = generateBackgroundSize(this.options);
	                        watermarkInnerDom.style.cssText = "\n      display:block!important;visibility:visible!important;pointer-events:none;top:0;bottom:0;left:0;right:0;transform:none!important;scale:none!important;\n      position:".concat(parentElementType === 'root' ? 'fixed' : 'absolute', "!important;-webkit-print-color-adjust:exact!important;width:100%!important;height:100%!important;\n      z-index:").concat(this.options.zIndex, "!important;background-image:url(").concat(image, ")!important;background-repeat:").concat(this.options.backgroundRepeat, "!important;\n      background-size:").concat(backgroundSize[0], "px ").concat(backgroundSize[1], "px!important;background-position:").concat(this.options.backgroundPosition, ";\n      ").concat(this.options.movable ? 'animation: 200s ease 0s infinite normal none running watermark !important;' : '', "\n    ");
	                        this.watermarkDom.appendChild(watermarkInnerDom);
	                        this.parentElement.appendChild(this.watermarkDom);
	                        if (this.options.mutationObserve) {
	                            try {
	                                this.bindMutationObserve();
	                            }
	                            catch (e) {
	                                (_e = (_d = this.options).onObserveError) === null || _e === void 0 ? void 0 : _e.call(_d);
	                            }
	                        }
	                        firstDraw && ((_g = (_f = this.options).onSuccess) === null || _g === void 0 ? void 0 : _g.call(_f));
	                        this.isCreating = false;
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * Delete this watermark.
	     */
	    Watermark.prototype.destroy = function () {
	        this.remove();
	        this.watermarkDom = undefined;
	    };
	    Watermark.prototype.check = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                return [2 /*return*/, this.parentElement.contains(this.watermarkDom)];
	            });
	        });
	    };
	    Watermark.prototype.remove = function () {
	        var _a, _b, _c, _d, _e, _f, _g, _h;
	        (_b = (_a = this.options).onBeforeDestroy) === null || _b === void 0 ? void 0 : _b.call(_a);
	        (_c = this.observer) === null || _c === void 0 ? void 0 : _c.disconnect();
	        (_d = this.parentObserve) === null || _d === void 0 ? void 0 : _d.disconnect();
	        this.unbindCheckWatermarkElementEvent();
	        (_f = (_e = this.watermarkDom) === null || _e === void 0 ? void 0 : _e.parentNode) === null || _f === void 0 ? void 0 : _f.removeChild(this.watermarkDom);
	        (_h = (_g = this.options).onDestroyed) === null || _h === void 0 ? void 0 : _h.call(_g);
	    };
	    Watermark.prototype.initConfigData = function (args, mode) {
	        var _this = this;
	        if (mode === void 0) { mode = 'overwrite'; }
	        if (mode === 'append') {
	            Object.keys(args).forEach(function (key) {
	                _this.props && (_this.props[key] = args[key]);
	            });
	        }
	        else {
	            this.props = args;
	        }
	        this.options = __assign(__assign({}, initialOptions), this.props);
	        this.changeParentElement(this.options.parent);
	        this.watermarkCanvas = new WatermarkCanvas(this.props, this.options);
	    };
	    Watermark.prototype.changeParentElement = function (parent) {
	        if (typeof parent === 'string') {
	            var parentElement = document.querySelector(parent);
	            parentElement && (this.parentElement = parentElement);
	        }
	        else {
	            this.parentElement = parent;
	        }
	        if (!this.parentElement) {
	            console.error('[WatermarkJsPlus]: please pass a valid parent element.');
	        }
	    };
	    Watermark.prototype.validateUnique = function () {
	        var result = true;
	        Array.from(this.parentElement.childNodes).forEach(function (node) {
	            if (!result) {
	                return;
	            }
	            if (Object.hasOwnProperty.call(node, '__WATERMARK__')) {
	                result = false;
	                // throw new Error('duplicate watermark error')
	            }
	        });
	        return result;
	    };
	    Watermark.prototype.validateContent = function () {
	        switch (this.options.contentType) {
	            case 'image':
	                return Object.hasOwnProperty.call(this.options, 'image');
	            case 'multi-line-text':
	            case 'rich-text':
	            case 'text':
	                return this.options.content.length > 0;
	        }
	    };
	    Watermark.prototype.checkParentElementType = function () {
	        if (['html', 'body'].includes(this.parentElement.tagName.toLocaleLowerCase())) {
	            return 'root';
	        }
	        return 'custom';
	    };
	    Watermark.prototype.checkWatermarkElement = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!!this.parentElement.contains(this.watermarkDom)) return [3 /*break*/, 2];
	                        this.remove();
	                        return [4 /*yield*/, this.create()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2:
	                        this.bindCheckWatermarkElementEvent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Watermark.prototype.bindMutationObserve = function () {
	        var _this = this;
	        if (!this.watermarkDom) {
	            return;
	        }
	        this.bindCheckWatermarkElementEvent();
	        this.observer = new MutationObserver(function (mutationsList) { return __awaiter(_this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(mutationsList.length > 0)) return [3 /*break*/, 2];
	                        this.remove();
	                        return [4 /*yield*/, this.create()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        }); });
	        this.observer.observe(this.watermarkDom, {
	            attributes: true, // 属性的变动
	            childList: true, // 子节点的变动（指新增，删除或者更改）
	            subtree: true, // 布尔值，表示是否将该观察器应用于该节点的所有后代节点。
	            characterData: true // 节点内容或节点文本的变动。
	        });
	        this.parentObserve = new MutationObserver(function (mutationsList) { return __awaiter(_this, void 0, void 0, function () {
	            var _i, mutationsList_1, item;
	            var _a;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        _i = 0, mutationsList_1 = mutationsList;
	                        _b.label = 1;
	                    case 1:
	                        if (!(_i < mutationsList_1.length)) return [3 /*break*/, 4];
	                        item = mutationsList_1[_i];
	                        if (!((item === null || item === void 0 ? void 0 : item.target) === this.watermarkDom ||
	                            ((_a = item === null || item === void 0 ? void 0 : item.removedNodes) === null || _a === void 0 ? void 0 : _a[0]) === this.watermarkDom ||
	                            (item.type === 'childList' && item.target === this.parentElement && item.target.lastChild !== this.watermarkDom))) return [3 /*break*/, 3];
	                        this.remove();
	                        return [4 /*yield*/, this.create()];
	                    case 2:
	                        _b.sent();
	                        _b.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4: return [2 /*return*/];
	                }
	            });
	        }); });
	        this.parentObserve.observe(this.parentElement, {
	            attributes: true, // 属性的变动
	            childList: true, // 子节点的变动（指新增，删除或者更改）
	            subtree: true, // 布尔值，表示是否将该观察器应用于该节点的所有后代节点。
	            characterData: true // 节点内容或节点文本的变动。
	        });
	    };
	    Watermark.prototype.bindCheckWatermarkElementEvent = function () {
	        this.unbindCheckWatermarkElementEvent();
	        this.checkWatermarkElementRequestID = requestAnimationFrame(this.checkWatermarkElement.bind(this));
	    };
	    Watermark.prototype.unbindCheckWatermarkElementEvent = function () {
	        if (!isUndefined(this.checkWatermarkElementRequestID)) {
	            cancelAnimationFrame(this.checkWatermarkElementRequestID);
	        }
	    };
	    return Watermark;
	}());

	/**
	 * BlindWatermark class
	 */
	var BlindWatermark = /** @class */ (function (_super) {
	    __extends(BlindWatermark, _super);
	    /**
	     * BlindWatermark constructor
	     * @param props - blind watermark options
	     */
	    function BlindWatermark(props) {
	        if (props === void 0) { props = {}; }
	        var defaultProps = {
	            globalAlpha: 0.005,
	            mode: 'blind'
	        };
	        return _super.call(this, __assign(__assign({}, props), defaultProps)) || this;
	    }
	    /**
	     * Decode blind watermark.
	     * @param props - decode options
	     */
	    BlindWatermark.decode = function (props) {
	        var _a = props.url, url = _a === void 0 ? '' : _a, _b = props.fillColor, fillColor = _b === void 0 ? '#000' : _b, _c = props.compositeOperation, compositeOperation = _c === void 0 ? 'color-burn' : _c, _d = props.mode, mode = _d === void 0 ? 'canvas' : _d, _e = props.compositeTimes, compositeTimes = _e === void 0 ? 3 : _e, onSuccess = props.onSuccess;
	        if (!url) {
	            return;
	        }
	        if (mode === 'canvas') {
	            var img_1 = new Image();
	            img_1.src = url;
	            img_1.addEventListener('load', function () {
	                var width = img_1.width, height = img_1.height;
	                var canvas = WatermarkCanvas.createCanvas(width, height);
	                var ctx = canvas.getContext('2d');
	                if (!ctx) {
	                    throw new Error('get context error');
	                }
	                ctx.drawImage(img_1, 0, 0, width, height);
	                ctx.globalCompositeOperation = compositeOperation;
	                ctx.fillStyle = fillColor;
	                for (var i = 0; i < compositeTimes; i++) {
	                    ctx.fillRect(0, 0, width, height);
	                }
	                var resultImage = convertImage(canvas);
	                if (isFunction(onSuccess)) {
	                    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(resultImage);
	                }
	            });
	        }
	    };
	    return BlindWatermark;
	}(Watermark));

	/**
	 * ImageWatermark class
	 */
	var ImageWatermark = /** @class */ (function () {
	    /**
	     * ImageWatermark constructor
	     * @param args - image watermark args
	     */
	    function ImageWatermark(args) {
	        if (args === void 0) { args = {}; }
	        var _a;
	        this.drew = false;
	        this.props = args;
	        this.options = __assign(__assign({}, initialOptions), args);
	        this.watermarkCanvas = new WatermarkCanvas(this.props, this.options);
	        this.originalSrc = (_a = this.props.dom) === null || _a === void 0 ? void 0 : _a.src;
	        this.backgroundImage = this.getBackgroundImage();
	    }
	    ImageWatermark.prototype.create = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a, _b, _c, _d, _e;
	            return __generator(this, function (_f) {
	                switch (_f.label) {
	                    case 0:
	                        if (this.drew) {
	                            return [2 /*return*/];
	                        }
	                        return [4 /*yield*/, ((_a = this.watermarkCanvas) === null || _a === void 0 ? void 0 : _a.draw())];
	                    case 1:
	                        _f.sent();
	                        this.options.layout = 'grid';
	                        this.options.gridLayoutOptions = __assign(__assign({}, this.options.gridLayoutOptions), { width: (_b = this.backgroundImage) === null || _b === void 0 ? void 0 : _b.width, height: (_c = this.backgroundImage) === null || _c === void 0 ? void 0 : _c.height, backgroundImage: this.backgroundImage });
	                        this.layoutCanvas = renderLayout(this.options, (_d = this.watermarkCanvas) === null || _d === void 0 ? void 0 : _d.getCanvas());
	                        this.options.dom.src = convertImage(this.layoutCanvas);
	                        (_e = this.watermarkCanvas) === null || _e === void 0 ? void 0 : _e.clear();
	                        this.drew = true;
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ImageWatermark.prototype.destroy = function () {
	        this.options.dom.src = this.originalSrc;
	        this.drew = false;
	    };
	    ImageWatermark.prototype.getBackgroundImage = function () {
	        if (this.options.dom) {
	            return this.options.dom;
	        }
	    };
	    return ImageWatermark;
	}());

	exports.BlindWatermark = BlindWatermark;
	exports.ImageWatermark = ImageWatermark;
	exports.Watermark = Watermark;

}));
//# sourceMappingURL=index.umd.js.map
