import k from"ci-info";import{LRUCache as x}from"lru-cache";import{hash as y,fs as l,path as F}from"vuepress/utils";const j=new x({max:64}),P=(e,n)=>{if(!n.env.isDev)return;const{highlight:t}=e.options;e.options.highlight=(...r)=>{const i=y(r.join("")),s=j.get(i);if(s)return s;const a=t?.(...r)??"";return j.set(i,a),a}},S=async e=>{try{return await l.readJSON(e,"utf-8")}catch{return null}},C=e=>{try{return l.readJSONSync(e,"utf-8")}catch{return null}},v=(e,n)=>l.writeJSON(e,n,"utf-8"),R=.15,T=(e=process.cwd())=>{try{const n=F.join(e,"tmp");l.writeFileSync(n,"{}","utf-8");const t=performance.now();C(n);const r=performance.now();return l.unlinkSync(n),r-t}catch{return R}},g="markdown/rendered",O="_metadata.json",b="_cache.json",D=async(e,n)=>{if(n.env.isBuild&&!l.existsSync(n.dir.cache(g)))return;const t=n.dir.cache(g),r=`${t}/${O}`,i=`${t}/${b}`;await l.ensureDir(t);const[s,a]=await Promise.all([S(r),S(i)]).then(([c,o])=>[c??{},o??{}]);let d=null;const p=()=>{d&&clearTimeout(d),d=setTimeout(()=>{Promise.all([v(r,s),v(i,a)])},200)},h=e.render;e.render=(c,o)=>{const u=o.filePathRelative;if(!u)return h(c,o);const f=y(c);if(s[u]===f&&u in a){const m=a[u];return Object.assign(o,m.env),m.content}const w=h(c,o);return s[u]=f,a[u]={content:w,env:o},p(),w}},I=async(e,n)=>{if(n.env.isBuild&&!l.existsSync(n.dir.cache(g)))return;const t=n.dir.cache(g);await l.ensureDir(t);const r=T(t),i=`${t}/${O}`,s=await S(i)??{};let a=null;const d=(h,c)=>{v(`${t}/${h}`,c),a&&clearTimeout(a),a=setTimeout(()=>{v(i,s)},200)},p=e.render;e.render=(h,c)=>{const o=c.filePathRelative;if(!o)return p(h,c);const u=y(h),f=y(o);if(s[o]===u){const $=C(`${t}/${f}`);if($)return Object.assign(c,$.env),$.content;s[o]=""}const w=performance.now(),m=p(h,c);return performance.now()-w>r&&(s[o]=u,d(f,{content:m,env:c})),m}},J=({type:e,enableInCi:n=!1}={})=>{const t={name:"@vuepress/plugin-cache"};return k.isCI&&!n?t:{...t,async extendsMarkdown(r,i){P(r,i),e==="filesystem"?await I(r,i):await D(r,i)}}};export{J as cachePlugin};
//# sourceMappingURL=index.js.map
