import * as vue from 'vue';
import { PropType, MaybeRefOrGetter, ComputedRef, App } from 'vue';
import { DocSearchProps } from '@docsearch/react';
import { LocaleConfig } from 'vuepress/shared';

type DocSearchLocaleOptions = Partial<Pick<DocSearchProps, 'apiKey' | 'appId' | 'disableUserPersonalization' | 'indexName' | 'initialQuery' | 'maxResultsPerGroup' | 'placeholder' | 'searchParameters' | 'translations'>>;
interface DocSearchOptions extends DocSearchLocaleOptions {
    locales?: LocaleConfig<DocSearchLocaleOptions>;
}

declare const DocSearch: vue.DefineComponent<vue.ExtractPropTypes<{
    containerId: {
        type: StringConstructor;
        default: string;
    };
    options: {
        type: PropType<DocSearchOptions>;
        default: () => {};
    };
}>, () => (vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}> | null)[], {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.PublicProps, Readonly<vue.ExtractPropTypes<{
    containerId: {
        type: StringConstructor;
        default: string;
    };
    options: {
        type: PropType<DocSearchOptions>;
        default: () => {};
    };
}>> & Readonly<{}>, {
    containerId: string;
    options: DocSearchOptions;
}, {}, {}, {}, string, vue.ComponentProvideOptions, true, {}, any>;

type DocSearchClientLocaleOptions = Partial<DocSearchProps>;
interface DocSearchClientOptions extends DocSearchClientLocaleOptions {
    locales?: Record<string, DocSearchClientLocaleOptions>;
}
declare const defineDocSearchConfig: (options: MaybeRefOrGetter<DocSearchClientOptions>) => void;
declare const useDocSearchOptions: () => ComputedRef<DocSearchProps>;
declare const injectDocSearchConfig: (app: App) => void;

export { DocSearch, type DocSearchClientLocaleOptions, type DocSearchClientOptions, type DocSearchLocaleOptions, type DocSearchOptions, defineDocSearchConfig, injectDocSearchConfig, useDocSearchOptions };
