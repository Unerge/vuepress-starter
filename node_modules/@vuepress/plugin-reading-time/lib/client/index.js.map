{"version":3,"file":"index.js","sources":["../../src/client/composables/useReadingTimeData.ts","../../src/client/utils/locales.ts","../../src/client/composables/useReadingTimeLocale.ts"],"sourcesContent":["import type { ComputedRef } from 'vue'\nimport { computed } from 'vue'\nimport { usePageData } from 'vuepress/client'\nimport type {\n  ReadingTime,\n  ReadingTimePluginPageData,\n} from '../../shared/index.js'\n\nexport const useReadingTimeData = (): ComputedRef<ReadingTime | null> => {\n  const page = usePageData<Partial<ReadingTimePluginPageData>>()\n\n  return computed(() => page.value.readingTime ?? null)\n}\n","import type {\n  ReadingTime,\n  ReadingTimePluginLocaleData,\n} from '../../shared/index.js'\n\nexport const getReadingTimeLocale = (\n  readingTime: ReadingTime,\n  locale: ReadingTimePluginLocaleData,\n): { time: string; words: string } => {\n  const { minutes, words } = readingTime\n  const { less1Minute, word, time } = locale\n\n  return {\n    time:\n      minutes < 1\n        ? less1Minute\n        : time.replace('$time', Math.round(minutes).toString()),\n    words: word.replace('$word', words.toString()),\n  }\n}\n","import { useLocaleConfig } from '@vuepress/helper/client'\nimport type { ComputedRef } from 'vue'\nimport { computed } from 'vue'\nimport type {\n  ReadingTimePluginLocaleConfig,\n  ReadingTimePluginLocaleData,\n} from '../../shared/index.js'\nimport { getReadingTimeLocale } from '../utils/index.js'\nimport { useReadingTimeData } from './useReadingTimeData.js'\n\ndeclare const __READING_TIME_LOCALES__:\n  | ReadingTimePluginLocaleConfig\n  | undefined\n\nconst DEFAULT_LOCALE = { words: '', time: '' }\n\nconst readingTimeLocales =\n  typeof __READING_TIME_LOCALES__ === 'undefined'\n    ? null\n    : __READING_TIME_LOCALES__\n\nexport const useReadingTimeLocaleConfig =\n  (): ComputedRef<ReadingTimePluginLocaleData | null> =>\n    readingTimeLocales\n      ? useLocaleConfig(readingTimeLocales)\n      : computed(() => null)\n\nexport interface ReadingTimeLocale {\n  /**\n   * Reading time text\n   *\n   * 阅读时间文字\n   */\n  time: string\n\n  /**\n   * Words count text\n   *\n   * 字数统计文字\n   */\n  words: string\n}\n\nexport const useReadingTimeLocale = (): ComputedRef<ReadingTimeLocale> => {\n  if (typeof readingTimeLocales === 'undefined')\n    return computed(() => DEFAULT_LOCALE)\n\n  const readingTime = useReadingTimeData()\n  const readingTimeLocale = useReadingTimeLocaleConfig()\n\n  return computed(() =>\n    readingTime.value && readingTimeLocale.value\n      ? getReadingTimeLocale(readingTime.value, readingTimeLocale.value)\n      : DEFAULT_LOCALE,\n  )\n}\n"],"names":["useReadingTimeData","page","usePageData","computed","getReadingTimeLocale","readingTime","locale","minutes","words","less1Minute","word","time","DEFAULT_LOCALE","readingTimeLocales","useReadingTimeLocaleConfig","useLocaleConfig","useReadingTimeLocale","readingTimeLocale"],"mappings":"uIAQa,MAAAA,EAAqB,IAAuC,CACvE,MAAMC,EAAOC,IAEb,OAAOC,EAAS,IAAMF,EAAK,MAAM,aAAe,IAAI,CACtD,ECPaG,EAAuB,CAClCC,EACAC,IACoC,CACpC,KAAM,CAAE,QAAAC,EAAS,MAAAC,CAAM,EAAIH,EACrB,CAAE,YAAAI,EAAa,KAAAC,EAAM,KAAAC,CAAK,EAAIL,EAEpC,MAAO,CACL,KACEC,EAAU,EACNE,EACAE,EAAK,QAAQ,QAAS,KAAK,MAAMJ,CAAO,EAAE,SAAU,CAAA,EAC1D,MAAOG,EAAK,QAAQ,QAASF,EAAM,SAAA,CAAU,CAC/C,CACF,ECLMI,EAAiB,CAAE,MAAO,GAAI,KAAM,EAAG,EAEvCC,EACJ,OAAO,yBAA6B,IAChC,KACA,yBAEOC,EACX,IACED,EACIE,EAAgBF,CAAkB,EAClCV,EAAS,IAAM,IAAI,EAkBda,EAAuB,IAAsC,CACxE,GAAI,OAAOH,EAAuB,IAChC,OAAOV,EAAS,IAAMS,CAAc,EAEtC,MAAMP,EAAcL,IACdiB,EAAoBH,IAE1B,OAAOX,EAAS,IACdE,EAAY,OAASY,EAAkB,MACnCb,EAAqBC,EAAY,MAAOY,EAAkB,KAAK,EAC/DL,CACN,CACF"}