{"version":3,"file":"index.js","sources":["../../src/node/utils/checkGitRepo.ts","../../src/node/utils/getContributors.ts","../../src/node/utils/getCreatedTime.ts","../../src/node/utils/getUpdatedTime.ts","../../src/node/gitPlugin.ts"],"sourcesContent":["import { execaCommandSync } from 'execa'\n\n/**\n * Check if the git repo is valid\n */\nexport const checkGitRepo = (cwd: string): boolean => {\n  try {\n    execaCommandSync('git log', { cwd })\n    return true\n  } catch {\n    return false\n  }\n}\n","import { execa } from 'execa'\nimport type { GitContributor } from '../types.js'\n\nexport const getContributors = async (\n  filePaths: string[],\n  cwd: string,\n): Promise<GitContributor[]> => {\n  const { stdout } = await execa(\n    'git',\n    ['--no-pager', 'shortlog', '-nes', 'HEAD', '--', ...filePaths],\n    {\n      cwd,\n      stdin: 'inherit',\n    },\n  )\n\n  return stdout\n    .split('\\n')\n    .map((item) => item.trim().match(/^(\\d+)\\t(.*) <(.*)>$/))\n    .filter((item): item is RegExpMatchArray => item !== null)\n    .map(([, commits, name, email]) => ({\n      name,\n      email,\n      commits: Number.parseInt(commits, 10),\n    }))\n    .filter((item, index, self) => {\n      // If one of the contributors is a \"noreply\" email address, and there's\n      // already a contributor with the same name, it is very likely a duplicate,\n      // so it can be removed.\n      if (item.email.split('@')[1]?.match(/no-?reply/)) {\n        const realIndex = self.findIndex((t) => t.name === item.name)\n        if (realIndex !== index) {\n          // Update the \"real\" contributor to also include the noreply's commits\n          self[realIndex].commits += item.commits\n          return false\n        }\n        return true\n      }\n      return true\n    })\n}\n","import { execa } from 'execa'\n\n/**\n * Get unix timestamp in milliseconds of the first commit\n */\nexport const getCreatedTime = async (\n  filePaths: string[],\n  cwd: string,\n): Promise<number> => {\n  const { stdout } = await execa(\n    'git',\n    [\n      '--no-pager',\n      'log',\n      '--follow',\n      '--diff-filter=A',\n      '--format=%at',\n      ...filePaths,\n    ],\n    {\n      cwd,\n    },\n  )\n\n  return (\n    Math.min(...stdout.split('\\n').map((item) => Number.parseInt(item, 10))) *\n    1000\n  )\n}\n","import { execa } from 'execa'\n\n/**\n * Get unix timestamp in milliseconds of the last commit\n */\nexport const getUpdatedTime = async (\n  filePaths: string[],\n  cwd: string,\n): Promise<number> => {\n  const { stdout } = await execa(\n    'git',\n    [\n      '--no-pager',\n      'log',\n      '--format=%at',\n      // if there is only one file to be included, add `-1` option\n      ...(filePaths.length > 1 ? [] : ['-1']),\n      ...filePaths,\n    ],\n    {\n      cwd,\n    },\n  )\n\n  return (\n    Math.max(...stdout.split('\\n').map((item) => Number.parseInt(item, 10))) *\n    1000\n  )\n}\n","import type { Page, Plugin } from 'vuepress/core'\nimport { path } from 'vuepress/utils'\nimport type {\n  GitContributor,\n  GitPluginFrontmatter,\n  GitPluginPageData,\n} from './types.js'\nimport {\n  checkGitRepo,\n  getContributors,\n  getCreatedTime,\n  getUpdatedTime,\n} from './utils/index.js'\n\n/**\n * Options of @vuepress/plugin-git\n */\nexport interface GitPluginOptions {\n  /**\n   * Whether to get the created time of a page\n   */\n  createdTime?: boolean\n\n  /**\n   * Whether to get the updated time of a page\n   */\n  updatedTime?: boolean\n\n  /**\n   * Whether to get the contributors of a page\n   */\n  contributors?: boolean\n\n  /**\n   * Functions to transform contributors, e.g. remove duplicates ones and sort them\n   */\n  transformContributors?: (contributors: GitContributor[]) => GitContributor[]\n}\n\nexport const gitPlugin =\n  ({\n    createdTime,\n    updatedTime,\n    contributors,\n    transformContributors,\n  }: GitPluginOptions = {}): Plugin =>\n  (app) => {\n    const cwd = app.dir.source()\n    const isGitRepoValid = checkGitRepo(cwd)\n\n    return {\n      name: '@vuepress/plugin-git',\n\n      extendsPage: async (\n        page: Page<GitPluginPageData, GitPluginFrontmatter>,\n      ) => {\n        page.data.git = {}\n\n        if (!isGitRepoValid || page.filePathRelative === null) {\n          return\n        }\n\n        const filePaths = [\n          page.filePathRelative,\n          ...(page.frontmatter.gitInclude ?? []).map((item) =>\n            path.join(page.filePathRelative, '..', item),\n          ),\n        ]\n\n        if (createdTime !== false) {\n          page.data.git.createdTime = await getCreatedTime(filePaths, cwd)\n        }\n\n        if (updatedTime !== false) {\n          page.data.git.updatedTime = await getUpdatedTime(filePaths, cwd)\n        }\n\n        if (contributors !== false) {\n          const result = await getContributors(filePaths, cwd)\n\n          page.data.git.contributors = transformContributors?.(result) ?? result\n        }\n      },\n\n      // remove `gitInclude` from frontmatter\n      onInitialized: () => {\n        app.pages.forEach((page) => {\n          delete page.frontmatter.gitInclude\n        })\n      },\n    }\n  }\n"],"names":["checkGitRepo","cwd","execaCommandSync","getContributors","filePaths","stdout","execa","item","commits","name","email","index","self","realIndex","t","getCreatedTime","getUpdatedTime","gitPlugin","createdTime","updatedTime","contributors","transformContributors","app","isGitRepoValid","page","path","result"],"mappings":"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"}