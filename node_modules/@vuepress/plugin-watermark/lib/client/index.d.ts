import { MaybeRefOrGetter, MaybeRef, ComputedRef, App, Ref } from 'vue';
import { WatermarkOptions as WatermarkOptions$1 } from 'watermark-js-plus';
import { PageFrontmatter } from 'vuepress/shared';

type WatermarkOptions = Partial<WatermarkOptions$1>;
/**
 * Define additional watermark configurations in the client-side.
 *
 * In most cases, the majority of options should be defined in Node,
 * but there are some special situations. For example,
 * it may be necessary to control different watermark opacities, font colors,
 * etc., in dark/light mode, or to pass in callbacks such as `onSuccess`, `extraDrawFunc`, and so on.
 *
 * 在客户端中定义额外的水印配置。
 *
 * 通常来说，大部分选项应该在 Node 中定义，但存在一些特殊情况。
 * 比如需要在 深色/浅色 模式下控制不同的 水印 透明度、字体颜色等，
 * 或者需要传入如 `onSuccess`、`extraDrawFunc` 等回调函数。
 *
 * @example
 * ```ts
 * import { computed } from 'vue'
 *
 * const isDark = useDarkMode()
 *
 * const watermarkConfig = computed(() => ({
 *   fontColor: isDark.value ? '#fff' : '#000',
 *   onSuccess: () => {
 *     console.log('success')
 *   },
 * }))
 *
 * defineWatermarkConfig(watermarkConfig)
 * ```
 *
 * @param userConfig Watermark options
 *
 */
declare const defineWatermarkConfig: (userConfig: MaybeRefOrGetter<WatermarkOptions>) => void;
declare const useWatermarkOptions: (options: MaybeRef<WatermarkOptions>) => ComputedRef<WatermarkOptions>;
declare const injectWatermarkConfig: (app: App) => void;

declare const setupWatermark: (options: MaybeRef<WatermarkOptions>, enabled: Ref<boolean>, delay?: number) => void;

type WatermarkPureOptions = Omit<Partial<WatermarkOptions$1>, 'extraDrawFunc' | 'onBeforeDestroy' | 'onDestroyed' | 'onObserveError' | 'onSuccess' | 'parent'> & {
    /**
     * Watermark parent selector
     *
     * 水印父元素选择器
     *
     * @default 'body'
     */
    parent?: 'body' | (string & {
        __z_ignore?: never;
    });
};
interface WatermarkPluginFrontmatter extends PageFrontmatter {
    watermark?: WatermarkPureOptions | boolean;
}

export { type WatermarkOptions, type WatermarkPluginFrontmatter, type WatermarkPureOptions, defineWatermarkConfig, injectWatermarkConfig, setupWatermark, useWatermarkOptions };
