import { MaybeRefOrGetter, Ref } from 'vue';
import { ArtalkConfig } from 'artalk';
import { B as BaseCommentPluginOptions, d as GiscusOptions } from './giscus-DDdv3zO-.js';
export { c as GiscusInputPosition, a as GiscusMapping, G as GiscusRepo, b as GiscusTheme } from './giscus-DDdv3zO-.js';
import { ExactLocaleConfig } from '@vuepress/helper';
import { WalineLocale, WalineInitOptions } from '@waline/client';
import { PageFrontmatter } from 'vuepress/shared';

interface CommentPluginFrontmatter extends PageFrontmatter {
    /**
     * 是否启用评论
     *
     * Whether Enable Comment
     *
     * @default true
     */
    comment?: boolean;
    /**
     * Comment identifier
     *
     * 评论标识符
     */
    commentID?: string;
    /**
     * @description Only available when using valine
     *
     * 是否启用访问量
     *
     * Whether enable pageviews
     *
     * @default true
     */
    pageview?: boolean;
}

type ArtalkOptions = BaseCommentPluginOptions & Partial<Omit<ArtalkConfig, 'el' | 'pageKey'>>;

interface NoCommentPluginOptions extends BaseCommentPluginOptions {
    provider?: 'None';
    comment?: never;
}

interface TwikooInitOptions {
    /**
     * Environment ID for tencloud or Link for Vercel
     *
     * 腾讯云环境链接或 Vercel Link
     */
    envId: string;
    /**
     * Tencloud region
     *
     * 腾讯云区域
     *
     * @default "ap-shanghai"
     */
    region?: string;
}
type TwikooOptions = BaseCommentPluginOptions & TwikooInitOptions;

type WalineLocaleData = Partial<WalineLocale>;
type WalineLocaleConfig = ExactLocaleConfig<WalineLocaleData>;
interface WalineOptions extends BaseCommentPluginOptions, Omit<WalineInitOptions, 'comment' | 'el' | 'locale'> {
    /**
     * Whether enable page views count by default
     *
     * 是否启用访问量
     *
     * @default true
     */
    pageview?: boolean;
}

/**
 * 评论选项
 *
 * Comment options
 */
type CommentOptions = ArtalkOptions | GiscusOptions | NoCommentPluginOptions | TwikooOptions | WalineOptions;

declare const defineArtalkConfig: (options: MaybeRefOrGetter<ArtalkOptions>) => void;
declare const useArtalkOptions: () => Ref<ArtalkOptions, ArtalkOptions>;
declare const defineGiscusConfig: (options: MaybeRefOrGetter<GiscusOptions>) => void;
declare const useGiscusOptions: () => Ref<GiscusOptions, GiscusOptions>;
declare const defineTwikooConfig: (options: MaybeRefOrGetter<TwikooOptions>) => void;
declare const useTwikooOptions: () => Ref<TwikooOptions, TwikooOptions>;
declare const defineWalineConfig: (options: MaybeRefOrGetter<WalineOptions>) => void;
declare const useWalineOptions: () => Ref<WalineOptions, WalineOptions>;

export { type ArtalkOptions, type CommentOptions, type CommentPluginFrontmatter, GiscusOptions, type NoCommentPluginOptions, type TwikooInitOptions, type TwikooOptions, type WalineLocaleConfig, type WalineLocaleData, type WalineOptions, defineArtalkConfig, defineGiscusConfig, defineTwikooConfig, defineWalineConfig, useArtalkOptions, useGiscusOptions, useTwikooOptions, useWalineOptions };
