// src/client/composables/pdf.ts
import { withBase } from "vuepress/client";
import { ensureEndingSlash, isLinkHttp } from "vuepress/shared";
import { pluginOptions } from "../options.js";
import { checkIsiPad, checkIsMobile, checkIsSafari } from "../utils/is.js";
function queryStringify(options) {
  const { page, noToolbar, zoom } = options;
  const params = [
    `page=${page}`,
    `toolbar=${noToolbar ? 0 : 1}`,
    `zoom=${zoom}`
  ];
  let queryString = params.join("&");
  if (queryString)
    queryString = `#${queryString}`;
  return queryString;
}
function renderPDF(el, url, embedType, options) {
  if (!pluginOptions.pdf)
    return;
  url = isLinkHttp(url) ? url : new URL(withBase(url), typeof location !== "undefined" ? location.href : "").toString();
  const pdfOptions = pluginOptions.pdf === true ? {} : pluginOptions.pdf;
  pdfOptions.pdfjsUrl ??= "https://static.pengzhanbo.cn/pdfjs/";
  const pdfjsUrl = `${ensureEndingSlash(withBase(pdfOptions.pdfjsUrl))}web/viewer.html`;
  const queryString = queryStringify(options);
  const source = embedType === "pdfjs" ? `${pdfjsUrl}?file=${url}${queryString}` : `${url}${queryString}`;
  const tagName = embedType === "pdfjs" || embedType === "iframe" ? "iframe" : "embed";
  el.innerHTML = "";
  const pdf = document.createElement(tagName);
  pdf.className = "pdf-viewer";
  pdf.type = "application/pdf";
  pdf.title = options.title || "PDF Viewer";
  pdf.src = source;
  if (pdf instanceof HTMLIFrameElement)
    pdf.allow = "fullscreen";
  el.appendChild(pdf);
}
function usePDF(el, url, options) {
  if (typeof window === "undefined" || !window?.navigator?.userAgent)
    return;
  const { navigator } = window;
  const { userAgent } = navigator;
  const isModernBrowser = typeof window.Promise === "function";
  const isMobileDevice = checkIsiPad(userAgent) || checkIsMobile(userAgent);
  const isSafariDesktop = !isMobileDevice && checkIsSafari(userAgent);
  const isFirefoxWithPDFJS = !isMobileDevice && /firefox/iu.test(userAgent) && userAgent.split("rv:").length > 1 ? Number.parseInt(userAgent.split("rv:")[1].split(".")[0], 10) > 18 : false;
  const supportsPDFs = !isMobileDevice && (isModernBrowser || isFirefoxWithPDFJS);
  if (!url)
    return;
  if (supportsPDFs || !isMobileDevice) {
    const embedType = isSafariDesktop ? "iframe" : "embed";
    return renderPDF(el, url, embedType, options);
  }
  return renderPDF(el, url, "pdfjs", options);
}
export {
  renderPDF,
  usePDF
};
