import { BuiltinTheme, ThemeRegistration } from 'shiki';
import { App } from 'vuepress';
import { Plugin } from 'vuepress/core';

type CanIUseMode = 'embed' | 'image';
interface CanIUseTokenMeta {
    feature: string;
    mode: CanIUseMode;
    versions: string;
}
interface CanIUseOptions {
    /**
     * 嵌入模式
     *
     * embed 通过iframe嵌入，提供可交互视图
     *
     * image 通过图片嵌入，静态
     *
     * @default 'embed'
     */
    mode?: CanIUseMode;
}

interface SizeOptions {
    width?: string;
    height?: string;
    ratio?: number | string;
}

interface CodepenTokenMeta extends SizeOptions {
    title?: string;
    user?: string;
    slash?: string;
    tab?: string;
    theme?: string;
    preview?: boolean;
    editable?: boolean;
}

interface CodeSandboxTokenMeta extends SizeOptions {
    user?: string;
    id?: string;
    layout?: string;
    type?: 'button' | 'embed';
    title?: string;
    filepath?: string;
    navbar?: boolean;
    console?: boolean;
}

interface CodeTabsOptions {
    icon?: boolean | {
        named?: false | string[];
        extensions?: false | string[];
    };
}

type FileTreeIconMode = 'simple' | 'colored';
interface FileTreeOptions {
    icon?: FileTreeIconMode;
}

interface IconsOptions {
    /**
     * The size of the icon
     * @default '1em'
     */
    size?: string | number;
    /**
     * The color of the icon
     * @default 'currentColor'
     */
    color?: string;
}

interface JSFiddleTokenMeta extends SizeOptions {
    user?: string;
    id?: string;
    title?: string;
    theme?: string;
    tab?: string;
}

type NpmToPackageManager = 'npm' | 'pnpm' | 'yarn' | 'bun' | 'deno';
type NpmToOptions = NpmToPackageManager[] | {
    tabs?: NpmToPackageManager[];
};

type PDFEmbedType = 'iframe' | 'embed' | 'pdfjs';
interface PDFTokenMeta extends SizeOptions {
    page?: number;
    noToolbar?: boolean;
    zoom?: number;
    src?: string;
    title?: string;
}
interface PDFOptions {
    /**
     * pdfjs url
     */
    pdfjsUrl?: string;
}

interface PlotOptions {
    /**
     * 是否启用 `!! !!`  markdown （该标记为非标准标记，脱离插件将不生效）
     * @default true
     */
    tag?: boolean;
    /**
     * 遮罩层颜色
     */
    mask?: string | {
        light: string;
        dark: string;
    };
    /**
     * 文本颜色
     */
    color?: string | {
        light: string;
        dark: string;
    };
    /**
     * 触发方式
     *
     * @default 'hover'
     */
    trigger?: 'hover' | 'click';
}

type ThemeOptions = BuiltinTheme | {
    light: BuiltinTheme;
    dark: BuiltinTheme;
};
interface ReplOptions {
    theme?: ThemeOptions;
    go?: boolean;
    kotlin?: boolean;
    rust?: boolean;
}
interface ReplEditorData {
    grammars: {
        go?: any;
        kotlin?: any;
        rust?: any;
    };
    theme: ThemeRegistration | {
        light: ThemeRegistration;
        dark: ThemeRegistration;
    };
}

interface MarkdownPowerPluginOptions {
    /**
     * 配置代码块分组
     */
    codeTabs?: CodeTabsOptions;
    /**
     * 是否启用 npm-to 容器
     */
    npmTo?: boolean | NpmToOptions;
    /**
     * 是否启用 PDF 嵌入语法
     *
     * `@[pdf](pdf_url)`
     *
     * @default false
     */
    pdf?: boolean | PDFOptions;
    /**
     * 是否启用 iconify 图标嵌入语法
     *
     * `:[collect:icon_name]:`
     *
     * @default false
     */
    icons?: boolean | IconsOptions;
    /**
     * 是否启用 隐秘文本 语法
     *
     * `!!plot_content!!`
     *
     * @default false
     */
    plot?: boolean | PlotOptions;
    /**
     * 是否启用 bilibili 视频嵌入
     *
     * `@[bilibili](bid)`
     *
     * @default false
     */
    bilibili?: boolean;
    /**
     * 是否启用 youtube 视频嵌入
     *
     * `@[youtube](video_id)`
     *
     * @default false
     */
    youtube?: boolean;
    /**
     * 是否启用 codepen 嵌入
     *
     * `@[codepen](pen_id)`
     *
     * @default false
     */
    codepen?: boolean;
    /**
     * @deprecated
     */
    replit?: boolean;
    /**
     * 是否启用 codeSandbox 嵌入
     *
     * `@[codesandbox](codesandbox_id)`
     *
     * @default false
     */
    codeSandbox?: boolean;
    /**
     * 是否启用 jsfiddle 嵌入
     *
     * `@[jsfiddle](jsfiddle_id)`
     *
     * @default false
     */
    jsfiddle?: boolean;
    /**
     * 是否启用 REPL 容器语法
     *
     * @default false
     */
    repl?: false | ReplOptions;
    /**
     * 是否启用 文件树 容器语法
     *
     * @default false
     */
    fileTree?: boolean | FileTreeOptions;
    /**
     * 是否启用 caniuse 嵌入语法
     *
     * `@[caniuse](feature_name)`
     *
     * @default false
     */
    caniuse?: boolean | CanIUseOptions;
    /**
     * 是否启用 自动填充 图片宽高属性
     *
     * __请注意，无论是否启用，该功能仅在构建生产包时生效__
     *
     * - 如果为 `true` ，等同于 `'local'`
     * - 如果为 `local`，则仅对本地图片 添加 width 和 height
     * - 如果为 `all`，则对所有图片(即包括 本地 和 远程) 添加 width 和 height
     *
     * 图片在加载过程中如果比较慢，从加载到完成的过程会导致页面布局不稳定，导致内容闪烁等。
     * 此功能通过给图片添加 `width` 和 `height` 属性来解决该问题。
     *
     * 请谨慎使用 `all` 选项，该选项会在构建阶段发起网络请求，尝试加载远程图片以获取图片尺寸信息，
     * 这可能会导致 构建时间变得更长（幸运的是获取尺寸信息只需要加载图片 几 KB 的数据包，因此耗时不会过长）
     *
     * @default false
     */
    imageSize?: boolean | 'local' | 'all';
}

interface ReplitTokenMeta extends SizeOptions {
    title?: string;
    source?: string;
    theme?: string;
}

interface VideoOptions {
    bilibili?: boolean;
    youtube?: boolean;
}
interface BilibiliTokenMeta extends SizeOptions {
    title?: string;
    bvid?: string;
    aid?: string;
    cid?: string;
    autoplay?: boolean;
    time?: string | number;
    page?: number;
}
interface YoutubeTokenMeta extends SizeOptions {
    title?: string;
    id: string;
    autoplay?: boolean;
    loop?: boolean;
    start?: string | number;
    end?: string | number;
}

interface ImgSize {
    width: number;
    height: number;
}
declare function resolveImageSize(app: App, url: string, remote?: boolean): Promise<ImgSize>;

declare function markdownPowerPlugin(options?: MarkdownPowerPluginOptions): Plugin;

export { type BilibiliTokenMeta, type CanIUseMode, type CanIUseOptions, type CanIUseTokenMeta, type CodeSandboxTokenMeta, type CodeTabsOptions, type CodepenTokenMeta, type FileTreeIconMode, type FileTreeOptions, type IconsOptions, type JSFiddleTokenMeta, type MarkdownPowerPluginOptions, type NpmToOptions, type NpmToPackageManager, type PDFEmbedType, type PDFOptions, type PDFTokenMeta, type PlotOptions, type ReplEditorData, type ReplOptions, type ReplitTokenMeta, type SizeOptions, type ThemeOptions, type VideoOptions, type YoutubeTokenMeta, markdownPowerPlugin, resolveImageSize };
