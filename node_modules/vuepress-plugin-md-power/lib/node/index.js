// src/node/enhance/imageSize.ts
import { Buffer } from "node:buffer";
import http from "node:https";
import { URL } from "node:url";
import { isLinkExternal, isLinkHttp } from "@vuepress/helper";
import imageSize from "image-size";
import { fs, logger, path } from "vuepress/utils";

// src/node/utils/resolveAttrs.ts
var RE_ATTR_VALUE = /(?:^|\s+)(?<attr>[\w-]+)(?:=\s*(?<quote>['"])(?<value>.+?)\k<quote>)?(?:\s+|$)/;
function resolveAttrs(info) {
  info = info.trim();
  if (!info)
    return { rawAttrs: "", attrs: {} };
  const attrs2 = {};
  const rawAttrs = info;
  let matched;
  while (matched = info.match(RE_ATTR_VALUE)) {
    const { attr, value } = matched.groups;
    attrs2[attr] = value ?? true;
    info = info.slice(matched[0].length);
  }
  Object.keys(attrs2).forEach((key) => {
    let value = attrs2[key];
    value = typeof value === "string" ? value.trim() : value;
    if (value === "true")
      value = true;
    else if (value === "false")
      value = false;
    attrs2[key] = value;
    if (key.includes("-")) {
      const _key = key.replace(/-(\w)/g, (_, c) => c.toUpperCase());
      attrs2[_key] = value;
    }
  });
  return { attrs: attrs2, rawAttrs };
}

// src/node/enhance/imageSize.ts
var REG_IMG = /!\[.*?\]\(.*?\)/g;
var REG_IMG_TAG = /<img(.*?)>/g;
var REG_IMG_TAG_SRC = /src(?:set)?=(['"])(.+?)\1/g;
var BADGE_LIST = [
  "https://img.shields.io",
  "https://badge.fury.io",
  "https://badgen.net",
  "https://forthebadge.com",
  "https://vercel.com/button"
];
var cache = /* @__PURE__ */ new Map();
async function imageSizePlugin(app, md, type2 = false) {
  if (!app.env.isBuild || !type2)
    return;
  if (type2 === "all") {
    const start = performance.now();
    try {
      await scanRemoteImageSize(app);
    } catch {
    }
    if (app.env.isDebug) {
      logger.info(`[vuepress-plugin-md-power] imageSizePlugin: scan all images time spent: ${performance.now() - start}ms`);
    }
  }
  const imageRule = md.renderer.rules.image;
  md.renderer.rules.image = (tokens, idx, options, env, self) => {
    if (!env.filePathRelative || !env.filePath)
      return imageRule(tokens, idx, options, env, self);
    const token = tokens[idx];
    const src = token.attrGet("src");
    const width = token.attrGet("width");
    const height = token.attrGet("height");
    const size = resolveSize(src, width, height, env);
    if (size) {
      token.attrSet("width", `${size.width}`);
      token.attrSet("height", `${size.height}`);
    }
    return imageRule(tokens, idx, options, env, self);
  };
  const rawHtmlBlockRule = md.renderer.rules.html_block;
  const rawHtmlInlineRule = md.renderer.rules.html_inline;
  md.renderer.rules.html_block = createHtmlRule(rawHtmlBlockRule);
  md.renderer.rules.html_inline = createHtmlRule(rawHtmlInlineRule);
  function createHtmlRule(rawHtmlRule) {
    return (tokens, idx, options, env, self) => {
      const token = tokens[idx];
      token.content = token.content.replace(REG_IMG_TAG, (raw, info) => {
        const { attrs: attrs2 } = resolveAttrs(info);
        const src = attrs2.src || attrs2.srcset;
        const size = resolveSize(src, attrs2.width, attrs2.height, env);
        if (!size)
          return raw;
        attrs2.width = size.width;
        attrs2.height = size.height;
        const imgAttrs = Object.entries(attrs2).map(([key, value]) => typeof value === "boolean" ? key : `${key}="${value}"`).join(" ");
        return `<img ${imgAttrs}>`;
      });
      return rawHtmlRule(tokens, idx, options, env, self);
    };
  }
  function resolveSize(src, width, height, env) {
    if (!src || src.startsWith("data:"))
      return false;
    if (width && height)
      return false;
    const isExternal = isLinkExternal(src, env.base);
    const filepath2 = isExternal ? src : resolveImageUrl(src, env, app);
    if (isExternal) {
      if (!cache.has(filepath2))
        return false;
    } else {
      if (!cache.has(filepath2)) {
        if (!fs.existsSync(filepath2))
          return false;
        const { width: w, height: h } = imageSize(filepath2);
        if (!w || !h)
          return false;
        cache.set(filepath2, { width: w, height: h });
      }
    }
    const { width: originalWidth, height: originalHeight } = cache.get(filepath2);
    const ratio = originalWidth / originalHeight;
    if (width && !height) {
      const w = Number.parseInt(width, 10);
      return { width: w, height: Math.round(w / ratio) };
    } else if (height && !width) {
      const h = Number.parseInt(height, 10);
      return { width: Math.round(h * ratio), height: h };
    } else {
      return { width: originalWidth, height: originalHeight };
    }
  }
}
function resolveImageUrl(src, env, app) {
  if (src[0] === "/")
    return app.dir.public(src.slice(1));
  if (env.filePathRelative && src[0] === ".")
    return app.dir.source(path.join(path.dirname(env.filePathRelative), src));
  if (env.filePath && (src[0] === "." || src[0] === "/"))
    return path.resolve(env.filePath, src);
  return path.resolve(src);
}
async function scanRemoteImageSize(app) {
  if (!app.env.isBuild)
    return;
  const cwd = app.dir.source();
  const files = await fs.readdir(cwd, { recursive: true });
  const imgList = [];
  for (const file of files) {
    const filepath2 = path.join(cwd, file);
    if ((await fs.stat(filepath2)).isFile() && !filepath2.includes(".vuepress") && !filepath2.includes("node_modules") && filepath2.endsWith(".md")) {
      const content = await fs.readFile(filepath2, "utf-8");
      const syntaxMatched = content.match(REG_IMG) ?? [];
      for (const img of syntaxMatched) {
        const src = img.slice(img.indexOf("](") + 2, -1);
        addList(src.split(/\s+/)[0]);
      }
      const tagMatched = content.match(REG_IMG_TAG) ?? [];
      for (const img of tagMatched) {
        const src = img.match(REG_IMG_TAG_SRC)?.[2] ?? "";
        addList(src);
      }
    }
  }
  function addList(src) {
    if (src && isLinkHttp(src) && !imgList.includes(src) && !BADGE_LIST.some((badge) => src.startsWith(badge))) {
      imgList.push(src);
    }
  }
  await Promise.all(imgList.map(async (src) => {
    if (!cache.has(src)) {
      const { width, height } = await fetchImageSize(src);
      if (width && height)
        cache.set(src, { width, height });
    }
  }));
}
function fetchImageSize(src) {
  const link = new URL(src);
  return new Promise((resolve) => {
    http.get(link, async (stream) => {
      const chunks = [];
      for await (const chunk of stream) {
        chunks.push(chunk);
        try {
          const { width: width2, height: height2 } = imageSize(Buffer.concat(chunks));
          if (width2 && height2) {
            return resolve({ width: width2, height: height2 });
          }
        } catch {
        }
      }
      const { width, height } = imageSize(Buffer.concat(chunks));
      resolve({ width, height });
    }).on("error", () => resolve({ width: 0, height: 0 }));
  });
}
async function resolveImageSize(app, url, remote = false) {
  if (cache.has(url))
    return cache.get(url);
  if (isLinkHttp(url) && remote) {
    return await fetchImageSize(url);
  }
  if (url[0] === "/") {
    const filepath2 = app.dir.public(url.slice(1));
    if (fs.existsSync(filepath2)) {
      const { width, height } = imageSize(filepath2);
      return { width, height };
    }
  }
  return { width: 0, height: 0 };
}

// src/node/plugin.ts
import { addViteOptimizeDepsInclude } from "@vuepress/helper";

// src/node/container/index.ts
import { isPlainObject as isPlainObject2 } from "@vuepress/helper";

// src/node/container/createContainer.ts
import container from "markdown-it-container";
function createContainerPlugin(md, type2, options = {}) {
  const render = (tokens, index) => {
    const token = tokens[index];
    const info = token.info.trim().slice(type2.length).trim() || "";
    if (token.nesting === 1) {
      return options.before?.(info, tokens, index) || `<div class="custom-container ${type2}">`;
    } else {
      return options.after?.(info, tokens, index) || "</div>";
    }
  };
  md.use(container, type2, { render });
}

// src/node/container/align.ts
var alignList = ["left", "center", "right", "justify"];
function alignPlugin(md) {
  for (const name of alignList) {
    createContainerPlugin(md, name, {
      before: () => `<div style="text-align:${name}">`
    });
  }
}

// src/node/container/card.ts
function cardPlugin(md) {
  createContainerPlugin(md, "card", {
    before(info) {
      const { attrs: attrs2 } = resolveAttrs(info);
      const { title, icon } = attrs2;
      return `<VPCard${title ? ` title="${title}"` : ""}${icon ? ` icon="${icon}"` : ""}>`;
    },
    after: () => "</VPCard>"
  });
  createContainerPlugin(md, "card-grid", {
    before: () => "<VPCardGrid>",
    after: () => "</VPCardGrid>"
  });
}

// src/node/container/codeTabs.ts
import { tab } from "@mdit/plugin-tab";
import { isPlainObject } from "@vuepress/helper";

// src/node/fileIcons/definitions.ts
var defaultFolder = "vscode-icons:default-folder";
var defaultFile = "vscode-icons:default-file";
var definitions = {
  named: {
    // package manager
    "pnpm": "vscode-icons:file-type-light-pnpm",
    "PNPM": "vscode-icons:file-type-light-pnpm",
    "npm": "logos:npm-icon",
    "NPM": "logos:npm-icon",
    "yarn": "vscode-icons:file-type-yarn",
    "Yarn": "vscode-icons:file-type-yarn",
    "bun": "vscode-icons:file-type-bun",
    "Bun": "vscode-icons:file-type-bun",
    "deno": "vscode-icons:file-type-light-deno",
    "Deno": "vscode-icons:file-type-light-deno",
    // bundlers
    "rollup": "vscode-icons:file-type-rollup",
    "Rollup": "vscode-icons:file-type-rollup",
    "webpack": "vscode-icons:file-type-webpack",
    "Webpack": "vscode-icons:file-type-webpack",
    "vite": "vscode-icons:file-type-vite",
    "Vite": "vscode-icons:file-type-vite",
    "esbuild": "vscode-icons:file-type-esbuild",
    "Esbuild": "vscode-icons:file-type-esbuild",
    // frameworks
    "vue": "vscode-icons:file-type-vue",
    "Vue": "vscode-icons:file-type-vue",
    "svelte": "vscode-icons:file-type-svelte",
    "Svelte": "vscode-icons:file-type-svelte",
    "sveltekit": "vscode-icons:file-type-svelte",
    "SvelteKit": "vscode-icons:file-type-svelte",
    "angular": "vscode-icons:file-type-angular",
    "Angular": "vscode-icons:file-type-angular",
    "react": "vscode-icons:file-type-reactjs",
    "React": "vscode-icons:file-type-reactjs",
    "next": "vscode-icons:file-type-light-next",
    "Next": "vscode-icons:file-type-light-next",
    "Nextjs": "vscode-icons:file-type-light-next",
    "NextJS": "vscode-icons:file-type-light-next",
    "nuxt": "vscode-icons:file-type-nuxt",
    "Nuxt": "vscode-icons:file-type-nuxt",
    "Nuxtjs": "vscode-icons:file-type-nuxt",
    "NuxtJS": "vscode-icons:file-type-nuxt",
    "solid": "logos:solidjs-icon",
    "Solid": "logos:solidjs-icon",
    "solidjs": "logos:solidjs-icon",
    "astro": "vscode-icons:file-type-light-astro",
    "Astro": "vscode-icons:file-type-light-astro",
    "vitest": "vscode-icons:file-type-vitest",
    "Vitest": "vscode-icons:file-type-vitest",
    "playwright": "vscode-icons:file-type-playwright",
    "Playwright": "vscode-icons:file-type-playwright",
    "jest": "vscode-icons:file-type-jest",
    "Jest": "vscode-icons:file-type-jest",
    "cypress": "vscode-icons:file-type-cypress",
    "Cypress": "vscode-icons:file-type-cypress",
    "docker": "vscode-icons:file-type-docker",
    "Docker": "vscode-icons:file-type-docker",
    // TODO: code group title icons
    // programming languages
    "html": "vscode-icons:file-type-html",
    "Html": "vscode-icons:file-type-html",
    "HTML": "vscode-icons:file-type-html",
    "javascript": "vscode-icons:file-type-js-official",
    "Javascript": "vscode-icons:file-type-js-official",
    "JavaScript": "vscode-icons:file-type-js-official",
    "js": "vscode-icons:file-type-js-official",
    "JS": "vscode-icons:file-type-js-official",
    "typescript": "vscode-icons:file-type-typescript-official",
    "Typescript": "vscode-icons:file-type-typescript-official",
    "TypeScript": "vscode-icons:file-type-typescript-official",
    "ts": "vscode-icons:file-type-typescript-official",
    "TS": "vscode-icons:file-type-typescript-official",
    "css": "vscode-icons:file-type-css",
    "CSS": "vscode-icons:file-type-css",
    "less": "vscode-icons:file-type-less",
    "Less": "vscode-icons:file-type-less",
    "scss": "vscode-icons:file-type-scss",
    "Scss": "vscode-icons:file-type-scss",
    "SCSS": "vscode-icons:file-type-scss",
    "sass": "vscode-icons:file-type-sass",
    "Sass": "vscode-icons:file-type-sass",
    "SASS": "vscode-icons:file-type-sass",
    "stylus": "vscode-icons:file-type-light-stylus",
    "Stylus": "vscode-icons:file-type-light-stylus",
    "postcss": "vscode-icons:file-type-postcss",
    "Postcss": "vscode-icons:file-type-postcss",
    "PostCSS": "vscode-icons:file-type-postcss",
    "sh": "vscode-icons:file-type-shell",
    "shell": "vscode-icons:file-type-shell",
    "Shell": "vscode-icons:file-type-shell",
    "bash": "vscode-icons:file-type-shell",
    "Bash": "vscode-icons:file-type-shell",
    "java": "vscode-icons:file-type-java",
    "Java": "vscode-icons:file-type-java",
    "JAVA": "vscode-icons:file-type-java",
    "php": "vscode-icons:file-type-php3",
    "PHP": "vscode-icons:file-type-php3",
    "c": "vscode-icons:file-type-c",
    "C": "vscode-icons:file-type-c",
    "python": "vscode-icons:file-type-python",
    "Python": "vscode-icons:file-type-python",
    "kotlin": "vscode-icons:file-type-kotlin",
    "Kotlin": "vscode-icons:file-type-kotlin",
    "go": "vscode-icons:file-type-go-gopher",
    "golang": "vscode-icons:file-type-go-gopher",
    "Go": "vscode-icons:file-type-go-gopher",
    "GoLang": "vscode-icons:file-type-go-gopher",
    "rust": "vscode-icons:file-type-rust",
    "Rust": "vscode-icons:file-type-rust",
    "zig": "vscode-icons:file-type-zig",
    "Zig": "vscode-icons:file-type-zig",
    "swift": "vscode-icons:file-type-swift",
    "Swift": "vscode-icons:file-type-swift",
    "c#": "vscode-icons:file-type-csharp",
    "CSharp": "vscode-icons:file-type-csharp",
    "c++": "vscode-icons:file-type-cpp",
    "C++": "vscode-icons:file-type-cpp",
    "ruby": "vscode-icons:file-type-ruby",
    "Ruby": "vscode-icons:file-type-ruby",
    "makefile": "vscode-icons:file-type-makefile",
    "Makefile": "vscode-icons:file-type-makefile",
    "Object-C": "vscode-icons:file-type-objectivec",
    "object-c": "vscode-icons:file-type-objectivec",
    "SQL": "vscode-icons:file-type-sql",
    "sql": "vscode-icons:file-type-sql",
    "mysql": "vscode-icons:file-type-mysql",
    "MySQL": "vscode-icons:file-type-mysql",
    "MySql": "vscode-icons:file-type-mysql",
    "pgsql": "vscode-icons:file-type-pgsql",
    "PostgreSQL": "vscode-icons:file-type-pgsql",
    "PGSQL": "vscode-icons:file-type-pgsql",
    "xml": "vscode-icons:file-type-xml",
    "XML": "vscode-icons:file-type-xml",
    "wasm": "vscode-icons:file-type-wasm",
    "webassembly": "vscode-icons:file-type-wasm",
    "WebAssembly": "vscode-icons:file-type-wasm",
    "WASM": "vscode-icons:file-type-wasm",
    "toml": "vscode-icons:file-type-light-toml",
    "Toml": "vscode-icons:file-type-light-toml",
    "TOML": "vscode-icons:file-type-light-toml",
    "yaml": "vscode-icons:file-type-light-yaml",
    "Yaml": "vscode-icons:file-type-light-yaml",
    "YAML": "vscode-icons:file-type-light-yaml"
  },
  folders: {
    "default": "vscode-icons:default-folder",
    "src": "vscode-icons:folder-type-src",
    "srcs": "vscode-icons:folder-type-src",
    "source": "vscode-icons:folder-type-src",
    "sources": "vscode-icons:folder-type-src",
    "code": "vscode-icons:folder-type-src",
    "tauri-src": "vscode-icons:folder-type-tauri",
    "dist": "vscode-icons:folder-type-dist",
    "out": "vscode-icons:folder-type-dist",
    "output": "vscode-icons:folder-type-dist",
    "release": "vscode-icons:folder-type-dist",
    "bin": "vscode-icons:folder-type-dist",
    "distribution": "vscode-icons:folder-type-dist",
    "docs": "vscode-icons:folder-type-docs",
    "doc": "vscode-icons:folder-type-docs",
    "document": "vscode-icons:folder-type-docs",
    "documents": "vscode-icons:folder-type-docs",
    "documentation": "vscode-icons:folder-type-docs",
    "post": "vscode-icons:folder-type-docs",
    "posts": "vscode-icons:folder-type-docs",
    "article": "vscode-icons:folder-type-docs",
    "articles": "vscode-icons:folder-type-docs",
    "scripts": "vscode-icons:folder-type-script",
    "script": "vscode-icons:folder-type-script",
    "node_modules": "vscode-icons:folder-type-light-node",
    "cli": "vscode-icons:folder-type-cli",
    "template": "vscode-icons:folder-type-template",
    "templates": "vscode-icons:folder-type-template",
    "theme": "vscode-icons:folder-type-theme",
    "themes": "vscode-icons:folder-type-theme",
    "color": "vscode-icons:folder-type-theme",
    "colors": "vscode-icons:folder-type-theme",
    "design": "vscode-icons:folder-type-theme",
    "designs": "vscode-icons:folder-type-theme",
    "packages": "vscode-icons:folder-type-package",
    "package": "vscode-icons:folder-type-package",
    "pkg": "vscode-icons:folder-type-package",
    "pkgs": "vscode-icons:folder-type-package",
    "shared": "vscode-icons:folder-type-shared",
    "utils": "vscode-icons:folder-type-tools",
    "util": "vscode-icons:folder-type-tools",
    "utility": "vscode-icons:folder-type-tools",
    "utilities": "vscode-icons:folder-type-tools",
    "helper": "vscode-icons:folder-type-helper",
    "helpers": "vscode-icons:folder-type-helper",
    "tools": "vscode-icons:folder-type-tools",
    "toolkit": "vscode-icons:folder-type-tools",
    "toolkits": "vscode-icons:folder-type-tools",
    "tooling": "vscode-icons:folder-type-tools",
    "devtools": "vscode-icons:folder-type-tools",
    "component": "vscode-icons:folder-type-component",
    "components": "vscode-icons:folder-type-component",
    "Component": "vscode-icons:folder-type-component",
    "Components": "vscode-icons:folder-type-component",
    "widget": "vscode-icons:folder-type-component",
    "widgets": "vscode-icons:folder-type-component",
    "fragments": "vscode-icons:folder-type-component",
    "hooks": "vscode-icons:folder-type-hook",
    "composables": "vscode-icons:folder-type-hook",
    "public": "vscode-icons:folder-type-public",
    "www": "vscode-icons:folder-type-public",
    "web": "vscode-icons:folder-type-public",
    "wwwroot": "vscode-icons:folder-type-public",
    "website": "vscode-icons:folder-type-public",
    "site": "vscode-icons:folder-type-public",
    "browser": "vscode-icons:folder-type-public",
    "browsers": "vscode-icons:folder-type-public",
    "fonts": "vscode-icons:folder-type-fonts",
    "font": "vscode-icons:folder-type-fonts",
    "images": "vscode-icons:folder-type-images",
    "image": "vscode-icons:folder-type-images",
    "imgs": "vscode-icons:folder-type-images",
    "img": "vscode-icons:folder-type-images",
    "icon": "vscode-icons:folder-type-images",
    "icons": "vscode-icons:folder-type-images",
    "ico": "vscode-icons:folder-type-images",
    "icos": "vscode-icons:folder-type-images",
    "figure": "vscode-icons:folder-type-images",
    "figures": "vscode-icons:folder-type-images",
    "fig": "vscode-icons:folder-type-images",
    "figs": "vscode-icons:folder-type-images",
    "screenshot": "vscode-icons:folder-type-images",
    "screenshots": "vscode-icons:folder-type-images",
    "screengrab": "vscode-icons:folder-type-images",
    "screengrabs": "vscode-icons:folder-type-images",
    "pic": "vscode-icons:folder-type-images",
    "pics": "vscode-icons:folder-type-images",
    "picture": "vscode-icons:folder-type-images",
    "pictures": "vscode-icons:folder-type-images",
    "photo": "vscode-icons:folder-type-images",
    "photos": "vscode-icons:folder-type-images",
    "photograph": "vscode-icons:folder-type-images",
    "photographs": "vscode-icons:folder-type-images",
    "asset": "vscode-icons:folder-type-asset",
    "assets": "vscode-icons:folder-type-asset",
    "resource": "vscode-icons:folder-type-asset",
    "resources": "vscode-icons:folder-type-asset",
    "res": "vscode-icons:folder-type-asset",
    "static": "vscode-icons:folder-type-asset",
    "report": "vscode-icons:folder-type-asset",
    "reports": "vscode-icons:folder-type-asset",
    "apis": "vscode-icons:folder-type-api",
    "api": "vscode-icons:folder-type-api",
    "restapi": "vscode-icons:folder-type-api",
    "style": "vscode-icons:folder-type-style",
    "styles": "vscode-icons:folder-type-style",
    "stylesheet": "vscode-icons:folder-type-style",
    "stylesheets": "vscode-icons:folder-type-style",
    "css": "vscode-icons:folder-type-css",
    "scss": "vscode-icons:folder-type-light-sass",
    "sass": "vscode-icons:folder-type-light-sass",
    "less": "vscode-icons:folder-type-less",
    "plugin": "vscode-icons:folder-type-plugin",
    "plugins": "vscode-icons:folder-type-plugin",
    "typings": "vscode-icons:folder-type-typings",
    "types": "vscode-icons:folder-type-typings",
    "mock": "vscode-icons:folder-type-mock",
    "i18n": "vscode-icons:folder-type-locale",
    "locales": "vscode-icons:folder-type-locale",
    "locale": "vscode-icons:folder-type-locale",
    "lang": "vscode-icons:folder-type-locale",
    "langs": "vscode-icons:folder-type-locale",
    "language": "vscode-icons:folder-type-locale",
    "languages": "vscode-icons:folder-type-locale",
    "l10n": "vscode-icons:folder-type-locale",
    "localization": "vscode-icons:folder-type-locale",
    "translation": "vscode-icons:folder-type-locale",
    "translate": "vscode-icons:folder-type-locale",
    "translations": "vscode-icons:folder-type-locale",
    "tx": "vscode-icons:folder-type-locale",
    "config": "vscode-icons:folder-type-config",
    "configs": "vscode-icons:folder-type-config",
    ".config": "vscode-icons:folder-type-config",
    ".configs": "vscode-icons:folder-type-config",
    "cfg": "vscode-icons:folder-type-config",
    "cfgs": "vscode-icons:folder-type-config",
    "conf": "vscode-icons:folder-type-config",
    "confs": "vscode-icons:folder-type-config",
    "configuration": "vscode-icons:folder-type-config",
    "configurations": "vscode-icons:folder-type-config",
    "setting": "vscode-icons:folder-type-config",
    "settings": "vscode-icons:folder-type-config",
    "option": "vscode-icons:folder-type-config",
    "options": "vscode-icons:folder-type-config",
    "controller": "vscode-icons:folder-type-controller",
    "controllers": "vscode-icons:folder-type-controller",
    "Controller": "vscode-icons:folder-type-controller",
    "Controllers": "vscode-icons:folder-type-controller",
    "model": "vscode-icons:folder-type-model",
    "models": "vscode-icons:folder-type-model",
    "Model": "vscode-icons:folder-type-model",
    "Models": "vscode-icons:folder-type-model",
    "service": "vscode-icons:folder-type-services",
    "services": "vscode-icons:folder-type-services",
    "Service": "vscode-icons:folder-type-services",
    "Services": "vscode-icons:folder-type-services",
    "view": "vscode-icons:folder-type-view",
    "views": "vscode-icons:folder-type-view",
    "View": "vscode-icons:folder-type-view",
    "Views": "vscode-icons:folder-type-view",
    "page": "vscode-icons:folder-type-view",
    "pages": "vscode-icons:folder-type-view",
    "html": "vscode-icons:folder-type-html",
    "app": "vscode-icons:folder-type-app",
    "apps": "vscode-icons:folder-type-app",
    "client": "vscode-icons:folder-type-client",
    "clients": "vscode-icons:folder-type-client",
    "frontend": "vscode-icons:folder-type-client",
    "frontends": "vscode-icons:folder-type-client",
    "server": "vscode-icons:folder-type-server",
    "servers": "vscode-icons:folder-type-server",
    "backend": "vscode-icons:folder-type-server",
    "backends": "vscode-icons:folder-type-server",
    "db": "vscode-icons:folder-type-db",
    "database": "vscode-icons:folder-type-db",
    "databases": "vscode-icons:folder-type-db",
    "data": "vscode-icons:folder-type-db",
    "sql": "vscode-icons:folder-type-db",
    "e2e": "vscode-icons:folder-type-e2e",
    "cypress": "vscode-icons:folder-type-light-cypress",
    "test": "vscode-icons:folder-type-test",
    "tests": "vscode-icons:folder-type-test",
    "testing": "vscode-icons:folder-type-test",
    "snapshots": "vscode-icons:folder-type-test",
    "spec": "vscode-icons:folder-type-test",
    "specs": "vscode-icons:folder-type-test",
    "lib": "vscode-icons:folder-type-library",
    "libs": "vscode-icons:folder-type-library",
    "library": "vscode-icons:folder-type-library",
    "libraries": "vscode-icons:folder-type-library",
    "vendor": "vscode-icons:folder-type-library",
    "vendors": "vscode-icons:folder-type-library",
    "third-party": "vscode-icons:folder-type-library",
    "lib64": "vscode-icons:folder-type-library",
    "include": "vscode-icons:folder-type-include",
    "inc": "vscode-icons:folder-type-include",
    "includes": "vscode-icons:folder-type-include",
    "partial": "vscode-icons:folder-type-include",
    "partials": "vscode-icons:folder-type-include",
    "inc64": "vscode-icons:folder-type-include",
    "temp": "vscode-icons:folder-type-temp",
    "tmp": "vscode-icons:folder-type-temp",
    "cache": "vscode-icons:folder-type-temp",
    "cached": "vscode-icons:folder-type-temp",
    ".temp": "vscode-icons:folder-type-temp",
    ".cache": "vscode-icons:folder-type-temp",
    "log": "vscode-icons:folder-type-log",
    "logs": "vscode-icons:folder-type-log",
    "logging": "vscode-icons:folder-type-log",
    ".git": "vscode-icons:folder-type-git",
    ".github": "vscode-icons:folder-type-github",
    ".gitlab": "vscode-icons:folder-type-gitlab",
    ".vscode": "vscode-icons:folder-type-vscode",
    ".husky": "vscode-icons:folder-type-husky",
    ".idea": "vscode-icons:folder-type-idea"
  },
  files: {
    "package.json": "vscode-icons:file-type-node",
    "pnpm-debug.log": "vscode-icons:file-type-light-pnpm",
    "pnpm-lock.yaml": "vscode-icons:file-type-light-pnpm",
    "pnpm-workspace.yaml": "vscode-icons:file-type-light-pnpm",
    "biome.json": "vscode-icons:file-type-biome",
    "bun.lockb": "vscode-icons:file-type-bun",
    "COMMIT_EDITMSG": "vscode-icons:file-type-git",
    "MERGE_MSG": "vscode-icons:file-type-git",
    "karma.conf.js": "vscode-icons:file-type-karma",
    "karma.conf.cjs": "vscode-icons:file-type-karma",
    "karma.conf.mjs": "vscode-icons:file-type-karma",
    "karma.conf.coffee": "vscode-icons:file-type-karma",
    "README.md": "flat-color-icons:info",
    "README.txt": "flat-color-icons:info",
    "README": "flat-color-icons:info",
    "CHANGELOG.md": "catppuccin:changelog",
    "CHANGELOG.txt": "catppuccin:changelog",
    "CHANGELOG": "catppuccin:changelog",
    "CHANGES.md": "catppuccin:changelog",
    "CHANGES.txt": "catppuccin:changelog",
    "CHANGES": "catppuccin:changelog",
    "VERSION.md": "catppuccin:changelog",
    "VERSION.txt": "catppuccin:changelog",
    "VERSION": "catppuccin:changelog",
    "mvnw": "vscode-icons:file-type-maven",
    "pom.xml": "vscode-icons:file-type-maven",
    "tsconfig.json": "vscode-icons:file-type-tsconfig",
    "swagger.json": "vscode-icons:file-type-swagger",
    "swagger.yml": "vscode-icons:file-type-swagger",
    "swagger.yaml": "vscode-icons:file-type-swagger",
    "mime.types": "vscode-icons:file-type-light-config",
    "Jenkinsfile": "vscode-icons:file-type-jenkins",
    "babel.config.js": "vscode-icons:file-type-babel2",
    "babel.config.json": "vscode-icons:file-type-babel2",
    "babel.config.cjs": "vscode-icons:file-type-babel2",
    "BUILD": "vscode-icons:file-type-bazel",
    "BUILD.bazel": "vscode-icons:file-type-bazel",
    "WORKSPACE": "vscode-icons:file-type-bazel",
    "WORKSPACE.bazel": "vscode-icons:file-type-bazel",
    "bower.json": "vscode-icons:file-type-bower2",
    "Bower.json": "vscode-icons:file-type-bower2",
    "eslint.config.js": "vscode-icons:file-type-eslint",
    "eslint.config.ts": "vscode-icons:file-type-eslint",
    "firebase.json": "vscode-icons:file-type-firebase",
    "geckodriver": "openmoji:firefox",
    "Gruntfile.js": "vscode-icons:file-type-grunt",
    "gruntfile.babel.js": "vscode-icons:file-type-grunt",
    "Gruntfile.babel.js": "vscode-icons:file-type-grunt",
    "gruntfile.js": "vscode-icons:file-type-grunt",
    "Gruntfile.coffee": "vscode-icons:file-type-grunt",
    "gruntfile.coffee": "vscode-icons:file-type-grunt",
    "ionic.config.json": "vscode-icons:file-type-ionic",
    "Ionic.config.json": "vscode-icons:file-type-ionic",
    "ionic.project": "vscode-icons:file-type-ionic",
    "Ionic.project": "vscode-icons:file-type-ionic",
    "platformio.ini": "vscode-icons:file-type-platformio",
    "rollup.config.js": "vscode-icons:file-type-rollup",
    "sass-lint.yml": "vscode-icons:file-type-sass",
    "stylelint.config.js": "vscode-icons:file-type-light-stylelint",
    "stylelint.config.cjs": "vscode-icons:file-type-light-stylelint",
    "stylelint.config.mjs": "vscode-icons:file-type-light-stylelint",
    "yarn.clean": "vscode-icons:file-type-yarn",
    "yarn.lock": "vscode-icons:file-type-yarn",
    "webpack.config.js": "vscode-icons:file-type-webpack",
    "webpack.config.cjs": "vscode-icons:file-type-webpack",
    "webpack.config.mjs": "vscode-icons:file-type-webpack",
    "webpack.config.ts": "vscode-icons:file-type-webpack",
    "webpack.config.build.js": "vscode-icons:file-type-webpack",
    "webpack.config.build.cjs": "vscode-icons:file-type-webpack",
    "webpack.config.build.mjs": "vscode-icons:file-type-webpack",
    "webpack.config.build.ts": "vscode-icons:file-type-webpack",
    "webpack.common.js": "vscode-icons:file-type-webpack",
    "webpack.common.cjs": "vscode-icons:file-type-webpack",
    "webpack.common.mjs": "vscode-icons:file-type-webpack",
    "webpack.common.ts": "vscode-icons:file-type-webpack",
    "webpack.dev.js": "vscode-icons:file-type-webpack",
    "webpack.dev.cjs": "vscode-icons:file-type-webpack",
    "webpack.dev.mjs": "vscode-icons:file-type-webpack",
    "webpack.dev.ts": "vscode-icons:file-type-webpack",
    "webpack.prod.js": "vscode-icons:file-type-webpack",
    "webpack.prod.cjs": "vscode-icons:file-type-webpack",
    "webpack.prod.mjs": "vscode-icons:file-type-webpack",
    "webpack.prod.ts": "vscode-icons:file-type-webpack",
    "vite.config.js": "vscode-icons:file-type-vite",
    "vite.config.ts": "vscode-icons:file-type-vite",
    "vite.config.mjs": "vscode-icons:file-type-vite",
    "vite.config.cjs": "vscode-icons:file-type-vite",
    "vitest.config.ts": "vscode-icons:file-type-vitest",
    "vitest.config.js": "vscode-icons:file-type-vitest",
    "vitest.config.mjs": "vscode-icons:file-type-vitest",
    "vitest.config.cjs": "vscode-icons:file-type-vitest",
    "turbo.json": "vscode-icons:file-type-light-turbo",
    "vercel.json": "vscode-icons:file-type-light-vercel",
    "netlify.toml": "vscode-icons:file-type-light-netlify",
    "Cargo.toml": "vscode-icons:file-type-cargo",
    "Cargo.lock": "vscode-icons:file-type-cargo",
    "npm-debug.log": "vscode-icons:file-type-npm"
  },
  extensions: {
    ".astro": "vscode-icons:file-type-light-astro",
    ".mdx": "vscode-icons:file-type-light-mdx",
    ".cls": "vscode-icons:file-type-apex",
    ".apex": "vscode-icons:file-type-apex",
    ".asm": "vscode-icons:file-type-assembly",
    ".s": "vscode-icons:file-type-assembly",
    ".bicep": "vscode-icons:file-type-bicep",
    ".bzl": "vscode-icons:file-type-bazel",
    ".bazel": "vscode-icons:file-type-bazel",
    ".BUILD": "vscode-icons:file-type-bazel",
    ".WORKSPACE": "vscode-icons:file-type-bazel",
    ".bazelignore": "vscode-icons:file-type-bazel",
    ".bazelversion": "vscode-icons:file-type-bazel",
    ".c": "vscode-icons:file-type-c",
    ".h": "vscode-icons:file-type-c",
    ".m": "vscode-icons:file-type-c",
    ".cs": "vscode-icons:file-type-csharp",
    ".cshtml": "vscode-icons:file-type-html",
    ".aspx": "vscode-icons:file-type-aspx",
    ".ascx": "vscode-icons:file-type-aspx",
    ".asax": "vvscode-icons:file-type-aspx",
    ".master": "vscode-icons:file-type-html",
    ".cc": "vscode-icons:file-type-cpp",
    ".cpp": "vscode-icons:file-type-cpp",
    ".cxx": "vscode-icons:file-type-cpp",
    ".c++": "vscode-icons:file-type-cpp",
    ".hh": "vscode-icons:file-type-cppheader",
    ".hpp": "vscode-icons:file-type-cppheader",
    ".hxx": "vscode-icons:file-type-cppheader",
    ".h++": "vscode-icons:file-type-cppheader",
    ".mm": "vscode-icons:file-type-cpp",
    ".clj": "vscode-icons:file-type-clojure",
    ".cljs": "vscode-icons:file-type-clojure",
    ".cljc": "vscode-icons:file-type-clojure",
    ".edn": "vscode-icons:file-type-clojure",
    ".cfc": "vscode-icons:file-type-cfc",
    ".cfm": "vscode-icons:file-type-cfm",
    ".coffee": "vscode-icons:file-type-coffeescript",
    ".litcoffee": "vscode-icons:file-type-coffeescript",
    ".config": "vscode-icons:file-type-config",
    ".cfg": "vscode-icons:file-type-config",
    ".conf": "vscode-icons:file-type-config",
    ".cr": "vscode-icons:file-type-light-crystal",
    ".ecr": "vscode-icons:file-type-light-crystal",
    ".slang": "vscode-icons:file-type-slang",
    ".cson": "vscode-icons:file-type-json",
    ".css": "vscode-icons:file-type-css",
    ".css.map": "vscode-icons:file-type-cssmap",
    ".sss": "vscode-icons:file-type-sss",
    ".csv": "vscode-icons:file-type-excel",
    ".xls": "vscode-icons:file-type-excel2",
    ".xlsx": "vscode-icons:file-type-excel2",
    ".cu": "vscode-icons:file-type-cuda",
    ".cuh": "vscode-icons:file-type-cuda",
    ".hu": "vscode-icons:file-type-cuda",
    ".cake": "vscode-icons:file-type-cake",
    ".ctp": "vscode-icons:file-type-cakephp",
    ".d": "vscode-icons:file-type-dependencies",
    ".doc": "vscode-icons:file-type-word2",
    ".docx": "vscode-icons:file-type-word2",
    ".ejs": "vscode-icons:file-type-ejs",
    ".ex": "vscode-icons:file-type-elixir",
    ".exs": "vscode-icons:file-type-elixir",
    ".elm": "vscode-icons:file-type-elm",
    ".ico": "vscode-icons:file-type-favicon",
    ".fs": "vscode-icons:file-type-fsharp",
    ".fsx": "vscode-icons:file-type-fsharp",
    ".gitignore": "vscode-icons:file-type-git",
    ".gitconfig": "vscode-icons:file-type-git",
    ".gitkeep": "vscode-icons:file-type-git",
    ".gitattributes": "vscode-icons:file-type-git",
    ".gitmodules": "vscode-icons:file-type-git",
    ".go": "vscode-icons:file-type-go",
    ".slide": "vscode-icons:file-type-go",
    ".article": "vscode-icons:file-type-go",
    ".gd": "vscode-icons:file-type-godot",
    ".godot": "vscode-icons:file-type-godot",
    ".tres": "vscode-icons:file-type-godot",
    ".tscn": "vscode-icons:file-type-godot",
    ".gradle": "vscode-icons:file-type-light-gradle",
    ".groovy": "vscode-icons:file-type-groovy",
    ".gsp": "vscode-icons:file-type-groovy",
    ".gql": "vscode-icons:file-type-graphql",
    ".graphql": "vscode-icons:file-type-graphql",
    ".graphqls": "vscode-icons:file-type-graphql",
    ".hack": "logos:hack",
    ".haml": "vscode-icons:file-type-haml",
    ".handlebars": "vscode-icons:file-type-handlebars",
    ".hbs": "vscode-icons:file-type-handlebars",
    ".hjs": "vscode-icons:file-type-handlebars",
    ".hs": "vscode-icons:file-type-haskell",
    ".lhs": "vscode-icons:file-type-haskell",
    ".hx": "vscode-icons:file-type-haxe",
    ".hxs": "vscode-icons:file-type-haxe",
    ".hxp": "vscode-icons:file-type-haxe",
    ".hxml": "vscode-icons:file-type-haxe",
    ".html": "vscode-icons:file-type-html",
    ".jade": "file-icons:jade",
    ".java": "vscode-icons:file-type-java",
    ".class": "vscode-icons:file-type-java",
    ".classpath": "vscode-icons:file-type-java",
    ".properties": "vscode-icons:file-type-java",
    ".js": "vscode-icons:file-type-js",
    ".js.map": "vscode-icons:file-type-jsmap",
    ".cjs": "vscode-icons:file-type-js",
    ".cjs.map": "vscode-icons:file-type-jsmap",
    ".mjs": "vscode-icons:file-type-js",
    ".mjs.map": "vscode-icons:file-type-jsmap",
    ".spec.js": "vscode-icons:file-type-light-testjs",
    ".spec.cjs": "vscode-icons:file-type-light-testjs",
    ".spec.mjs": "vscode-icons:file-type-light-testjs",
    ".test.js": "vscode-icons:file-type-light-testjs",
    ".test.cjs": "vscode-icons:file-type-light-testjs",
    ".test.mjs": "vscode-icons:file-type-light-testjs",
    ".es": "vscode-icons:file-type-js",
    ".es5": "vscode-icons:file-type-js",
    ".es6": "vscode-icons:file-type-js",
    ".es7": "vscode-icons:file-type-js",
    ".jinja": "vscode-icons:file-type-jinja",
    ".jinja2": "vscode-icons:file-type-jinja",
    ".json": "vscode-icons:file-type-json",
    ".jl": "vscode-icons:file-type-julia",
    ".kt": "vscode-icons:file-type-kotlin",
    ".kts": "vscode-icons:file-type-kotlin",
    ".dart": "vscode-icons:file-type-dartlang",
    ".less": "vscode-icons:file-type-less",
    ".liquid": "vscode-icons:file-type-liquid",
    ".ls": "vscode-icons:file-type-livescript",
    ".lua": "vscode-icons:file-type-lua",
    ".markdown": "vscode-icons:file-type-markdown",
    ".md": "vscode-icons:file-type-markdown",
    ".mustache": "vscode-icons:file-type-light-mustache",
    ".stache": "vscode-icons:file-type-light-mustache",
    ".nim": "vscode-icons:file-type-light-nim",
    ".nims": "vscode-icons:file-type-light-nim",
    ".github-issues": "mdi:github",
    ".ipynb": "vscode-icons:file-type-jupyter",
    ".njk": "vscode-icons:file-type-nunjucks",
    ".nunjucks": "vscode-icons:file-type-nunjucks",
    ".nunjs": "vscode-icons:file-type-nunjucks",
    ".nunj": "vscode-icons:file-type-nunjucks",
    ".njs": "vscode-icons:file-type-nunjucks",
    ".nj": "vscode-icons:file-type-nunjucks",
    ".npm-debug.log": "vscode-icons:file-type-npm",
    ".npmignore": "catppuccin:npm-ignore",
    ".npmrc": "vscode-icons:file-type-npm",
    ".ml": "vscode-icons:file-type-ocaml",
    ".mli": "vscode-icons:file-type-ocaml",
    ".cmx": "vscode-icons:file-type-ocaml",
    ".cmxa": "vscode-icons:file-type-ocaml",
    ".pl": "vscode-icons:file-type-perl",
    ".php": "vscode-icons:file-type-php",
    ".php.inc": "vscode-icons:file-type-php",
    ".pipeline": "vscode-icons:file-type-pipeline",
    ".pddl": "vscode-icons:file-type-pddl",
    ".plan": "vscode-icons:file-type-pddl-plan",
    ".happenings": "vscode-icons:file-type-pddl-happenings",
    ".ps1": "vscode-icons:file-type-powershell",
    ".psd1": "vscode-icons:file-type-powershell",
    ".psm1": "vscode-icons:file-type-powershell",
    ".prisma": "vscode-icons:file-type-light-prisma",
    ".pug": "vscode-icons:file-type-pug",
    ".pp": "vscode-icons:file-type-puppet",
    ".epp": "vscode-icons:file-type-puppet",
    ".purs": "vscode-icons:file-type-light-purescript",
    ".py": "vscode-icons:file-type-python",
    ".jsx": "vscode-icons:file-type-reactjs",
    ".spec.jsx": "vscode-icons:file-type-reactjs",
    ".test.jsx": "vscode-icons:file-type-reactjs",
    ".cjsx": "vscode-icons:file-type-reactjs",
    ".tsx": "vscode-icons:file-type-reactts",
    ".spec.tsx": "vscode-icons:file-type-reactts",
    ".test.tsx": "vscode-icons:file-type-reactts",
    ".res": "vscode-icons:file-type-rescript",
    ".resi": "vscode-icons:file-type-rescript",
    ".R": "vscode-icons:file-type-r",
    ".rmd": "vscode-icons:file-type-rmd",
    ".rb": "vscode-icons:file-type-ruby",
    ".erb": "vscode-icons:file-type-html",
    ".erb.html": "vscode-icons:file-type-html",
    ".html.erb": "vscode-icons:file-type-html",
    ".rs": "vscode-icons:file-type-rust",
    ".sass": "vscode-icons:file-type-sass",
    ".scss": "vscode-icons:file-type-sass",
    ".springBeans": "seti:spring",
    ".slim": "vscode-icons:file-type-slim",
    ".smarty.tpl": "vscode-icons:file-type-smarty",
    ".tpl": "vscode-icons:file-type-smarty",
    ".sbt": "vscode-icons:file-type-sbt",
    ".scala": "vscode-icons:file-type-scala",
    ".sol": "logos:ethereum-color",
    ".styl": "vscode-icons:file-type-light-stylus",
    ".svelte": "vscode-icons:file-type-svelte",
    ".swift": "vscode-icons:file-type-swift",
    ".sql": "vscode-icons:file-type-sql",
    ".soql": "vscode-icons:file-type-sql",
    ".tf": "vscode-icons:file-type-terraform",
    ".tf.json": "vscode-icons:file-type-terraform",
    ".tfvars": "vscode-icons:file-type-terraform",
    ".tfvars.json": "vscode-icons:file-type-terraform",
    ".tex": "vscode-icons:file-type-light-tex",
    ".sty": "vscode-icons:file-type-light-tex",
    ".dtx": "vscode-icons:file-type-light-tex",
    ".ins": "vscode-icons:file-type-light-tex",
    ".txt": "vscode-icons:file-type-text",
    ".toml": "vscode-icons:file-type-light-toml",
    ".twig": "vscode-icons:file-type-twig",
    ".ts": "vscode-icons:file-type-typescript",
    ".spec.ts": "vscode-icons:file-type-testts",
    ".test.ts": "vscode-icons:file-type-testts",
    ".vala": "vscode-icons:file-type-vala",
    ".vapi": "vscode-icons:file-type-vala",
    ".component": "vscode-icons:file-type-html",
    ".vue": "vscode-icons:file-type-vue",
    ".wasm": "vscode-icons:file-type-wasm",
    ".wat": "vscode-icons:file-type-wasm",
    ".xml": "vscode-icons:file-type-xml",
    ".yml": "vscode-icons:file-type-light-yaml",
    ".yaml": "vscode-icons:file-type-light-yaml",
    ".pro": "vscode-icons:file-type-prolog",
    ".zig": "vscode-icons:file-type-zig",
    ".jar": "vscode-icons:file-type-jar",
    ".zip": "vscode-icons:file-type-zip",
    ".ai": "vscode-icons:file-type-ai",
    ".psd": "vscode-icons:file-type-photoshop",
    ".pdf": "vscode-icons:file-type-pdf2",
    ".eot": "vscode-icons:file-type-light-font",
    ".ttf": "vscode-icons:file-type-light-font",
    ".woff": "vscode-icons:file-type-light-font",
    ".woff2": "vscode-icons:file-type-light-font",
    ".otf": "vscode-icons:file-type-light-font",
    ".avif": "vscode-icons:file-type-avif",
    ".gif": "vscode-icons:file-type-image",
    ".jpg": "vscode-icons:file-type-image",
    ".jpeg": "vscode-icons:file-type-image",
    ".png": "vscode-icons:file-type-image",
    ".pxm": "vscode-icons:file-type-image",
    ".svg": "vscode-icons:file-type-svg",
    ".svgx": "vscode-icons:file-type-image",
    ".tiff": "vscode-icons:file-type-image",
    ".webp": "vscode-icons:file-type-image",
    ".sublime-project": "vscode-icons:file-type-sublime",
    ".sublime-workspace": "vscode-icons:file-type-sublime",
    ".code-search": "vscode-icons:file-type-search-result",
    ".sh": "vscode-icons:file-type-shell",
    ".zsh": "vscode-icons:file-type-shell",
    ".fish": "vscode-icons:file-type-shell",
    ".zshrc": "vscode-icons:file-type-shell",
    ".bashrc": "vscode-icons:file-type-shell",
    ".mov": "vscode-icons:file-type-video",
    ".ogv": "vscode-icons:file-type-video",
    ".webm": "vscode-icons:file-type-video",
    ".avi": "vscode-icons:file-type-video",
    ".mpg": "vscode-icons:file-type-video",
    ".mp4": "vscode-icons:file-type-video",
    ".mp3": "vscode-icons:file-type-audio",
    ".ogg": "vscode-icons:file-type-audio",
    ".wav": "vscode-icons:file-type-audio",
    ".flac": "vscode-icons:file-type-audio",
    ".bat": "vscode-icons:file-type-bat",
    ".cmd": "vscode-icons:file-type-shell",
    ".babelrc": "vscode-icons:file-type-light-babel",
    ".babelrc.js": "vscode-icons:file-type-light-babel",
    ".babelrc.cjs": "vscode-icons:file-type-light-babel",
    ".bazelrc": "vscode-icons:file-type-bazel",
    ".bowerrc": "vscode-icons:file-type-bower2",
    ".codeclimate.yml": "vscode-icons:file-type-codeclimate",
    ".eslintrc": "vscode-icons:file-type-eslint",
    ".eslintrc.js": "vscode-icons:file-type-eslint",
    ".eslintrc.cjs": "vscode-icons:file-type-eslint",
    ".eslintrc.yaml": "vscode-icons:file-type-eslint",
    ".eslintrc.yml": "vscode-icons:file-type-eslint",
    ".eslintrc.json": "vscode-icons:file-type-eslint",
    ".eslintignore": "vscode-icons:file-type-eslint",
    ".firebaserc": "vscode-icons:file-type-firebase",
    ".gitlab-ci.yml": "vscode-icons:file-type-gitlab",
    ".jshintrc": "vscode-icons:file-type-jshint",
    ".jscsrc": "vscode-icons:file-type-js",
    ".stylelintrc": "vscode-icons:file-type-light-stylelint",
    ".stylelintrc.json": "vscode-icons:file-type-light-stylelint",
    ".stylelintrc.yaml": "vscode-icons:file-type-light-stylelint",
    ".stylelintrc.yml": "vscode-icons:file-type-light-stylelint",
    ".stylelintrc.js": "vscode-icons:file-type-light-stylelint",
    ".stylelintignore": "vscode-icons:file-type-light-stylelint",
    ".direnv": "vscode-icons:file-type-dotenv",
    ".env": "vscode-icons:file-type-dotenv",
    ".static": "vscode-icons:file-type-config",
    ".editorconfig": "vscode-icons:file-type-editorconfig",
    ".slugignore": "vscode-icons:file-type-config",
    ".tmp": "ph:clock-bold",
    ".htaccess": "vscode-icons:file-type-config",
    ".key": "vscode-icons:file-type-key",
    ".cert": "vscode-icons:file-type-cert",
    ".cer": "vscode-icons:file-type-cert",
    ".crt": "vscode-icons:file-type-cert",
    ".pem": "vscode-icons:file-type-cert",
    ".DS_Store": "octicon:diff-ignored-16"
  },
  partials: {
    "Gemfile": "vscode-icons:file-type-ruby",
    "gemfile": "vscode-icons:file-type-ruby",
    "dockerfile": "vscode-icons:file-type-docker",
    "Dockerfile": "vscode-icons:file-type-docker",
    "DOCKERFILE": "vscode-icons:file-type-docker",
    ".dockerignore": "vscode-icons:file-type-docker",
    "docker-healthcheck": "vscode-icons:file-type-docker",
    "docker-compose.yml": "vscode-icons:file-type-docker",
    "docker-compose.yaml": "vscode-icons:file-type-docker",
    "docker-compose.override.yml": "vscode-icons:file-type-docker",
    "docker-compose.override.yaml": "vscode-icons:file-type-docker",
    "GULPFILE": "vscode-icons:file-type-gulp",
    "Gulpfile": "vscode-icons:file-type-gulp",
    "gulpfile": "vscode-icons:file-type-gulp",
    "gulpfile.js": "vscode-icons:file-type-gulp",
    "LICENSE": "vscode-icons:file-type-license",
    "LICENCE": "vscode-icons:file-type-license",
    "LICENSE.txt": "vscode-icons:file-type-license",
    "LICENCE.txt": "vscode-icons:file-type-license",
    "LICENSE.md": "vscode-icons:file-type-license",
    "LICENCE.md": "vscode-icons:file-type-license",
    "COPYING": "vscode-icons:file-type-license",
    "COPYING.txt": "vscode-icons:file-type-license",
    "COPYING.md": "vscode-icons:file-type-license",
    "COMPILING": "vscode-icons:file-type-license",
    "COMPILING.txt": "vscode-icons:file-type-license",
    "COMPILING.md": "vscode-icons:file-type-license",
    "CONTRIBUTING": "vscode-icons:file-type-license",
    "CONTRIBUTING.txt": "vscode-icons:file-type-license",
    "CONTRIBUTING.md": "vscode-icons:file-type-license",
    "MAKEFILE": "vscode-icons:file-type-makefile",
    "Makefile": "vscode-icons:file-type-makefile",
    "makefile": "vscode-icons:file-type-makefile",
    "QMAKEFILE": "vscode-icons:file-type-makefile",
    "QMakefile": "vscode-icons:file-type-makefile",
    "qmakefile": "vscode-icons:file-type-makefile",
    "OMAKEFILE": "vscode-icons:file-type-makefile",
    "OMakefile": "vscode-icons:file-type-makefile",
    "omakefile": "vscode-icons:file-type-makefile",
    "CMAKELISTS.TXT": "vscode-icons:file-type-makefile",
    "CMAKELISTS.txt": "vscode-icons:file-type-makefile",
    "CMakeLists.txt": "vscode-icons:file-type-makefile",
    "cmakelists.txt": "vscode-icons:file-type-makefile",
    "Procfile": "vscode-icons:file-type-procfile",
    "TODO": "vscode-icons:file-type-light-todo",
    "TODO.txt": "vscode-icons:file-type-light-todo",
    "TODO.md": "vscode-icons:file-type-light-todo"
  }
};

// src/node/fileIcons/findIcon.ts
function getFileIcon(fileName, type2) {
  const name = getFileIconName(fileName, type2);
  if (!name)
    return type2 !== "folder" ? defaultFile : defaultFolder;
  return name;
}
function getFileIconName(fileName, type2 = "file") {
  if (type2 === "folder") {
    const icon2 = definitions.folders[fileName];
    if (icon2)
      return icon2;
    if (fileName.includes("/"))
      return definitions.folders[fileName.slice(fileName.lastIndexOf("/") + 1)];
    return;
  }
  let icon = definitions.named[fileName] || definitions.files[fileName];
  if (icon)
    return icon;
  icon = getFileIconTypeFromExtension(fileName) || void 0;
  if (icon)
    return icon;
  for (const [partial, partialIcon] of Object.entries(definitions.partials)) {
    if (fileName.includes(partial))
      return partialIcon;
  }
  return icon;
}
function getFileIconTypeFromExtension(fileName) {
  const firstDotIndex = fileName.indexOf(".");
  if (firstDotIndex === -1)
    return;
  let extension = fileName.slice(firstDotIndex);
  while (extension !== "") {
    const icon = definitions.extensions[extension];
    if (icon)
      return icon;
    const nextDotIndex = extension.indexOf(".", 1);
    if (nextDotIndex === -1)
      return;
    extension = extension.slice(nextDotIndex);
  }
}

// src/node/utils/stringifyProp.ts
function stringifyProp(data) {
  return JSON.stringify(data).replace(/'/g, "&#39");
}

// src/node/container/codeTabs.ts
var codeTabs = (md, options = {}) => {
  const getIcon = (filename) => {
    if (options.icon === false)
      return void 0;
    const { named, extensions } = isPlainObject(options.icon) ? options.icon : {};
    if (named === false && definitions.named[filename])
      return void 0;
    if (extensions === false && getFileIconTypeFromExtension(filename)) {
      return void 0;
    }
    const hasNamed = named && named.length;
    const hasExt = extensions && extensions.length;
    if (hasNamed || hasExt) {
      if (hasNamed && named.includes(filename))
        return definitions.named[filename];
      if (hasExt && extensions.some((ext) => filename.endsWith(ext)))
        return getFileIconTypeFromExtension(filename);
      return void 0;
    }
    return getFileIconName(filename);
  };
  tab(md, {
    name: "code-tabs",
    tabsOpenRenderer: ({ active, data }, tokens, index) => {
      const { meta } = tokens[index];
      const titles = data.map(({ title }) => md.renderInline(title));
      const tabsData = data.map((item, dataIndex) => {
        const { id = titles[dataIndex] } = item;
        return { id };
      });
      const titlesContent = titles.map((title, index2) => {
        const icon = getIcon(title);
        return `<template #title${index2}="{ value, isActive }">${icon ? `<VPIcon name="${icon}"/>` : ""}<span>${title}</span></template>`;
      }).join("");
      return `<CodeTabs id="${index}" :data='${stringifyProp(tabsData)}'${active === -1 ? "" : ` :active="${active}"`}${meta.id ? ` tab-id="${meta.id}"` : ""}>${titlesContent}`;
    },
    tabsCloseRenderer: () => `</CodeTabs>`,
    tabOpenRenderer: ({ index }, tokens, tokenIndex) => {
      let foundFence = false;
      for (let i = tokenIndex; i < tokens.length; i++) {
        const { type: type2 } = tokens[i];
        if (type2 === "code-tabs_tab_close")
          break;
        if ((type2 === "fence" || type2 === "import_code") && !foundFence) {
          foundFence = true;
          continue;
        }
        tokens[i].type = "code_tab_empty";
        tokens[i].hidden = true;
      }
      return `<template #tab${index}="{ value, isActive }">`;
    },
    tabCloseRenderer: () => `</template>`
  });
};

// src/node/container/demoWrapper.ts
function demoWrapperPlugin(md) {
  createContainerPlugin(md, "demo-wrapper", {
    before: (info) => {
      const { attrs: attrs2 } = resolveAttrs(info);
      const wrapperClasses = ["demo-wrapper"];
      let containerStyle = "";
      if (attrs2.title)
        wrapperClasses.push("has-title");
      if (attrs2.img)
        wrapperClasses.push("only-img");
      if (attrs2.noPadding)
        wrapperClasses.push("no-padding");
      if (attrs2.height) {
        const h = Number.parseFloat(attrs2.height) === Number(attrs2.height) ? `${attrs2.height}px` : attrs2.height;
        containerStyle += `--demo-container-height: ${h};`;
        wrapperClasses.push("has-height");
      }
      return `<div class="${wrapperClasses.join(" ")}">
  <div class="demo-head">
    <div class="demo-ctrl"><i></i><i></i><i></i></div>
    ${attrs2.title ? `<h4 class="demo-title"><p>${attrs2.title}</p></h4>` : ""}
  </div>
  <div class="demo-container" ${containerStyle ? `style="${containerStyle}"` : ""}>
`;
    },
    after: () => "</div></div>"
  });
}

// src/node/container/fileTree.ts
import Token from "markdown-it/lib/token.mjs";
import container2 from "markdown-it-container";
import { removeEndingSlash, removeLeadingSlash } from "vuepress/shared";
var type = "file-tree";
var closeType = `container_${type}_close`;
var componentName = "FileTreeItem";
var itemOpen = "file_tree_item_open";
var itemClose = "file_tree_item_close";
function fileTreePlugin(md, options = {}) {
  const getIcon = (filename, type2, mode) => {
    mode ||= options.icon || "colored";
    if (mode === "simple")
      return type2 === "folder" ? defaultFolder : defaultFile;
    return getFileIcon(filename, type2);
  };
  const render = (tokens, idx) => {
    const { attrs: attrs2 } = resolveAttrs(tokens[idx].info.slice(type.length - 1));
    if (tokens[idx].nesting === 1) {
      const hasRes = [];
      for (let i = idx + 1; !(tokens[i].nesting === -1 && tokens[i].type === closeType); ++i) {
        const token = tokens[i];
        if (token.type === "list_item_open") {
          const result = resolveTreeNodeInfo(tokens, token, i);
          if (result) {
            hasRes.push(token.level);
            const [info, inline] = result;
            const { filename, type: type2, expanded, empty } = info;
            const icon = getIcon(filename, type2, attrs2.icon);
            token.type = itemOpen;
            token.tag = componentName;
            token.attrSet("type", type2);
            token.attrSet(":expanded", expanded ? "true" : "false");
            token.attrSet(":empty", empty ? "true" : "false");
            updateInlineToken(inline, info, icon);
          } else {
            hasRes.push(-1);
          }
        } else if (token.type === "list_item_close") {
          if (token.level === hasRes.pop()) {
            token.type = itemClose;
            token.tag = componentName;
          }
        }
      }
      const title = attrs2.title;
      return `<div class="vp-file-tree">${title ? `<p class="vp-file-tree-title">${title}</p>` : ""}`;
    } else {
      return "</div>";
    }
  };
  md.use(container2, type, { render });
}
function resolveTreeNodeInfo(tokens, current, idx) {
  let hasInline = false;
  let hasChildren = false;
  let inline;
  for (let i = idx + 1; !(tokens[i].level === current.level && tokens[i].type === "list_item_close"); ++i) {
    if (tokens[i].type === "inline" && !hasInline) {
      inline = tokens[i];
      hasInline = true;
    } else if (tokens[i].tag === "ul") {
      hasChildren = true;
    }
    if (hasInline && hasChildren)
      break;
  }
  if (!hasInline)
    return void 0;
  const children = inline.children.filter((token) => token.type === "text" && token.content || token.tag === "strong");
  const filename = children.filter((token) => token.type === "text").map((token) => token.content).join(" ").split(/\s+/)[0];
  const focus = children[0]?.tag === "strong";
  const type2 = hasChildren || filename.endsWith("/") ? "folder" : "file";
  const info = {
    filename: removeLeadingSlash(removeEndingSlash(filename)),
    type: type2,
    focus,
    empty: !hasChildren,
    expanded: type2 === "folder" && !filename.endsWith("/")
  };
  return [info, inline];
}
function updateInlineToken(inline, info, icon) {
  const children = inline.children;
  const tokens = [];
  const wrapperOpen = new Token("span_open", "span", 1);
  const wrapperClose = new Token("span_close", "span", -1);
  wrapperOpen.attrSet("class", `tree-node ${info.type}`);
  tokens.push(wrapperOpen);
  if (info.filename !== "..." && info.filename !== "\u2026") {
    const iconOpen = new Token("vp_iconify_open", "VPIcon", 1);
    iconOpen.attrSet("name", icon);
    const iconClose = new Token("vp_iconify_close", "VPIcon", -1);
    tokens.push(iconOpen, iconClose);
  }
  const fileOpen = new Token("span_open", "span", 1);
  fileOpen.attrSet("class", `name${info.focus ? " focus" : ""}`);
  tokens.push(fileOpen);
  let isStrongTag = false;
  while (children.length) {
    const token = children.shift();
    if (token.type === "text" && token.content) {
      if (token.content.includes(" ")) {
        const [first, ...other] = token.content.split(" ");
        const text = new Token("text", "", 0);
        text.content = removeEndingSlash(first);
        tokens.push(text);
        const comment = new Token("text", "", 0);
        comment.content = other.join(" ");
        children.unshift(comment);
      } else {
        token.content = removeEndingSlash(token.content);
        tokens.push(token);
      }
      if (!isStrongTag)
        break;
    } else if (token.tag === "strong") {
      token.content = removeEndingSlash(token.content);
      tokens.push(token);
      if (token.nesting === 1) {
        isStrongTag = true;
      } else {
        break;
      }
    } else {
      tokens.push(token);
    }
  }
  const fileClose = new Token("span_close", "span", -1);
  tokens.push(fileClose);
  if (children.filter((token) => token.type === "text" && token.content.trim()).length) {
    const commentOpen = new Token("span_open", "span", 1);
    commentOpen.attrSet("class", "comment");
    const commentClose = new Token("span_close", "span", -1);
    tokens.push(commentOpen, ...children, commentClose);
  }
  tokens.push(wrapperClose);
  inline.children = tokens;
}

// src/node/container/langRepl.ts
import { promises as fs2 } from "node:fs";
import { resolveModule } from "local-pkg";
import container3 from "markdown-it-container";
import { path as path2 } from "vuepress/utils";
var RE_INFO = /^(#editable)?(.*)$/;
function createReplContainer(md, lang) {
  const type2 = `${lang}-repl`;
  const validate = (info) => info.trim().startsWith(type2);
  const render = (tokens, index) => {
    const token = tokens[index];
    const info = token.info.trim().slice(type2.length).trim() || "";
    const [, editable, title] = info.match(RE_INFO);
    if (token.nesting === 1)
      return `<CodeRepl ${editable ? "editable" : ""} title="${title || `${lang} playground`}">`;
    else
      return "</CodeRepl>";
  };
  md.use(container3, type2, { validate, render });
}
async function langReplPlugin(app, md, {
  theme,
  go = false,
  kotlin = false,
  rust = false
}) {
  if (kotlin) {
    createReplContainer(md, "kotlin");
  }
  if (go) {
    createReplContainer(md, "go");
  }
  if (rust) {
    createReplContainer(md, "rust");
  }
  theme ??= { light: "github-light", dark: "github-dark" };
  const data = { grammars: {} };
  const themesPath = path2.dirname(resolveModule("tm-themes"));
  const grammarsPath = path2.dirname(resolveModule("tm-grammars"));
  const readTheme = (theme2) => read(path2.join(themesPath, "themes", `${theme2}.json`));
  const readGrammar = (grammar) => read(path2.join(grammarsPath, "grammars", `${grammar}.json`));
  if (typeof theme === "string") {
    data.theme = await readTheme(theme);
  } else {
    data.theme = await Promise.all([
      readTheme(theme.light),
      readTheme(theme.dark)
    ]).then(([light, dark]) => ({ light, dark }));
  }
  if (kotlin)
    data.grammars.kotlin = await readGrammar("kotlin");
  if (go)
    data.grammars.go = await readGrammar("go");
  if (rust)
    data.grammars.rust = await readGrammar("rust");
  await app.writeTemp(
    "internal/md-power/replEditorData.js",
    `export default ${JSON.stringify(data, null, 2)}`
  );
}
async function read(file) {
  try {
    const content = await fs2.readFile(file, "utf-8");
    return JSON.parse(content);
  } catch {
  }
  return void 0;
}

// src/node/container/npmTo.ts
import { isArray } from "@vuepress/helper";
import container4 from "markdown-it-container";
var ALLOW_LIST = ["npm", "pnpm", "yarn", "bun", "deno"];
var BOOL_FLAGS = ["--no-save", "-B", "--save-bundle", "--save-dev", "-D", "--save-prod", "-P", "--save-peer", "-O", "--save-optional", "-E", "--save-exact", "-y", "--yes", "-g", "--global"];
var DEFAULT_TABS = ["npm", "pnpm", "yarn"];
var MANAGERS_CONFIG = {
  install: {
    pattern: /(?:^|\s)npm\s+(?:install|i)$/,
    pnpm: { cli: "pnpm install" },
    yarn: { cli: "yarn" },
    bun: { cli: "bun install" },
    deno: { cli: "deno install" }
  },
  add: {
    pattern: /(?:^|\s)npm\s+(?:install|i|add)(?:\s|$)/,
    pnpm: {
      cli: "pnpm add",
      flags: {
        "--no-save": "",
        // unsupported
        "-B": "",
        // unsupported
        "--save-bundle": ""
        // unsupported
      }
    },
    yarn: {
      cli: "yarn add",
      flags: {
        "--save-dev": "--dev",
        "--save-prod": "--prod",
        "-P": "",
        // in npm, `-P` same as `--save-prod`. but in yarn, `-P` same as `--peer`
        "--save-peer": "--peer",
        "--save-optional": "--optional",
        "--no-save": "",
        // unsupported
        "--save-exact": "--exact",
        "-B": "",
        // unsupported
        "--save-bundle": ""
        // unsupported
      }
    },
    bun: {
      cli: "bun add",
      flags: {
        "--save-dev": "--development",
        "-P": "",
        // it's default
        "--save-prod": "",
        // it's default
        "--save-peer": "",
        // unsupported
        "-O": "--optional",
        "--save-optional": "--optional",
        "--no-save": "",
        // unsupported
        "--save-exact": "--exact",
        "-B": "",
        // unsupported
        "--save-bundle": ""
        // unsupported
      }
    },
    deno: {
      cli: "deno add",
      flags: {
        "-g": "",
        // unsupported
        "--global": "",
        // unsupported
        "--save-dev": "--dev",
        "-P": "",
        // unsupported
        "--save-prod": "",
        // unsupported
        "--save-peer": "",
        // unsupported
        "-O": "",
        // unsupported
        "--save-optional": "",
        // unsupported
        "--no-save": "",
        // unsupported
        "-E": "",
        // unsupported
        "--save-exact": "",
        // unsupported
        "-B": "",
        // unsupported
        "--save-bundle": ""
        // unsupported
      }
    }
  },
  run: {
    pattern: /(?:^|\s)npm\s+(?:run|run-script|rum|urn)(?:\s|$)/,
    pnpm: {
      cli: "pnpm",
      flags: {
        "-w": "-F",
        // same as `--workspace`
        "--workspace": "--filter",
        // filter by workspaces
        "--": ""
        // scripts flags
      }
    },
    yarn: {
      cli: "yarn",
      flags: {
        "-w": "",
        // unsupported
        "--workspace": ""
        // unsupported
      }
    },
    bun: {
      cli: "bun run",
      flags: {
        "-w": "--filter",
        // same as `--workspace`
        "--workspace": "--filter"
        // filter by workspaces
      }
    },
    deno: {
      cli: "deno run",
      flags: {
        "-w": "",
        // unsupported
        "--workspace": ""
        // unsupported
      }
    }
  },
  create: {
    pattern: /(?:^|\s)npm\s+create\s/,
    pnpm: { cli: "pnpm create", flags: { "-y": "", "--yes": "" } },
    yarn: { cli: "yarn create", flags: { "-y": "", "--yes": "" } },
    bun: { cli: "bun create", flags: { "-y": "", "--yes": "" } },
    deno: { cli: "deno run -A ", flags: { "-y": "", "--yes": "" } }
  },
  init: {
    pattern: /(?:^|\s)npm\s+init/,
    pnpm: { cli: "pnpm init", flags: { "-y": "", "--yes": "" } },
    yarn: { cli: "yarn init", flags: { "-y": "", "--yes": "" } },
    bun: { cli: "bun init", flags: { "-y": "", "--yes": "" } },
    deno: { cli: "deno init", flags: { "-y": "", "--yes": "" } }
  },
  npx: {
    pattern: /(?:^|\s)npx\s+/,
    pnpm: { cli: "pnpm dlx" },
    yarn: { cli: "yarn dlx" },
    bun: { cli: "bunx" },
    deno: { cli: "deno run -A" }
  },
  remove: {
    pattern: /(?:^|\s)npm\s+(?:uninstall|r|rm|remove|unlink|un)(?:\s|$)/,
    pnpm: {
      cli: "pnpm remove",
      flags: { "--no-save": "", "--save": "", "-S": "" }
    },
    yarn: {
      cli: "yarn remove",
      flags: { "--save-dev": "--dev", "--save": "", "-S": "", "-g": "", "--global": "" }
    },
    bun: {
      cli: "bun remove",
      flags: { "--save-dev": "--development", "--save": "", "-S": "", "-g": "", "--global": "" }
    },
    deno: {
      cli: "deno uninstall",
      flags: { "--save-dev": "--dev", "--save": "", "-S": "" }
    }
  },
  ci: {
    pattern: /(?:^|\s)npm\s+ci$/,
    pnpm: { cli: "pnpm install --frozen-lockfile" },
    yarn: { cli: "yarn install --immutable" },
    bun: { cli: "bun install --frozen-lockfile" },
    deno: { cli: "deno install --frozen" }
  }
};
function npmToPlugins(md, options = {}) {
  const type2 = "npm-to";
  const opt = isArray(options) ? { tabs: options } : options;
  const defaultTabs = opt.tabs?.length ? opt.tabs : DEFAULT_TABS;
  const render = (tokens, idx) => {
    const { attrs: attrs2 } = resolveAttrs(tokens[idx].info.trim().slice(type2.length));
    const tabs2 = attrs2.tabs ? attrs2.tabs.split(/,\s*/) : defaultTabs;
    if (tokens[idx].nesting === 1) {
      const token = tokens[idx + 1];
      const info = token.info.trim();
      if (token.type === "fence") {
        const content = token.content;
        token.hidden = true;
        token.type = "text";
        token.content = "";
        const lines = content.split(/(\n|\s*&&\s*)/);
        return md.render(resolveNpmTo(lines, info, idx, tabs2), {});
      }
    }
    return "";
  };
  md.use(container4, type2, { render });
}
function resolveNpmTo(lines, info, idx, tabs2) {
  tabs2 = validateTabs(tabs2);
  const res = [];
  const map = {};
  for (const tab3 of tabs2) {
    const newLines = [];
    for (const line of lines) {
      const config = findConfig(line);
      if (config && config[tab3]) {
        const parsed = map[line] ??= parseLine(line);
        const { cli, flags } = config[tab3];
        let newLine = `${parsed.env ? `${parsed.env} ` : ""}${cli}`;
        if (parsed.args && flags) {
          let args = parsed.args;
          for (const [key, value] of Object.entries(flags)) {
            args = args.replaceAll(key, value);
          }
          newLine += ` ${args.replace(/\s+-/g, " -").trim()}`;
        }
        if (parsed.cmd)
          newLine += ` ${parsed.cmd}`;
        if (parsed.scriptArgs)
          newLine += ` ${parsed.scriptArgs}`;
        newLines.push(newLine.trim());
      } else {
        newLines.push(line);
      }
    }
    res.push(`@tab ${tab3}
\`\`\`${info}
${newLines.join("")}
\`\`\``);
  }
  return `:::code-tabs#npm-to-${idx}
${res.join("\n")}
:::`;
}
function findConfig(line) {
  for (const { pattern, ...config } of Object.values(MANAGERS_CONFIG)) {
    if (pattern.test(line)) {
      return config;
    }
  }
  return void 0;
}
function validateTabs(tabs2) {
  tabs2 = tabs2.filter((tab3) => ALLOW_LIST.includes(tab3));
  if (tabs2.length === 0) {
    return DEFAULT_TABS;
  }
  return tabs2;
}
var LINE_REG = /(.*)(npm|npx)\s+(.*)/;
function parseLine(line) {
  const match = line.match(LINE_REG);
  if (!match)
    return false;
  const [, env, cli, rest] = match;
  const idx = rest.trim().indexOf(" ");
  if (cli === "npx") {
    let cmd = "";
    let scriptArgs = "";
    if (idx !== -1) {
      cmd = rest.slice(0, idx);
      scriptArgs = rest.slice(idx + 1).trim();
    } else {
      cmd = rest;
    }
    return { env, cli, cmd, scriptArgs };
  }
  if (idx === -1)
    return { env, cli: `${cli} ${rest.trim()}`, cmd: "" };
  return { env, cli: `${cli} ${rest.slice(0, idx)}`, ...parseArgs(rest.slice(idx + 1)) };
}
function parseArgs(line) {
  line = line?.trim();
  const [npmArgs, scriptArgs] = line.split(/\s+--\s+/);
  let cmd = "";
  let args = "";
  if (npmArgs[0] !== "-") {
    if (npmArgs[0] === '"' || npmArgs[0] === "'") {
      const idx = npmArgs.slice(1).indexOf(npmArgs[0]);
      cmd = npmArgs.slice(0, idx + 2);
      args = npmArgs.slice(idx + 2);
    } else {
      const idx = npmArgs.indexOf(" -");
      if (idx === -1) {
        cmd = npmArgs;
      } else {
        cmd = npmArgs.slice(0, idx);
        args = npmArgs.slice(idx + 1);
      }
    }
  } else {
    let newLine = "";
    let value = "";
    let isQuote = false;
    let isBool = false;
    let isNextValue = false;
    let quote = "";
    for (let i = 0; i < npmArgs.length; i++) {
      const v = npmArgs[i];
      if (!isQuote && (v === '"' || v === "'")) {
        quote = v;
        isQuote = true;
        value += v;
      } else if (isQuote && v === quote) {
        isQuote = false;
        value += v;
      } else if ((v === " " || v === "=" || i === npmArgs.length - 1) && !isQuote && value) {
        if (i === npmArgs.length - 1) {
          value += v;
        }
        const isKey = value[0] === "-";
        if (isKey) {
          isBool = BOOL_FLAGS.includes(value);
          isNextValue = !isBool;
        }
        if (!isKey && !isNextValue) {
          cmd += `${value}`;
        } else {
          newLine += `${value}${i !== npmArgs.length - 1 ? v : ""}`;
          if (!isKey && isNextValue) {
            isNextValue = false;
          }
        }
        value = "";
      } else {
        value += v;
      }
    }
    args = newLine;
  }
  return { cmd: cmd.trim(), args: args.trim(), scriptArgs };
}

// src/node/container/steps.ts
function stepsPlugin(md) {
  createContainerPlugin(md, "steps", {
    before: () => '<div class="vp-steps">'
  });
}

// src/node/container/tabs.ts
import { tab as tab2 } from "@mdit/plugin-tab";
var tabs = (md) => {
  tab2(md, {
    name: "tabs",
    tabsOpenRenderer: ({ active, data }, tokens, index) => {
      const { meta } = tokens[index];
      const titles = data.map(({ title }) => md.renderInline(title));
      const tabsData = data.map((item, dataIndex) => {
        const { id = titles[dataIndex] } = item;
        return { id };
      });
      return `<Tabs id="${index}" :data='${stringifyProp(tabsData)}'${active === -1 ? "" : ` :active="${active}"`}${meta.id ? ` tab-id="${meta.id}"` : ""}>
${titles.map(
        (title, titleIndex) => `<template #title${titleIndex}="{ value, isActive }">${title}</template>`
      ).join("")}`;
    },
    tabsCloseRenderer: () => `</Tabs>`,
    tabOpenRenderer: ({ index }) => `<template #tab${index}="{ value, isActive }">`,
    tabCloseRenderer: () => `</template>`
  });
};

// src/node/container/index.ts
async function containerPlugin(app, md, options) {
  alignPlugin(md);
  tabs(md);
  codeTabs(md, options.codeTabs);
  demoWrapperPlugin(md);
  stepsPlugin(md);
  cardPlugin(md);
  if (options.npmTo) {
    npmToPlugins(md, typeof options.npmTo === "boolean" ? {} : options.npmTo);
  }
  if (options.repl)
    await langReplPlugin(app, md, options.repl);
  if (options.fileTree) {
    fileTreePlugin(md, isPlainObject2(options.fileTree) ? options.fileTree : {});
  }
}

// src/node/embed/caniuse.ts
import container5 from "markdown-it-container";

// src/node/utils/nanoid.ts
import { customAlphabet } from "nanoid";
var nanoid = customAlphabet("abcdefghijklmnopqrstuvwxyz", 5);

// src/node/embed/createEmbedRuleBlock.ts
function createEmbedRuleBlock(md, {
  type: type2,
  name = type2,
  syntaxPattern,
  beforeName = "import_code",
  ruleOptions = { alt: ["paragraph", "reference", "blockquote", "list"] },
  meta,
  content
}) {
  const MIN_LENGTH = type2.length + 5;
  const START_CODES = [64, 91, ...type2.split("").map((c) => c.charCodeAt(0))];
  md.block.ruler.before(
    beforeName,
    name,
    (state, startLine, endLine, silent) => {
      const pos = state.bMarks[startLine] + state.tShift[startLine];
      const max = state.eMarks[startLine];
      if (pos + MIN_LENGTH > max)
        return false;
      for (let i = 0; i < START_CODES.length; i += 1) {
        if (state.src.charCodeAt(pos + i) !== START_CODES[i])
          return false;
      }
      const match = state.src.slice(pos, max).match(syntaxPattern);
      if (!match)
        return false;
      if (silent)
        return true;
      const token = state.push(name, "", 0);
      token.meta = meta(match);
      token.map = [startLine, startLine + 1];
      state.line = startLine + 1;
      return true;
    },
    ruleOptions
  );
  md.renderer.rules[name] = (tokens, index) => {
    const token = tokens[index];
    token.content = content(token.meta);
    return token.content;
  };
}

// src/node/embed/caniuse.ts
var UNDERLINE_RE = /_+/g;
var caniusePlugin = (md, { mode: defaultMode = "embed" } = {}) => {
  createEmbedRuleBlock(md, {
    type: "caniuse",
    syntaxPattern: /^@\[caniuse\s*(embed|image)?(?:\{([0-9,\-]*)\})?\]\(([^)]*)\)/,
    meta: ([, mode, versions = "", feature]) => ({
      feature,
      mode: mode || defaultMode,
      versions
    }),
    content: (meta) => resolveCanIUse(meta)
  });
};
function legacyCaniuse(md, { mode = "embed" } = {}) {
  const modeMap = ["image", "embed"];
  const isMode = (mode2) => modeMap.includes(mode2);
  mode = isMode(mode) ? mode : modeMap[0];
  const type2 = "caniuse";
  const validateReg = new RegExp(`^${type2}`);
  const validate = (info) => {
    return validateReg.test(info.trim());
  };
  const render = (tokens, index) => {
    const token = tokens[index];
    if (token.nesting === 1) {
      const info = token.info.trim().slice(type2.length).trim() || "";
      const feature = info.split(/\s+/)[0];
      const versions = info.match(/\{(.*)\}/)?.[1] || "";
      return feature ? resolveCanIUse({ feature, mode, versions }) : "";
    } else {
      return "";
    }
  };
  md.use(container5, type2, { validate, render });
}
function resolveCanIUse({ feature, mode, versions }) {
  if (!feature)
    return "";
  if (mode === "image") {
    const link = "https://caniuse.bitsofco.de/image/";
    const alt = `Data on support for the ${feature} feature across the major browsers from caniuse.com`;
    return `<ClientOnly><p><picture>
      <source type="image/webp" srcset="${link}${feature}.webp">
      <source type="image/png" srcset="${link}${feature}.png">
      <img src="${link}${feature}.jpg" alt="${alt}" width="100%">
    </picture></p></ClientOnly>`;
  }
  feature = feature.replace(UNDERLINE_RE, "_");
  const { past, future } = resolveVersions(versions);
  const meta = nanoid();
  return `<CanIUseViewer feature="${feature}" meta="${meta}" past="${past}" future="${future}" />`;
}
function resolveVersions(versions) {
  if (!versions)
    return { past: 2, future: 1 };
  const list = versions.split(",").map((v) => Number(v.trim())).filter((v) => !Number.isNaN(v) && v >= -5 && v <= 3);
  list.push(0);
  const uniq = [...new Set(list)].sort((a, b) => b - a);
  return {
    future: uniq[0],
    past: Math.abs(uniq[uniq.length - 1])
  };
}

// src/node/utils/parseRect.ts
function parseRect(str, unit = "px") {
  if (Number.parseFloat(str) === Number(str))
    return `${str}${unit}`;
  return str;
}

// src/node/embed/code/codepen.ts
var CODEPEN_LINK = "https://codepen.io/";
var codepenPlugin = (md) => {
  createEmbedRuleBlock(md, {
    type: "codepen",
    syntaxPattern: /^@\[codepen([^\]]*)\]\(([^)]*)\)/,
    meta: ([, info, source]) => {
      const { attrs: attrs2 } = resolveAttrs(info);
      const [user, slash] = source.split("/");
      return {
        width: attrs2.width ? parseRect(attrs2.width) : "100%",
        height: attrs2.height ? parseRect(attrs2.height) : "400px",
        user,
        slash,
        title: attrs2.title,
        preview: attrs2.preview,
        editable: attrs2.editable,
        tab: attrs2.tab || "result",
        theme: attrs2.theme
      };
    },
    content: (meta) => {
      const { title = "Codepen", height, width } = meta;
      const params = new URLSearchParams();
      if (meta.editable) {
        params.set("editable", "true");
      }
      params.set("default-tab", meta.tab);
      if (meta.theme) {
        params.set("theme-id", meta.theme);
      }
      const middle = meta.preview ? "/embed/preview/" : "/embed/";
      const link = `${CODEPEN_LINK}${meta.user}${middle}${meta.slash}?${params.toString()}`;
      const style = `width:${width};height:${height};margin:16px auto;border-radius:5px;`;
      return `<iframe class="code-pen-iframe-wrapper" src="${link}" title="${title}" style="${style}" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">See the Pen <a href="${CODEPEN_LINK}${meta.user}/pen/${meta.slash}">${title}</a> by ${meta.user} (<a href="${CODEPEN_LINK}${meta.user}">@${meta.user}</a>) on <a href="${CODEPEN_LINK}">CodePen</a>.</iframe>`;
    }
  });
};

// src/node/embed/code/codeSandbox.ts
var codeSandboxPlugin = (md) => {
  createEmbedRuleBlock(md, {
    type: "codesandbox",
    syntaxPattern: /^@\[codesandbox(?:\s+(embed|button))?([^\]]*)\]\(([^)]*)\)/,
    meta([, type2, info, source]) {
      const { attrs: attrs2 } = resolveAttrs(info);
      const [profile, filepath2 = ""] = source.split("#");
      const [user, id] = profile.includes("/") ? profile.split("/") : ["", profile];
      return {
        width: attrs2.width ? parseRect(attrs2.width) : "100%",
        height: attrs2.height ? parseRect(attrs2.height) : "500px",
        user,
        id,
        title: attrs2.title ?? "",
        console: attrs2.console ?? false,
        navbar: attrs2.navbar ?? true,
        layout: attrs2.layout ?? "",
        type: type2 || "embed",
        filepath: filepath2
      };
    },
    content({ title, height, width, user, id, type: type2, filepath: filepath2, console, navbar, layout }) {
      return `<CodeSandboxViewer title="${title}" height="${height}" width="${width}" user="${user}" id="${id}" type="${type2}" filepath="${filepath2}" :console=${console} :navbar=${navbar} layout="${layout}" />`;
    }
  });
};

// src/node/embed/code/jsfiddle.ts
var jsfiddlePlugin = (md) => {
  createEmbedRuleBlock(md, {
    type: "jsfiddle",
    syntaxPattern: /^@\[jsfiddle([^\]]*)\]\(([^)]*)\)/,
    meta([, info, source]) {
      const { attrs: attrs2 } = resolveAttrs(info);
      const [user, id] = source.split("/");
      return {
        width: attrs2.width ? parseRect(attrs2.width) : "100%",
        height: attrs2.height ? parseRect(attrs2.height) : "400px",
        user,
        id,
        title: attrs2.title || "JS Fiddle",
        tab: attrs2.tab?.replace(/\s+/g, "") || "js,css,html,result",
        theme: attrs2.theme || "dark"
      };
    },
    content: ({ title, height, width, user, id, tab: tab3, theme }) => {
      theme = theme === "dark" ? "/dark/" : "";
      const link = `https://jsfiddle.net/${user}/${id}/embedded/${tab3}${theme}`;
      const style = `width:${width};height:${height};margin:16px auto;border:none;border-radius:5px;`;
      return `<iframe class="js-fiddle-iframe-wrapper" style="${style}" title="${title}" src="${link}" allowfullscreen="true" allowpaymentrequest="true"></iframe>`;
    }
  });
};

// src/node/embed/code/replit.ts
var replitPlugin = (md) => {
  createEmbedRuleBlock(md, {
    type: "replit",
    syntaxPattern: /^@\[replit([^\]]*)\]\(([^)]*)\)/,
    meta: ([, info = "", source = ""]) => {
      const { attrs: attrs2 } = resolveAttrs(info);
      return {
        width: attrs2.width ? parseRect(attrs2.width) : "100%",
        height: attrs2.height ? parseRect(attrs2.height) : "450px",
        source: source.startsWith("@") ? source : `@${source}`,
        title: attrs2.title,
        theme: attrs2.theme || ""
      };
    },
    content({ title, height, width, source, theme }) {
      return `<ReplitViewer title="${title || ""}" height="${height}" width="${width}" source="${source}" theme="${theme}" />`;
    }
  });
};

// src/node/embed/pdf.ts
import { path as path3 } from "vuepress/utils";
var pdfPlugin = (md) => {
  createEmbedRuleBlock(md, {
    type: "pdf",
    // eslint-disable-next-line regexp/no-super-linear-backtracking
    syntaxPattern: /^@\[pdf(?:\s+(\d+))?([^\]]*)\]\(([^)]*)\)/,
    meta([, page, info, src]) {
      const { attrs: attrs2 } = resolveAttrs(info);
      return {
        src,
        page: +page || 1,
        noToolbar: Boolean(attrs2.noToolbar ?? false),
        zoom: +attrs2.zoom || 50,
        width: attrs2.width ? parseRect(attrs2.width) : "100%",
        height: attrs2.height ? parseRect(attrs2.height) : "",
        ratio: attrs2.ratio ? parseRect(attrs2.ratio) : "",
        title: path3.basename(src || "")
      };
    },
    content({ title, src, page, noToolbar, width, height, ratio, zoom }) {
      return `<PDFViewer src="${src}" title="${title}" :page="${page}" :no-toolbar="${noToolbar}" width="${width}" height="${height}" ratio="${ratio}" :zoom="${zoom}" />`;
    }
  });
};

// src/node/embed/video/bilibili.ts
import { URLSearchParams as URLSearchParams2 } from "node:url";

// src/node/utils/timeToSeconds.ts
function timeToSeconds(time) {
  if (!time)
    return 0;
  if (Number.parseFloat(time) === Number(time))
    return Number(time);
  const [s, m, h = 0] = time.split(/\s*:\s*/).reverse().map((n) => Number(n) || 0);
  return s + m * 60 + h * 3600;
}

// src/node/embed/video/bilibili.ts
var BILIBILI_LINK = "https://player.bilibili.com/player.html";
var bilibiliPlugin = (md) => {
  createEmbedRuleBlock(md, {
    type: "bilibili",
    name: "video_bilibili",
    // eslint-disable-next-line regexp/no-super-linear-backtracking
    syntaxPattern: /^@\[bilibili(?:\s+p(\d+))?([^\]]*)\]\(([^)]*)\)/,
    meta([, page, info, source]) {
      const { attrs: attrs2 } = resolveAttrs(info);
      const ids = source.trim().split(/\s+/);
      const bvid = ids.find((id) => id.startsWith("BV"));
      const [aid, cid] = ids.filter((id) => !id.startsWith("BV"));
      return {
        page: +page,
        bvid,
        aid,
        cid,
        autoplay: attrs2.autoplay ?? false,
        time: timeToSeconds(attrs2.time),
        title: attrs2.title,
        width: attrs2.width ? parseRect(attrs2.width) : "100%",
        height: attrs2.height ? parseRect(attrs2.height) : "",
        ratio: attrs2.ratio ? parseRect(attrs2.ratio) : ""
      };
    },
    content(meta) {
      const params = new URLSearchParams2();
      if (meta.bvid) {
        params.set("bvid", meta.bvid);
      }
      if (meta.aid) {
        params.set("aid", meta.aid);
      }
      if (meta.cid) {
        params.set("cid", meta.cid);
      }
      if (meta.page) {
        params.set("p", meta.page.toString());
      }
      if (meta.time) {
        params.set("t", meta.time.toString());
      }
      params.set("autoplay", meta.autoplay ? "1" : "0");
      const source = `${BILIBILI_LINK}?${params.toString()}`;
      return `<VideoBilibili src="${source}" width="${meta.width}" height="${meta.height}" ratio="${meta.ratio}" title="${meta.title}" />`;
    }
  });
};

// src/node/embed/video/youtube.ts
import { URLSearchParams as URLSearchParams3 } from "node:url";
var YOUTUBE_LINK = "https://www.youtube.com/embed/";
var youtubePlugin = (md) => {
  createEmbedRuleBlock(md, {
    type: "youtube",
    name: "video_youtube",
    syntaxPattern: /^@\[youtube([^\]]*)\]\(([^)]*)\)/,
    meta([, info, id]) {
      const { attrs: attrs2 } = resolveAttrs(info);
      return {
        id,
        autoplay: attrs2.autoplay ?? false,
        loop: attrs2.loop ?? false,
        start: timeToSeconds(attrs2.start),
        end: timeToSeconds(attrs2.end),
        title: attrs2.title,
        width: attrs2.width ? parseRect(attrs2.width) : "100%",
        height: attrs2.height ? parseRect(attrs2.height) : "",
        ratio: attrs2.ratio ? parseRect(attrs2.ratio) : ""
      };
    },
    content(meta) {
      const params = new URLSearchParams3();
      if (meta.autoplay) {
        params.set("autoplay", "1");
      }
      if (meta.loop) {
        params.set("loop", "1");
      }
      if (meta.start) {
        params.set("start", meta.start.toString());
      }
      if (meta.end) {
        params.set("end", meta.end.toString());
      }
      const source = `${YOUTUBE_LINK}/${meta.id}?${params.toString()}`;
      return `<VideoYoutube src="${source}" width="${meta.width}" height="${meta.height}" ratio="${meta.ratio}" title="${meta.title}" />`;
    }
  });
};

// src/node/embed/index.ts
function embedSyntaxPlugin(md, options) {
  if (options.caniuse) {
    const caniuse = options.caniuse === true ? {} : options.caniuse;
    md.use(caniusePlugin, caniuse);
    legacyCaniuse(md, caniuse);
  }
  if (options.pdf) {
    md.use(pdfPlugin);
  }
  if (options.bilibili) {
    md.use(bilibiliPlugin);
  }
  if (options.youtube) {
    md.use(youtubePlugin);
  }
  if (options.codepen) {
    md.use(codepenPlugin);
  }
  if (options.replit) {
    md.use(replitPlugin);
  }
  if (options.codeSandbox) {
    md.use(codeSandboxPlugin);
  }
  if (options.jsfiddle) {
    md.use(jsfiddlePlugin);
  }
}

// src/node/enhance/docsTitle.ts
var REG_HEADING = /^#\s*?([^#\s].*)?\n/;
function docsTitlePlugin(md) {
  const render = md.render;
  md.render = (source, env) => {
    if (!env.filePathRelative)
      return render(source, env);
    let { matter, content } = parseSource(source.trim());
    let title = "";
    content = content.trim().replace(REG_HEADING, (_, match) => {
      title = match.trim();
      return "";
    });
    source = `${matter}
${content}`;
    const result = render(source, env);
    if (title) {
      env.frontmatter ??= {};
      env.frontmatter.title ??= title;
    }
    return result;
  };
}
function parseSource(source) {
  const char = "---";
  if (!source.startsWith(char)) {
    return { matter: "", content: source };
  } else {
    const end = source.indexOf(`
${char}`);
    const len = char.length + 1;
    return {
      matter: source.slice(0, end + len),
      content: source.slice(end + len)
    };
  }
}

// src/node/inline/index.ts
import { attrs } from "@mdit/plugin-attrs";
import { footnote } from "@mdit/plugin-footnote";
import { mark } from "@mdit/plugin-mark";
import { sub } from "@mdit/plugin-sub";
import { sup } from "@mdit/plugin-sup";
import { tasklist } from "@mdit/plugin-tasklist";
import { isPlainObject as isPlainObject3 } from "@vuepress/helper";

// src/node/inline/icons.ts
var [openTag, endTag] = [":[", "]:"];
var iconsPlugin = (md, options = {}) => md.inline.ruler.before("emphasis", "iconify", createTokenizer(options));
function createTokenizer(options) {
  return (state, silent) => {
    let found = false;
    const max = state.posMax;
    const start = state.pos;
    if (state.src.slice(start, start + 2) !== openTag)
      return false;
    if (silent)
      return false;
    if (max - start < 5)
      return false;
    state.pos = start + 2;
    while (state.pos < max) {
      if (state.src.slice(state.pos, state.pos + 2) === endTag) {
        found = true;
        break;
      }
      state.md.inline.skipToken(state);
    }
    if (!found || start + 2 === state.pos) {
      state.pos = start;
      return false;
    }
    const content = state.src.slice(start + 2, state.pos);
    if (/^\s|\s$/.test(content)) {
      state.pos = start;
      return false;
    }
    state.posMax = state.pos;
    state.pos = start + 2;
    const [name, opt = ""] = content.split(/\s+/);
    const [size, color = options.color] = opt.split("/");
    const icon = state.push("vp_iconify_open", "VPIcon", 1);
    icon.markup = openTag;
    icon.attrSet("name", name);
    if (size || options.size)
      icon.attrSet("size", String(size || options.size));
    if (color)
      icon.attrSet("color", color);
    const close = state.push("vp_iconify_close", "VPIcon", -1);
    close.markup = endTag;
    state.pos = state.posMax + 2;
    state.posMax = max;
    return true;
  };
}

// src/node/inline/plot.ts
var [openTag2, endTag2] = ["!!", "!!"];
var plotPlugin = (md) => md.inline.ruler.before("emphasis", "plot", createTokenizer2());
function createTokenizer2() {
  return (state, silent) => {
    let found = false;
    const max = state.posMax;
    const start = state.pos;
    if (state.src.slice(start, start + 2) !== openTag2)
      return false;
    if (silent)
      return false;
    if (max - start < 5)
      return false;
    state.pos = start + 2;
    while (state.pos < max) {
      if (state.src.slice(state.pos - 1, state.pos + 1) === endTag2) {
        found = true;
        break;
      }
      state.md.inline.skipToken(state);
    }
    if (!found || start + 2 === state.pos) {
      state.pos = start;
      return false;
    }
    const content = state.src.slice(start + 2, state.pos - 1);
    if (/^\s|\s$/.test(content)) {
      state.pos = start;
      return false;
    }
    state.posMax = state.pos - 1;
    state.pos = start + 2;
    const open = state.push("plot_open", "Plot", 1);
    open.markup = openTag2;
    const text = state.push("text", "", 0);
    text.content = content;
    const close = state.push("plot_close", "Plot", -1);
    close.markup = endTag2;
    state.pos = state.posMax + 2;
    state.posMax = max;
    return true;
  };
}

// src/node/inline/index.ts
function inlineSyntaxPlugin(md, options) {
  md.use(attrs);
  md.use(mark);
  md.use(sub);
  md.use(sup);
  md.use(footnote);
  md.use(tasklist);
  if (options.icons) {
    md.use(iconsPlugin, isPlainObject3(options.icons) ? options.icons : {});
  }
  if (options.plot === true || isPlainObject3(options.plot) && options.plot.tag !== false) {
    md.use(plotPlugin);
  }
}

// src/node/prepareConfigFile.ts
import { ensureEndingSlash } from "@vuepress/helper";
import { getDirname, path as path4 } from "vuepress/utils";
var { url: filepath } = import.meta;
var __dirname = getDirname(filepath);
var CLIENT_FOLDER = ensureEndingSlash(
  path4.resolve(__dirname, "../client")
);
async function prepareConfigFile(app, options) {
  const imports = /* @__PURE__ */ new Set();
  const enhances = /* @__PURE__ */ new Set();
  imports.add(`import Tabs from '${CLIENT_FOLDER}components/Tabs.vue'`);
  enhances.add(`app.component('Tabs', Tabs)`);
  imports.add(`import CodeTabs from '${CLIENT_FOLDER}components/CodeTabs.vue'`);
  enhances.add(`app.component('CodeTabs', CodeTabs)`);
  if (options.pdf) {
    imports.add(`import PDFViewer from '${CLIENT_FOLDER}components/PDFViewer.vue'`);
    enhances.add(`app.component('PDFViewer', PDFViewer)`);
  }
  if (options.bilibili) {
    imports.add(`import Bilibili from '${CLIENT_FOLDER}components/Bilibili.vue'`);
    enhances.add(`app.component('VideoBilibili', Bilibili)`);
  }
  if (options.youtube) {
    imports.add(`import Youtube from '${CLIENT_FOLDER}components/Youtube.vue'`);
    enhances.add(`app.component('VideoYoutube', Youtube)`);
  }
  if (options.replit) {
    imports.add(`import Replit from '${CLIENT_FOLDER}components/Replit.vue'`);
    enhances.add(`app.component('ReplitViewer', Replit)`);
  }
  if (options.codeSandbox) {
    imports.add(`import CodeSandbox from '${CLIENT_FOLDER}components/CodeSandbox.vue'`);
    enhances.add(`app.component('CodeSandboxViewer', CodeSandbox)`);
  }
  if (options.plot) {
    imports.add(`import Plot from '${CLIENT_FOLDER}components/Plot.vue'`);
    enhances.add(`app.component('Plot', Plot)`);
  }
  if (options.repl) {
    imports.add(`import CodeRepl from '${CLIENT_FOLDER}components/CodeRepl.vue'`);
    enhances.add(`app.component('CodeRepl', CodeRepl)`);
  }
  if (options.caniuse) {
    imports.add(`import CanIUse from '${CLIENT_FOLDER}components/CanIUse.vue'`);
    enhances.add(`app.component('CanIUseViewer', CanIUse)`);
  }
  if (options.fileTree) {
    imports.add(`import FileTreeItem from '${CLIENT_FOLDER}components/FileTreeItem.vue'`);
    enhances.add(`app.component('FileTreeItem', FileTreeItem)`);
  }
  return app.writeTemp(
    "md-power/config.js",
    `import { defineClientConfig } from 'vuepress/client'
${Array.from(imports.values()).join("\n")}

import '${CLIENT_FOLDER}styles/index.css'

export default defineClientConfig({
  enhance({ router, app }) {
${Array.from(enhances.values()).map((item) => `    ${item}`).join("\n")}
  }
})
`
  );
}

// src/node/plugin.ts
function markdownPowerPlugin(options = {}) {
  return {
    name: "vuepress-plugin-md-power",
    clientConfigFile: (app) => prepareConfigFile(app, options),
    define: {
      __MD_POWER_INJECT_OPTIONS__: options
    },
    extendsBundlerOptions(bundlerOptions, app) {
      if (options.repl) {
        addViteOptimizeDepsInclude(
          bundlerOptions,
          app,
          ["shiki/core", "shiki/wasm", "shiki/engine/oniguruma"]
        );
      }
    },
    extendsMarkdown: async (md, app) => {
      docsTitlePlugin(md);
      embedSyntaxPlugin(md, options);
      inlineSyntaxPlugin(md, options);
      await containerPlugin(app, md, options);
      await imageSizePlugin(app, md, options.imageSize);
    }
  };
}
export {
  markdownPowerPlugin,
  resolveImageSize
};
/* istanbul ignore if -- @preserve */
